{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The functionality of this Python library can be divided in the below two parts: Executable KG construction : An executable KG representing an ML pipeline is constructed as per user's input (programmatically or via CLI) based on the KG schemas. The construction is done by sequentially creating pairs of instances of ds:AtomicTask and ds:AtomicMethod sub-classes, and their properties. The definition of these sub-classes can be found in the bottom-level KG schemas . After each KG component is built, it is validated using the KG schemas and added to an RDFLib Graph object. The KG is finally saved in Turtle format. ML pipeline execution : The executable KG is parsed using RDFLib and queried using SPARQL to retrieve its ML pipeline. The pipeline's ordered tasks are sequentially mapped to Python objects that include an implemented run_method() Python method which is then invoked. This is as an abstract method of the Task class that is implemented by its bottom-level children classes. The different implementations of run_method() correspond to each of the Method 's bottom level sub-classes that are defined in the Visualization, Statistics, and ML KG schemas. The method categories are described below. Visualization : This is a set of methods for visualization, including two types: (1) The plot canvas methods that define the plot size and layout. (2) The various kinds of plot methods (line plot, scatter plot, bar plot, etc.). These methods use matplotlib to visualize data. Statistics and Feature Engineering : This includes methods for statistical analysis and feature engineering like IQR calculation, mean and std-deviation calculation, etc., which can then form complex methods like outlier detection method and normalization method. Machine Learning : This is a group of methods that support ML algorithms like Linear Regression, MLP, and k-NN and helper functions that perform e.g. data splitting and ML model performance calculation. This library is part of the following paper submitted to ESWC 2023: Klironomos A., Zhou B., Tan Z., Zheng Z., Gad-Elrab M., Paulheim H., Kharlamov E.: ExeKGLib: A Python Library for Machine Learning Analytics based on Knowledge Graphs","title":"Overview"},{"location":"adding-new-task-and-method/","text":"Adding a new ML-related task and method \u00b6 Adding semantic components to a bottom-level KG schema \u00b6 When extending an existing bottom-level KG schema , naming conventions should be followed and can be inferred by the below example code snippets. The placeholders used are specified below each snippet. For the sake of example, the namespace prefix of the ML KG schema ( ml ) is used in the following code snippets. To add the required semantic components, the following steps should be followed: Open the .ttl file of the desired bottom-level KG schema, found in the relevant repo . Add a new sub-class of ds:AtomicTask . ml : NewTask rdf : type owl : Class ; rdfs : subClassOf ds : AtomicTask . In the above example, NewTask should be replaced with the desired task name. 3. Add a new sub-class of ds:AtomicMethod . ml : NewMethod rdf : type owl : Class ; rdfs : subClassOf ds : AtomicMethod . In the above example, NewMethod should be replaced with the desired method name. 4. Add a new sub-property of ds:hasMethod . ml : hasNewMethod rdf : type owl : ObjectProperty ; rdfs : subPropertyOf ds : hasMethod ; rdfs : domain ml : NewTask ; rdfs : range ml : NewMethod . In the above example, NewMethod and NewTask should be replaced with the desired method and task names respectively. 5. Add and link the desired input and output entities for the new task. ml : DataIn1NewTask rdf : type owl : Class ; rdfs : subClassOf ds : DataEntity . ... ml : DataOut1NewTask rdf : type owl : Class ; rdfs : subClassOf ds : DataEntity . ... ml : hasNewTaskInput rdf : type owl : ObjectProperty ; rdfs : subPropertyOf ds : hasInput ; rdfs : domain ml : NewTask ; rdfs : range ml : DataIn1NewTask , ... . ml : hasNewTaskOutput rdf : type owl : ObjectProperty ; rdfs : subPropertyOf ds : hasOutput ; rdfs : domain ml : NewTask ; rdfs : range ml : DataOut1NewTask , ... . In the above example, the occurences of number 1 in the input and output entity names should be replaced with the desired input and output names respectively. Also, NewTask should be replaced with the desired task name. 6. Add the desired data properties for the new method. ml : hasNewProperty1 rdf : type owl : DatatypeProperty ; rdfs : domain ml : NewMethod ; rdfs : range xsd : float . ml : hasNewProperty2 rdf : type owl : DatatypeProperty ; rdfs : domain ml : NewMethod ; rdfs : range xsd : string . In the above example, NewProperty1 and NewProperty2 should be replaced with the desired property names. Adding a relevant Python class \u00b6 To achieve this, a sub-class of exe_kg_lib.classes.task.Task should be added to an existing module of exe_kg_lib.classes.tasks package according to the conventions mentioned in the package's documentation .","title":"Adding a new ML-related task and method"},{"location":"adding-new-task-and-method/#adding-a-new-ml-related-task-and-method","text":"","title":"Adding a new ML-related task and method"},{"location":"adding-new-task-and-method/#adding-semantic-components-to-a-bottom-level-kg-schema","text":"When extending an existing bottom-level KG schema , naming conventions should be followed and can be inferred by the below example code snippets. The placeholders used are specified below each snippet. For the sake of example, the namespace prefix of the ML KG schema ( ml ) is used in the following code snippets. To add the required semantic components, the following steps should be followed: Open the .ttl file of the desired bottom-level KG schema, found in the relevant repo . Add a new sub-class of ds:AtomicTask . ml : NewTask rdf : type owl : Class ; rdfs : subClassOf ds : AtomicTask . In the above example, NewTask should be replaced with the desired task name. 3. Add a new sub-class of ds:AtomicMethod . ml : NewMethod rdf : type owl : Class ; rdfs : subClassOf ds : AtomicMethod . In the above example, NewMethod should be replaced with the desired method name. 4. Add a new sub-property of ds:hasMethod . ml : hasNewMethod rdf : type owl : ObjectProperty ; rdfs : subPropertyOf ds : hasMethod ; rdfs : domain ml : NewTask ; rdfs : range ml : NewMethod . In the above example, NewMethod and NewTask should be replaced with the desired method and task names respectively. 5. Add and link the desired input and output entities for the new task. ml : DataIn1NewTask rdf : type owl : Class ; rdfs : subClassOf ds : DataEntity . ... ml : DataOut1NewTask rdf : type owl : Class ; rdfs : subClassOf ds : DataEntity . ... ml : hasNewTaskInput rdf : type owl : ObjectProperty ; rdfs : subPropertyOf ds : hasInput ; rdfs : domain ml : NewTask ; rdfs : range ml : DataIn1NewTask , ... . ml : hasNewTaskOutput rdf : type owl : ObjectProperty ; rdfs : subPropertyOf ds : hasOutput ; rdfs : domain ml : NewTask ; rdfs : range ml : DataOut1NewTask , ... . In the above example, the occurences of number 1 in the input and output entity names should be replaced with the desired input and output names respectively. Also, NewTask should be replaced with the desired task name. 6. Add the desired data properties for the new method. ml : hasNewProperty1 rdf : type owl : DatatypeProperty ; rdfs : domain ml : NewMethod ; rdfs : range xsd : float . ml : hasNewProperty2 rdf : type owl : DatatypeProperty ; rdfs : domain ml : NewMethod ; rdfs : range xsd : string . In the above example, NewProperty1 and NewProperty2 should be replaced with the desired property names.","title":"Adding semantic components to a bottom-level KG schema"},{"location":"adding-new-task-and-method/#adding-a-relevant-python-class","text":"To achieve this, a sub-class of exe_kg_lib.classes.task.Task should be added to an existing module of exe_kg_lib.classes.tasks package according to the conventions mentioned in the package's documentation .","title":"Adding a relevant Python class"},{"location":"contributing/","text":"Contributing \u00b6 TL;DR: 10 Steps To Your First Pull Request \u00b6 Ok, this is a long document so let's TL;DR this. The following recipe quickly outlines ten steps to your first successful contribution in the form of a pull request. First, create an issue in our issue tracker and describe the contribution you intend to make. Before you start coding, create a fork and a local branch, on which you will make your changes. Make the changes in your local git repository and commit. When you'd like to share your code and/or start a pull request to get feedback, push your commits to the repository. Open the Branches view in GitHub. Your newly pushed branch should show up there. Usually, all repositories have an associated build job which will pick up your new branch and build it once you open a PR. If the build fails and you know how to fix it, please do. If you don't, go ahead and contact us via the pull request to allow us to help you make the build green. Enter a meaningful title, prefixed with the issue number and possibly a slightly longer version of your branch name. Here is an example: #1 - Add missing documentation Briefly describe the changes you are submitting in the Description field. The goal here is to make the life of the reviewers as easy as possible by explaining what you did and why. The description can be formatted as markdown, so feel free to format, add code examples, link to specific lines of code or even add sketches or diagrams. You can also @-mention anyone on GitHub to inform them of the PR (usually we do that by prefixing the @-mention with /CC or /FYI ). Every pull request will be reviewed and approved by at least one maintainer (see README.md ) before it is merged. Add at least one of the maintainers as reviewer. This is, in a nutshell, how you make contributions to this community. It may sound complicated at first, but you'll quickly internalize the steps and will be able to create a pull request in mere minutes or less. Please find a detailed description in the How to Contribute section. Whom to Contact in Case of Questions? \u00b6 Communication is usually done via Issues and PRs. If, for some reason, you prefer kicking off the collaboration in a personal conversation, please contact the maintainers of this repository, which are listed in this repository's README.md . How to Submit a Bug Report? \u00b6 Found a bug? Great! A core task in improving our product is to identify any flaws that may be present. The best place to report a bug is to create an issue in our issue tracker . How to Submit a Feature Request? \u00b6 If you have suggestions for us on how to improve our code or our documentation or have a new feature in mind, please by all means do let us know. The same rules apply as for bug reports: add a new issue outlining your suggestion in our issue tracker . How to Contribute? \u00b6 If you have fixed a bug or have developed that new feature you would like to make available to your fellow users, or even if you have fixed whitespace or formatting issues, we'd like to encourage you to contribute that to our codebase. In this repository, we use pull requests to facilitate all contributions. Every pull request will be peer-reviewed by at least one community member, which is a great way to get in touch with each other. Clean Code \u00b6 More important than writing code that adheres to our styleguide is writing Clean Code . We consider code to be clean , if it works, is easy to understand, is easy to modify and is easy to test. Any code contribution will be reviewed by us with respect to these criteria. We are more than happy and indeed consider it a core part of being BIOS to invest time mentoring junior developers to help them create cleaner code and to improve future contributions. In addition to these principles of clean code, we also try to design our architectures for participation . That, to us, means to avoid unnecessary complexity, tight coupling or complex dependency relationships. Testing Conventions \u00b6 We are convinced that writing testable code and writing tests is a precondition for any software to be maintainable. Even though we do not prescribe fixed coverage thresholds for our tests, we encourage (and often will require) you to write tests for code that needs to be maintainable where the effort is not excessive. This means, that we aim to write code with testability in mind (following the test first principle) write tests for everything we can test expose a submitted bug with a test first, before we implement a fix. We also aim to write our tests such that they can be read as a specification (because we usually don't spend time writing those). In practice, this means that we use long, verbose and expressive names for tests which convey the condition being tested. In our experience, writing tests can actually be a lot of fun. As a programmer, you have more leeway to experiment and try new programming approaches when writing tests. That is why we often try out new language features in our test code, first. And if you're following the test first principle, it's always quite rewarding to see those red test cases continue to turn green, once the implementation is complete. Finally, only adequate tests will empower you to continuously improve your codebase with refactoring, as this provides the reassurance that you didn't break anything accidentally. Writing Documentation \u00b6 We follow these principles when documenting code: We aim at keeping documentation as close the the asset being documented as possible. That is, where sensible, we use inline code documentation. We use Mermaid for specifying diagrams in the code in order to be tool agnostic and allow everybody to adapt and improve it. We favor Markdown or other text based means of generating documentation and try not to use proprietary tools, such as Word or PowerPoint for that. We aim at providing our users with easy to understand instructions on how to use our code in each repositories README.md . We favor code examples over analytical descriptions of our codebase. Pull Requests \u00b6 Pull requests are our main vehicle for submitting, reviewing and merging new code into our codebase. A pull request is more than just an easy interface to git: it is a powerful collaboration and communication tool. They are especially well suited to share knowledge and onboard new contributors. So if you are new to te community, submitting pull requests is an excellent way for you to engage with us and for us to help you get started. Discussions and the Q&A that often accompanies pull requests are archived and linkable and we thus use them to disseminate knowledge about our codebase. General Tips \u00b6 Keep your PRs as small as possible. The smaller the PR the higher the velocity of review and acceptance. Avoid conflating multiple issues in one PR. Aside from that usually leading to huge PRs and it making the job of a reviewer unnecessarily harder, it will also confuse the automated T&R issue state transition feature we use. Write a good description to allow the reviewer to quickly get an overview of your changes. Don't add more than two reviewers if you expect all of them to review. This will most likely block you. Other Contributions \u00b6 You don't have to be a coder to make a valuable contribution to this community! There are many contributions that you can make as a non-coder that will be very valuable to the community, such as giving feedback of any kind, reporting bugs, requesting features, adding new or improvements existing documentation, helping other users to use our software, asking and/or answering questions in our forums, promoting BIOS, Social Coding, our community and our software within Bosch or designing artwork for both our software, our wiki or our Bosch connect presence. May the source be with you!","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#tldr-10-steps-to-your-first-pull-request","text":"Ok, this is a long document so let's TL;DR this. The following recipe quickly outlines ten steps to your first successful contribution in the form of a pull request. First, create an issue in our issue tracker and describe the contribution you intend to make. Before you start coding, create a fork and a local branch, on which you will make your changes. Make the changes in your local git repository and commit. When you'd like to share your code and/or start a pull request to get feedback, push your commits to the repository. Open the Branches view in GitHub. Your newly pushed branch should show up there. Usually, all repositories have an associated build job which will pick up your new branch and build it once you open a PR. If the build fails and you know how to fix it, please do. If you don't, go ahead and contact us via the pull request to allow us to help you make the build green. Enter a meaningful title, prefixed with the issue number and possibly a slightly longer version of your branch name. Here is an example: #1 - Add missing documentation Briefly describe the changes you are submitting in the Description field. The goal here is to make the life of the reviewers as easy as possible by explaining what you did and why. The description can be formatted as markdown, so feel free to format, add code examples, link to specific lines of code or even add sketches or diagrams. You can also @-mention anyone on GitHub to inform them of the PR (usually we do that by prefixing the @-mention with /CC or /FYI ). Every pull request will be reviewed and approved by at least one maintainer (see README.md ) before it is merged. Add at least one of the maintainers as reviewer. This is, in a nutshell, how you make contributions to this community. It may sound complicated at first, but you'll quickly internalize the steps and will be able to create a pull request in mere minutes or less. Please find a detailed description in the How to Contribute section.","title":"TL;DR: 10 Steps To Your First Pull Request"},{"location":"contributing/#whom-to-contact-in-case-of-questions","text":"Communication is usually done via Issues and PRs. If, for some reason, you prefer kicking off the collaboration in a personal conversation, please contact the maintainers of this repository, which are listed in this repository's README.md .","title":"Whom to Contact in Case of Questions?"},{"location":"contributing/#how-to-submit-a-bug-report","text":"Found a bug? Great! A core task in improving our product is to identify any flaws that may be present. The best place to report a bug is to create an issue in our issue tracker .","title":"How to Submit a Bug Report?"},{"location":"contributing/#how-to-submit-a-feature-request","text":"If you have suggestions for us on how to improve our code or our documentation or have a new feature in mind, please by all means do let us know. The same rules apply as for bug reports: add a new issue outlining your suggestion in our issue tracker .","title":"How to Submit a Feature Request?"},{"location":"contributing/#how-to-contribute","text":"If you have fixed a bug or have developed that new feature you would like to make available to your fellow users, or even if you have fixed whitespace or formatting issues, we'd like to encourage you to contribute that to our codebase. In this repository, we use pull requests to facilitate all contributions. Every pull request will be peer-reviewed by at least one community member, which is a great way to get in touch with each other.","title":"How to Contribute?"},{"location":"contributing/#clean-code","text":"More important than writing code that adheres to our styleguide is writing Clean Code . We consider code to be clean , if it works, is easy to understand, is easy to modify and is easy to test. Any code contribution will be reviewed by us with respect to these criteria. We are more than happy and indeed consider it a core part of being BIOS to invest time mentoring junior developers to help them create cleaner code and to improve future contributions. In addition to these principles of clean code, we also try to design our architectures for participation . That, to us, means to avoid unnecessary complexity, tight coupling or complex dependency relationships.","title":"Clean Code"},{"location":"contributing/#testing-conventions","text":"We are convinced that writing testable code and writing tests is a precondition for any software to be maintainable. Even though we do not prescribe fixed coverage thresholds for our tests, we encourage (and often will require) you to write tests for code that needs to be maintainable where the effort is not excessive. This means, that we aim to write code with testability in mind (following the test first principle) write tests for everything we can test expose a submitted bug with a test first, before we implement a fix. We also aim to write our tests such that they can be read as a specification (because we usually don't spend time writing those). In practice, this means that we use long, verbose and expressive names for tests which convey the condition being tested. In our experience, writing tests can actually be a lot of fun. As a programmer, you have more leeway to experiment and try new programming approaches when writing tests. That is why we often try out new language features in our test code, first. And if you're following the test first principle, it's always quite rewarding to see those red test cases continue to turn green, once the implementation is complete. Finally, only adequate tests will empower you to continuously improve your codebase with refactoring, as this provides the reassurance that you didn't break anything accidentally.","title":"Testing Conventions"},{"location":"contributing/#writing-documentation","text":"We follow these principles when documenting code: We aim at keeping documentation as close the the asset being documented as possible. That is, where sensible, we use inline code documentation. We use Mermaid for specifying diagrams in the code in order to be tool agnostic and allow everybody to adapt and improve it. We favor Markdown or other text based means of generating documentation and try not to use proprietary tools, such as Word or PowerPoint for that. We aim at providing our users with easy to understand instructions on how to use our code in each repositories README.md . We favor code examples over analytical descriptions of our codebase.","title":"Writing Documentation"},{"location":"contributing/#pull-requests","text":"Pull requests are our main vehicle for submitting, reviewing and merging new code into our codebase. A pull request is more than just an easy interface to git: it is a powerful collaboration and communication tool. They are especially well suited to share knowledge and onboard new contributors. So if you are new to te community, submitting pull requests is an excellent way for you to engage with us and for us to help you get started. Discussions and the Q&A that often accompanies pull requests are archived and linkable and we thus use them to disseminate knowledge about our codebase.","title":"Pull Requests"},{"location":"contributing/#general-tips","text":"Keep your PRs as small as possible. The smaller the PR the higher the velocity of review and acceptance. Avoid conflating multiple issues in one PR. Aside from that usually leading to huge PRs and it making the job of a reviewer unnecessarily harder, it will also confuse the automated T&R issue state transition feature we use. Write a good description to allow the reviewer to quickly get an overview of your changes. Don't add more than two reviewers if you expect all of them to review. This will most likely block you.","title":"General Tips"},{"location":"contributing/#other-contributions","text":"You don't have to be a coder to make a valuable contribution to this community! There are many contributions that you can make as a non-coder that will be very valuable to the community, such as giving feedback of any kind, reporting bugs, requesting features, adding new or improvements existing documentation, helping other users to use our software, asking and/or answering questions in our forums, promoting BIOS, Social Coding, our community and our software within Bosch or designing artwork for both our software, our wiki or our Bosch connect presence. May the source be with you!","title":"Other Contributions"},{"location":"extending/","text":"The library can be extended by adding a new task and method to support new ML-related operations . To perform this type of library extension, there are 3 required steps: Selection of a relevant bottom-level KG schema (Statistics, ML, or Visualization) according to the type of the new task and method. Addition of new semantic components (entities, properties, etc) to the selected KG schema. Addition of a Python class to the corresponding module of exe_kg_lib.classes.tasks package. For steps 2 and 3, refer to the relevant page of the library's website.","title":"Extending"},{"location":"external-resources/","text":"Top-level KG schemas \u00b6 Data Science KG schema Bottom-level KG schemas \u00b6 Visualization KG schema Statistics KG schema Machine Learning KG schema The above KG schemas are included in the ExeKGOntology repository . Breast Cancer Wisconsin (Diagnostic) Data Set \u00b6 Kaggle dataset page Creators : Dr. William H. Wolberg, W. Nick Street, and Olvi L. Mangasarian. Copyright : This dataset is copyright of the above creators and licensed under CC BY-NC-SA 4.0 License. Changes : The dataset file examples/data/breast_cancer_data.csv has the following changes compared to the original one. The name of the file has been changed. In the column names, the spaces have been replaced with _ . A new column has been added ( diagnosis_binary ) containing 1 for the rows that the diagnosis column has M , and 0 for the rest.","title":"External resources"},{"location":"external-resources/#top-level-kg-schemas","text":"Data Science KG schema","title":"Top-level KG schemas"},{"location":"external-resources/#bottom-level-kg-schemas","text":"Visualization KG schema Statistics KG schema Machine Learning KG schema The above KG schemas are included in the ExeKGOntology repository .","title":"Bottom-level KG schemas"},{"location":"external-resources/#breast-cancer-wisconsin-diagnostic-data-set","text":"Kaggle dataset page Creators : Dr. William H. Wolberg, W. Nick Street, and Olvi L. Mangasarian. Copyright : This dataset is copyright of the above creators and licensed under CC BY-NC-SA 4.0 License. Changes : The dataset file examples/data/breast_cancer_data.csv has the following changes compared to the original one. The name of the file has been changed. In the column names, the spaces have been replaced with _ . A new column has been added ( diagnosis_binary ) containing 1 for the rows that the diagnosis column has M , and 0 for the rest.","title":"Breast Cancer Wisconsin (Diagnostic) Data Set"},{"location":"getting-started/","text":"The library is available as a PyPi package . To download, run pip install exe-kg-lib .","title":"Getting Started"},{"location":"installation/","text":"Installation \u00b6 Step 0: poetry \u00b6 This project is managed by poetry , a Python packaging and dependency management tool. This means, however, that poetry needs to be installed before you can install this project. To be honest, the official poetry installation docs are great and provide different ways to install poetry on different platforms and under different conditions. However, as some people are lazy, below you can find a few ways to install poetry . As mentioned above: If your required / desired way of installation is not listed, go to the official installation docs before ranting! Linux conda (not recommended) Run curl -sSL https://install.python-poetry.org | python3 - and follow the instructions. Finally, consider adding poetry 's installation path to your environment PATH (or similar), e.g. via export PATH = $PATH : $HOME /.local/bin for poetry 's default installation path. If you really need to go through conda (I know in some cases that's the only option), try this: conda activate some-environment conda install pip pip install pipx pipx install poetry conda deactivate Step 1: Dependency Installation \u00b6 The installation of the project's dependencies should be piece of in most cases by running poetry install from within the project directory. No project development intended? If you don't need any development setup, you can pass the --no-dev flag to skip the development dependencies. Computer says no\u2026 In some cases, this does not work right away. Please find a collection of failure cases below (thanks for the feedback! ) What? Hint \"I get a ConnectionError \" Maybe you have proxy issues. \"I destroyed my poetry environment\" Delete the .venv folder and create a new env. Step 2: Pre-commit Git Hooks Installation \u00b6 To ensure compatibility of each future commit with the project's conventions (e.g. code format), some predefined git hooks should be installed by running the following commands. poetry shell # use the created poetry environment pre-commit install","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#step-0-poetry","text":"This project is managed by poetry , a Python packaging and dependency management tool. This means, however, that poetry needs to be installed before you can install this project. To be honest, the official poetry installation docs are great and provide different ways to install poetry on different platforms and under different conditions. However, as some people are lazy, below you can find a few ways to install poetry . As mentioned above: If your required / desired way of installation is not listed, go to the official installation docs before ranting! Linux conda (not recommended) Run curl -sSL https://install.python-poetry.org | python3 - and follow the instructions. Finally, consider adding poetry 's installation path to your environment PATH (or similar), e.g. via export PATH = $PATH : $HOME /.local/bin for poetry 's default installation path. If you really need to go through conda (I know in some cases that's the only option), try this: conda activate some-environment conda install pip pip install pipx pipx install poetry conda deactivate","title":"Step 0: poetry"},{"location":"installation/#step-1-dependency-installation","text":"The installation of the project's dependencies should be piece of in most cases by running poetry install from within the project directory. No project development intended? If you don't need any development setup, you can pass the --no-dev flag to skip the development dependencies. Computer says no\u2026 In some cases, this does not work right away. Please find a collection of failure cases below (thanks for the feedback! ) What? Hint \"I get a ConnectionError \" Maybe you have proxy issues. \"I destroyed my poetry environment\" Delete the .venv folder and create a new env.","title":"Step 1: Dependency Installation"},{"location":"installation/#step-2-pre-commit-git-hooks-installation","text":"To ensure compatibility of each future commit with the project's conventions (e.g. code format), some predefined git hooks should be installed by running the following commands. poetry shell # use the created poetry environment pre-commit install","title":"Step 2: Pre-commit Git Hooks Installation"},{"location":"license/","text":"GNU AFFERO GENERAL PUBLIC LICENSE \u00b6 Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble \u00b6 The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software. A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public. The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version. An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS \u00b6 0. Definitions. \u00b6 \"This License\" refers to version 3 of the GNU Affero General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. 1. Source Code. \u00b6 The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. 2. Basic Permissions. \u00b6 All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. 3. Protecting Users' Legal Rights From Anti-Circumvention Law. \u00b6 No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. 4. Conveying Verbatim Copies. \u00b6 You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. 5. Conveying Modified Source Versions. \u00b6 You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. 6. Conveying Non-Source Forms. \u00b6 You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. 7. Additional Terms. \u00b6 \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. 8. Termination. \u00b6 You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. 9. Acceptance Not Required for Having Copies. \u00b6 You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. 10. Automatic Licensing of Downstream Recipients. \u00b6 Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. 11. Patents. \u00b6 A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. 12. No Surrender of Others' Freedom. \u00b6 If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. 13. Remote Network Interaction; Use with the GNU General Public License. \u00b6 Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License. 14. Revised Versions of this License. \u00b6 The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. 15. Disclaimer of Warranty. \u00b6 THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. Limitation of Liability. \u00b6 IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. 17. Interpretation of Sections 15 and 16. \u00b6 If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs \u00b6 If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements. You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/ .","title":"ExeKGLib"},{"location":"license/#gnu-affero-general-public-license","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.","title":"GNU AFFERO GENERAL PUBLIC LICENSE"},{"location":"license/#preamble","text":"The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software. A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public. The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version. An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license. The precise terms and conditions for copying, distribution and modification follow.","title":"Preamble"},{"location":"license/#terms-and-conditions","text":"","title":"TERMS AND CONDITIONS"},{"location":"license/#0-definitions","text":"\"This License\" refers to version 3 of the GNU Affero General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.","title":"0. Definitions."},{"location":"license/#1-source-code","text":"The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work.","title":"1. Source Code."},{"location":"license/#2-basic-permissions","text":"All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.","title":"2. Basic Permissions."},{"location":"license/#3-protecting-users-legal-rights-from-anti-circumvention-law","text":"No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law."},{"location":"license/#4-conveying-verbatim-copies","text":"You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.","title":"4. Conveying Verbatim Copies."},{"location":"license/#5-conveying-modified-source-versions","text":"You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.","title":"5. Conveying Modified Source Versions."},{"location":"license/#6-conveying-non-source-forms","text":"You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.","title":"6. Conveying Non-Source Forms."},{"location":"license/#7-additional-terms","text":"\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.","title":"7. Additional Terms."},{"location":"license/#8-termination","text":"You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.","title":"8. Termination."},{"location":"license/#9-acceptance-not-required-for-having-copies","text":"You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.","title":"9. Acceptance Not Required for Having Copies."},{"location":"license/#10-automatic-licensing-of-downstream-recipients","text":"Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.","title":"10. Automatic Licensing of Downstream Recipients."},{"location":"license/#11-patents","text":"A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.","title":"11. Patents."},{"location":"license/#12-no-surrender-of-others-freedom","text":"If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.","title":"12. No Surrender of Others' Freedom."},{"location":"license/#13-remote-network-interaction-use-with-the-gnu-general-public-license","text":"Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.","title":"13. Remote Network Interaction; Use with the GNU General Public License."},{"location":"license/#14-revised-versions-of-this-license","text":"The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.","title":"14. Revised Versions of this License."},{"location":"license/#15-disclaimer-of-warranty","text":"THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.","title":"15. Disclaimer of Warranty."},{"location":"license/#16-limitation-of-liability","text":"IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.","title":"16. Limitation of Liability."},{"location":"license/#17-interpretation-of-sections-15-and-16","text":"If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS","title":"17. Interpretation of Sections 15 and 16."},{"location":"license/#how-to-apply-these-terms-to-your-new-programs","text":"If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details. You should have received a copy of the GNU Affero General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements. You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/ .","title":"How to Apply These Terms to Your New Programs"},{"location":"tasks-package-documentation/","text":"Overview \u00b6 This package contains classes that correspond to entities of type owl:class that are rdfs:subClassOf AtomicTask in the KG. They implement the abstract run_method() like so: The input is taken either from outputs of previously executed Tasks (parameter: other_task_output_dict ) or a dataframe (parameter: input_data ). An algorithm is executed using the input. There are two conventions: - The algorithm is related to ML, Statistics or Visualization, depending on the Python file's prefix. - The algorithm's implementation is placed in utils.task_utils package in the Python file with the corresponding prefix. 3. The output is returned as a dictionary with pairs of output name and value. Naming conventions \u00b6 Each class name is a concatenation of 2 strings: The name of an owl:class that is rdfs:subClassOf AtomicTask . The name of an owl:class that is rdfs:subClassOf AtomicMethod and is associated with the above owl:class via a property that is rdfs:subPropertyOf hasMethod . For example, the below KG property associates CanvasMethod with CanvasTask . So, the corresponding class name will be CanvasTaskCanvasMethod . visu : hasCanvasMethod a owl : ObjectProperty ; rdfs : domain visu : CanvasTask ; rdfs : range visu : CanvasMethod ; rdfs : subPropertyOf ds : hasMethod . The class fields that contain _ are the snake-case conversions of the equivalent camel-case property names in the KG. e.g. has_split_ratio field corresponds to hasSplitRatio property in the KG. The above conventions are necessary for automatically mapping KG tasks with methods and properties to Python objects while parsing the KG.","title":"Documentation of exe_kg_lib.classes.tasks package"},{"location":"tasks-package-documentation/#overview","text":"This package contains classes that correspond to entities of type owl:class that are rdfs:subClassOf AtomicTask in the KG. They implement the abstract run_method() like so: The input is taken either from outputs of previously executed Tasks (parameter: other_task_output_dict ) or a dataframe (parameter: input_data ). An algorithm is executed using the input. There are two conventions: - The algorithm is related to ML, Statistics or Visualization, depending on the Python file's prefix. - The algorithm's implementation is placed in utils.task_utils package in the Python file with the corresponding prefix. 3. The output is returned as a dictionary with pairs of output name and value.","title":"Overview"},{"location":"tasks-package-documentation/#naming-conventions","text":"Each class name is a concatenation of 2 strings: The name of an owl:class that is rdfs:subClassOf AtomicTask . The name of an owl:class that is rdfs:subClassOf AtomicMethod and is associated with the above owl:class via a property that is rdfs:subPropertyOf hasMethod . For example, the below KG property associates CanvasMethod with CanvasTask . So, the corresponding class name will be CanvasTaskCanvasMethod . visu : hasCanvasMethod a owl : ObjectProperty ; rdfs : domain visu : CanvasTask ; rdfs : range visu : CanvasMethod ; rdfs : subPropertyOf ds : hasMethod . The class fields that contain _ are the snake-case conversions of the equivalent camel-case property names in the KG. e.g. has_split_ratio field corresponds to hasSplitRatio property in the KG. The above conventions are necessary for automatically mapping KG tasks with methods and properties to Python objects while parsing the KG.","title":"Naming conventions"},{"location":"third-party-licenses/","text":"Name Version License Author URL Description Babel 2.11.0 BSD License Armin Ronacher https://babel.pocoo.org/ Internationalization utilities GitPython 3.1.30 BSD License Sebastian Thiel, Michael Trier https://github.com/gitpython-developers/GitPython GitPython is a python library used to interact with Git repositories Jinja2 3.1.2 BSD License Armin Ronacher https://palletsprojects.com/p/jinja/ A very fast and expressive template engine. Markdown 3.3.7 BSD License Manfred Stienstra, Yuri takhteyev and Waylan limberg https://Python-Markdown.github.io/ Python implementation of Markdown. MarkupSafe 2.1.1 BSD License Armin Ronacher https://palletsprojects.com/p/markupsafe/ Safely add untrusted strings to HTML/XML markup. Pillow 9.4.0 Historical Permission Notice and Disclaimer (HPND) Alex Clark (PIL Fork Author) https://python-pillow.org Python Imaging Library (Fork) PyYAML 6.0 MIT License Kirill Simonov https://pyyaml.org/ YAML parser and emitter for Python Pygments 2.14.0 BSD License Georg Brandl https://pygments.org/ Pygments is a syntax highlighting package written in Python. aiohttp 3.8.3 Apache Software License UNKNOWN https://github.com/aio-libs/aiohttp Async http client/server framework (asyncio) aiosignal 1.3.1 Apache Software License UNKNOWN https://github.com/aio-libs/aiosignal aiosignal: a list of registered asynchronous callbacks astroid 2.12.13 GNU Lesser General Public License v2 (LGPLv2) UNKNOWN UNKNOWN An abstract syntax tree for Python with inference support. async-timeout 4.0.2 Apache Software License Andrew Svetlov andrew.svetlov@gmail.com https://github.com/aio-libs/async-timeout Timeout context manager for asyncio programs attrs 22.2.0 MIT License Hynek Schlawack https://www.attrs.org/ Classes Without Boilerplate bandit 1.7.4 Apache Software License PyCQA https://bandit.readthedocs.io/ Security oriented static analyser for python code. black 22.12.0 MIT License UNKNOWN UNKNOWN The uncompromising code formatter. certifi 2022.12.7 Mozilla Public License 2.0 (MPL 2.0) Kenneth Reitz https://github.com/certifi/python-certifi Python package for providing Mozilla's CA Bundle. cfgv 3.3.1 MIT License Anthony Sottile https://github.com/asottile/cfgv Validate configuration and produce human readable error messages. charset-normalizer 2.1.1 MIT License Ahmed TAHRI @Ousret https://github.com/ousret/charset_normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. click 8.1.3 BSD License Armin Ronacher https://palletsprojects.com/p/click/ Composable command line interface toolkit colorama 0.4.6 BSD License UNKNOWN UNKNOWN Cross-platform colored terminal text. contourpy 1.0.6 BSD License Ian Thomas https://github.com/contourpy/contourpy Python library for calculating contours of 2D quadrilateral grids coverage 7.0.3 Apache Software License Ned Batchelder and 165 others https://github.com/nedbat/coveragepy Code coverage measurement for Python csscompressor 0.9.5 BSD License Yury Selivanov http://github.com/sprymix/csscompressor A python port of YUI CSS Compressor cycler 0.11.0 BSD License Thomas A Caswell https://github.com/matplotlib/cycler Composable style cycles defusedxml 0.7.1 Python Software Foundation License Christian Heimes https://github.com/tiran/defusedxml XML bomb protection for Python stdlib modules dill 0.3.6 BSD License Mike McKerns https://github.com/uqfoundation/dill serialize all of python distlib 0.3.6 Python Software Foundation License Vinay Sajip https://github.com/pypa/distlib Distribution utilities dunamai 1.15.0 MIT License Matthew T. Kennerly https://github.com/mtkennerly/dunamai Dynamic version generation exceptiongroup 1.1.0 MIT License UNKNOWN UNKNOWN Backport of PEP 654 (exception groups) exe-kg-lib 1.0.4 GNU Affero General Public License v3 Antonis Klironomos https://boschresearch.github.io/ExeKGLib Library for executable ML pipelines represented by KGs. execnet 1.9.0 MIT License holger krekel and others https://execnet.readthedocs.io/en/latest/ execnet: rapid multi-Python deployment filelock 3.9.0 The Unlicense (Unlicense) UNKNOWN UNKNOWN A platform independent file lock. fonttools 4.38.0 MIT License Just van Rossum http://github.com/fonttools/fonttools Tools to manipulate font files frozenlist 1.3.3 Apache Software License UNKNOWN https://github.com/aio-libs/frozenlist A list-like structure which implements collections.abc.MutableSequence genbadge 1.1.0 BSD License Sylvain MARIE sylvain.marie@se.com https://github.com/smarie/python-genbadge Generate badges for tools that do not provide one. ghp-import 2.1.0 Apache Software License Paul Joseph Davis https://github.com/c-w/ghp-import Copy your docs directly to the gh-pages branch. git-changelog 0.6.0 ISC UNKNOWN UNKNOWN Automatic Changelog generator using Jinja2 templates. gitdb 4.0.10 BSD License Sebastian Thiel https://github.com/gitpython-developers/gitdb Git Object Database griffe 0.25.3 ISC UNKNOWN UNKNOWN Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. htmlmin 0.1.12 BSD License Dave Mankoff https://htmlmin.readthedocs.io/en/latest/ An HTML Minifier identify 2.5.12 MIT License Chris Kuehl https://github.com/pre-commit/identify File identification library for Python idna 3.4 BSD License UNKNOWN UNKNOWN Internationalized Domain Names in Applications (IDNA) iniconfig 1.1.1 MIT License Ronny Pfannschmidt, Holger Krekel http://github.com/RonnyPfannschmidt/iniconfig iniconfig: brain-dead simple config-ini parsing isodate 0.6.1 BSD License Gerhard Weis https://github.com/gweis/isodate/ An ISO 8601 date/time/duration parser and formatter isort 5.11.4 MIT License Timothy Crosley https://pycqa.github.io/isort/ A Python utility / library to sort Python imports. joblib 1.2.0 BSD License Gael Varoquaux https://joblib.readthedocs.io Lightweight pipelining with Python functions jsmin 3.0.1 MIT License Dave St.Germain https://github.com/tikitu/jsmin/ JavaScript minifier. kiwisolver 1.4.4 BSD License UNKNOWN UNKNOWN A fast implementation of the Cassowary constraint solver lazy-object-proxy 1.9.0 BSD License Ionel Cristian M\u0103rie\u0219 https://github.com/ionelmc/python-lazy-object-proxy A fast and thorough lazy object proxy. matplotlib 3.6.2 Python Software Foundation License John D. Hunter, Michael Droettboom https://matplotlib.org Python plotting package mccabe 0.7.0 MIT License Tarek Ziade https://github.com/pycqa/mccabe McCabe checker, plugin for flake8 mergedeep 1.3.4 MIT License Travis Clarke https://github.com/clarketm/mergedeep A deep merge function for \ud83d\udc0d. mike 1.1.2 BSD License Jim Porter https://github.com/jimporter/mike Manage multiple versions of your MkDocs-powered documentation mkdocs 1.4.2 BSD License UNKNOWN UNKNOWN Project documentation with Markdown. mkdocs-autorefs 0.4.1 ISC License (ISCL) UNKNOWN UNKNOWN Automatically link across pages in MkDocs. mkdocs-gen-files 0.4.0 MIT License Oleh Prypin https://github.com/oprypin/mkdocs-gen-files MkDocs plugin to programmatically generate documentation pages during the build mkdocs-git-revision-date-localized-plugin 1.1.0 MIT License Tim Vink https://github.com/timvink/mkdocs-git-revision-date-localized-plugin Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. mkdocs-literate-nav 0.5.0 MIT License Oleh Prypin https://github.com/oprypin/mkdocs-literate-nav MkDocs plugin to specify the navigation in Markdown instead of YAML mkdocs-material 8.5.11 MIT License UNKNOWN UNKNOWN Documentation that simply works mkdocs-material-extensions 1.1.1 MIT License UNKNOWN UNKNOWN Extension pack for Python Markdown and MkDocs Material. mkdocs-minify-plugin 0.6.2 MIT License Byrne Reese, Lars Wilhelmer https://github.com/byrnereese/mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk mkdocstrings 0.19.1 ISC UNKNOWN UNKNOWN Automatic documentation from sources, for MkDocs. mkdocstrings-python 0.8.3 ISC UNKNOWN UNKNOWN A Python handler for mkdocstrings. multidict 6.0.4 Apache Software License Andrew Svetlov https://github.com/aio-libs/multidict multidict implementation mypy 0.991 MIT License Jukka Lehtosalo http://www.mypy-lang.org/ Optional static typing for Python mypy-extensions 0.4.3 MIT License The mypy developers https://github.com/python/mypy_extensions Experimental type system extensions for programs checked with the mypy typechecker. nodeenv 1.7.0 BSD License Eugene Kalinin https://github.com/ekalinin/nodeenv Node.js virtual environment builder numpy 1.24.1 BSD License Travis E. Oliphant et al. https://www.numpy.org Fundamental package for array computing in Python packaging 22.0 Apache Software License; BSD License UNKNOWN UNKNOWN Core utilities for Python packages pandas 1.5.2 BSD License The Pandas Development Team https://pandas.pydata.org Powerful data structures for data analysis, time series, and statistics pastel 0.2.1 MIT License S\u00e9bastien Eustace https://github.com/sdispater/pastel Bring colors to your terminal. pathspec 0.10.3 Mozilla Public License 2.0 (MPL 2.0) Caleb P. Burns https://github.com/cpburnz/python-pathspec Utility library for gitignore style pattern matching of file paths. pbr 5.11.0 Apache Software License OpenStack https://docs.openstack.org/pbr/latest/ Python Build Reasonableness platformdirs 2.6.2 MIT License UNKNOWN UNKNOWN A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". pluggy 1.0.0 MIT License Holger Krekel https://github.com/pytest-dev/pluggy plugin and hook calling mechanisms for python poethepoet 0.16.5 MIT License Nat Noordanus https://github.com/nat-n/poethepoet A task runner that works well with poetry. pre-commit 2.21.0 MIT License Anthony Sottile https://github.com/pre-commit/pre-commit A framework for managing and maintaining multi-language pre-commit hooks. py 1.11.0 MIT License holger krekel, Ronny Pfannschmidt, Benjamin Peterson and others https://py.readthedocs.io/ library with cross-python path, ini-parsing, io, code, log facilities pydocstyle 6.2.2 MIT License Amir Rachum https://www.pydocstyle.org/en/stable/ Python docstring style checker pyflakes 3.0.1 MIT License A lot of people https://github.com/PyCQA/pyflakes passive checker of Python programs pylint 2.15.9 GNU General Public License v2 (GPLv2) UNKNOWN UNKNOWN python code static checker pymdown-extensions 9.9 MIT License UNKNOWN UNKNOWN Extension pack for Python Markdown. pyparsing 3.0.9 MIT License UNKNOWN UNKNOWN pyparsing module - Classes and methods to define and execute parsing grammars pytest 7.2.0 MIT License Holger Krekel, Bruno Oliveira, Ronny Pfannschmidt, Floris Bruynooghe, Brianna Laugher, Florian Bruhin and others https://docs.pytest.org/en/latest/ pytest: simple powerful testing with Python pytest-cov 4.0.0 MIT License Marc Schlaich https://github.com/pytest-dev/pytest-cov Pytest plugin for measuring coverage. pytest-html 3.2.0 Mozilla Public License 2.0 (MPL 2.0) Dave Hunt https://github.com/pytest-dev/pytest-html pytest plugin for generating HTML reports pytest-metadata 2.0.4 MPL-2.0 Dave Hunt https://github.com/pytest-dev/pytest-metadata pytest plugin for test session metadata pytest-xdist 3.1.0 MIT License holger krekel and contributors https://github.com/pytest-dev/pytest-xdist pytest xdist plugin for distributed testing, most importantly across multiple CPUs python-dateutil 2.8.2 Apache Software License; BSD License Gustavo Niemeyer https://github.com/dateutil/dateutil Extensions to the standard Python datetime module pytz 2022.7 MIT License Stuart Bishop http://pythonhosted.org/pytz World timezone definitions, modern and historical pyupgrade 3.3.1 MIT License Anthony Sottile https://github.com/asottile/pyupgrade A tool to automatically upgrade syntax for newer versions. pyyaml_env_tag 0.1 MIT License Waylan Limberg https://github.com/waylan/pyyaml-env-tag A custom YAML tag for referencing environment variables in YAML files. rdflib 6.2.0 BSD License Daniel 'eikeon' Krech https://github.com/RDFLib/rdflib RDFLib is a Python library for working with RDF, a simple yet powerful language for representing information. requests 2.28.1 Apache Software License Kenneth Reitz https://requests.readthedocs.io Python HTTP for Humans. scikit-learn 1.2.0 BSD License UNKNOWN http://scikit-learn.org A set of python modules for machine learning and data mining scipy 1.9.3 BSD License UNKNOWN https://scipy.org/ Fundamental algorithms for scientific computing in Python semver 2.13.0 BSD License Kostiantyn Rybnikov https://github.com/python-semver/python-semver Python helper for Semantic Versioning (http://semver.org/) setuptools-scm 7.1.0 MIT License Ronny Pfannschmidt https://github.com/pypa/setuptools_scm/ the blessed package to manage your versions by scm tags six 1.16.0 MIT License Benjamin Peterson https://github.com/benjaminp/six Python 2 and 3 compatibility utilities smmap 5.0.0 BSD License Sebastian Thiel https://github.com/gitpython-developers/smmap A pure Python implementation of a sliding window memory map manager snowballstemmer 2.2.0 BSD License Snowball Developers https://github.com/snowballstem/snowball This package provides 29 stemmers for 28 languages generated from Snowball algorithms. stevedore 4.1.1 Apache Software License OpenStack https://docs.openstack.org/stevedore/latest/ Manage dynamic plugins for Python applications threadpoolctl 3.1.0 BSD License Thomas Moreau https://github.com/joblib/threadpoolctl threadpoolctl tokenize-rt 5.0.0 MIT License Anthony Sottile https://github.com/asottile/tokenize-rt A wrapper around the stdlib tokenize which roundtrips. tomli 2.0.1 MIT License UNKNOWN UNKNOWN A lil' TOML parser tomlkit 0.11.6 MIT License S\u00e9bastien Eustace https://github.com/sdispater/tomlkit Style preserving TOML library typer 0.7.0 MIT License Sebasti\u00e1n Ram\u00edrez https://github.com/tiangolo/typer Typer, build great CLIs. Easy to code. Based on Python type hints. typing_extensions 4.4.0 Python Software Foundation License UNKNOWN UNKNOWN Backported and Experimental Type Hints for Python 3.7+ urllib3 1.26.13 MIT License Andrey Petrov https://urllib3.readthedocs.io/ HTTP library with thread-safe connection pooling, file post, and more. verspec 0.1.0 Apache Software License; BSD License Jim Porter https://github.com/jimporter/verspec Flexible version handling virtualenv 20.17.1 MIT License Bernat Gabor https://virtualenv.pypa.io/ Virtual Python Environment builder watchdog 2.2.1 Apache Software License Yesudeep Mangalapilly https://github.com/gorakhargosh/watchdog Filesystem events monitoring wrapt 1.14.1 BSD License Graham Dumpleton https://github.com/GrahamDumpleton/wrapt Module for decorators, wrappers and monkey patching. yarl 1.8.2 Apache Software License Andrew Svetlov https://github.com/aio-libs/yarl/ Yet another URL library","title":"Third-Party Libraries"},{"location":"usage/","text":"Creating an executable KG \u00b6 Via CLI \u00b6 Run python kg_construction.py . Follow the input prompts. Via code \u00b6 See the provided examples . Executing a generated KG \u00b6 Run python kg_execution.py [kg_file_path] .","title":"Usage"},{"location":"usage/#creating-an-executable-kg","text":"","title":"Creating an executable KG"},{"location":"usage/#via-cli","text":"Run python kg_construction.py . Follow the input prompts.","title":"Via CLI"},{"location":"usage/#via-code","text":"See the provided examples .","title":"Via code"},{"location":"usage/#executing-a-generated-kg","text":"Run python kg_execution.py [kg_file_path] .","title":"Executing a generated KG"},{"location":"reference/","text":"Code Reference \u00b6 The structure of this reference (see navigation tree on the left) mimics the structure of the project's code base.","title":"exe_kg_lib"},{"location":"reference/#code-reference","text":"The structure of this reference (see navigation tree on the left) mimics the structure of the project's code base.","title":"Code Reference"},{"location":"reference/code-nav/","text":"exe_kg_lib classes data_entity entity exe_kg kg_schema task tasks ml_tasks statistic_tasks visual_tasks cli main examples simple_ml_kg simple_stats_kg simple_visu_kg kg_construction kg_execution utils cli_utils kg_creation_utils query_utils string_utils task_utils ml_utils statistic_utils visual_utils","title":"Code nav"},{"location":"reference/kg_construction/","text":"","title":"kg_construction"},{"location":"reference/kg_execution/","text":"","title":"kg_execution"},{"location":"reference/classes/data_entity/","text":"DataEntity \u00b6 Bases: Entity Abstraction of owl:class DataEntity. \u2757 Important for contributors \u2757 The fields that contain \"_\" are by convention the snake-case conversions of the equivalent camel-case property names in the KG. e.g. has_source field corresponds to hasSource property in the KG. This is necessary for automatically mapping KG properties to Python object fields while parsing the KG. Source code in exe_kg_lib\\classes\\data_entity.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class DataEntity ( Entity ): \"\"\" Abstraction of owl:class DataEntity. \u2757 Important for contributors \u2757 The fields that contain \"_\" are by convention the snake-case conversions of the equivalent camel-case property names in the KG. e.g. has_source field corresponds to hasSource property in the KG. This is necessary for automatically mapping KG properties to Python object fields while parsing the KG. \"\"\" def __init__ ( self , iri : str , parent_entity : Entity , has_source_value : str = None , has_data_semantics_iri : str = None , has_data_structure_iri : str = None , has_reference : str = None , ): super () . __init__ ( iri , parent_entity ) self . has_source = has_source_value # used as column name to retrieve data from the pipeline's input file self . has_data_semantics = has_data_semantics_iri # IRI of KG entity of type DataSemantics self . has_data_structure = has_data_structure_iri # IRI of KG entity of type DataStructure self . has_reference = has_reference # reference to another data entity in the KG, expecting an IRI","title":"data_entity"},{"location":"reference/classes/data_entity/#exe_kg_lib.classes.data_entity.DataEntity","text":"Bases: Entity Abstraction of owl:class DataEntity. \u2757 Important for contributors \u2757 The fields that contain \"_\" are by convention the snake-case conversions of the equivalent camel-case property names in the KG. e.g. has_source field corresponds to hasSource property in the KG. This is necessary for automatically mapping KG properties to Python object fields while parsing the KG. Source code in exe_kg_lib\\classes\\data_entity.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class DataEntity ( Entity ): \"\"\" Abstraction of owl:class DataEntity. \u2757 Important for contributors \u2757 The fields that contain \"_\" are by convention the snake-case conversions of the equivalent camel-case property names in the KG. e.g. has_source field corresponds to hasSource property in the KG. This is necessary for automatically mapping KG properties to Python object fields while parsing the KG. \"\"\" def __init__ ( self , iri : str , parent_entity : Entity , has_source_value : str = None , has_data_semantics_iri : str = None , has_data_structure_iri : str = None , has_reference : str = None , ): super () . __init__ ( iri , parent_entity ) self . has_source = has_source_value # used as column name to retrieve data from the pipeline's input file self . has_data_semantics = has_data_semantics_iri # IRI of KG entity of type DataSemantics self . has_data_structure = has_data_structure_iri # IRI of KG entity of type DataStructure self . has_reference = has_reference # reference to another data entity in the KG, expecting an IRI","title":"DataEntity"},{"location":"reference/classes/entity/","text":"Entity \u00b6 Abstraction of a KG entity with basic RDF properties plus its parent_entity (connected in KG with rdf:type). Source code in exe_kg_lib\\classes\\entity.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Entity : \"\"\" Abstraction of a KG entity with basic RDF properties plus its parent_entity (connected in KG with rdf:type). \"\"\" def __init__ ( self , iri : str , parent_entity : Entity = None ): self . iri = URIRef ( iri ) self . parent_entity = parent_entity self . namespace = self . get_namespace ( iri ) self . name = self . type = self . get_descriptor ( iri ) if parent_entity : self . type = parent_entity . name @staticmethod def get_namespace ( iri : str ) -> str : return iri . split ( \"#\" )[ 0 ] @staticmethod def get_descriptor ( iri : str ) -> str : return iri . split ( \"#\" )[ 1 ]","title":"entity"},{"location":"reference/classes/entity/#exe_kg_lib.classes.entity.Entity","text":"Abstraction of a KG entity with basic RDF properties plus its parent_entity (connected in KG with rdf:type). Source code in exe_kg_lib\\classes\\entity.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Entity : \"\"\" Abstraction of a KG entity with basic RDF properties plus its parent_entity (connected in KG with rdf:type). \"\"\" def __init__ ( self , iri : str , parent_entity : Entity = None ): self . iri = URIRef ( iri ) self . parent_entity = parent_entity self . namespace = self . get_namespace ( iri ) self . name = self . type = self . get_descriptor ( iri ) if parent_entity : self . type = parent_entity . name @staticmethod def get_namespace ( iri : str ) -> str : return iri . split ( \"#\" )[ 0 ] @staticmethod def get_descriptor ( iri : str ) -> str : return iri . split ( \"#\" )[ 1 ]","title":"Entity"},{"location":"reference/classes/exe_kg/","text":"ExeKG \u00b6 Source code in exe_kg_lib\\classes\\exe_kg.pyclass ExeKG : def __init__ ( self , kg_schema_name : str = None , input_exe_kg_path : str = None ): \"\"\" Args: kg_schema_name: name of chosen bottom-level KG schema to use in case of KG construction (must be equal to one of KG_SCHEMAS keys) acts as switch for KG construction mode (if filled, mode is on) input_exe_kg_path: path of KG to be executed acts as switch for KG execution mode (if filled, mode is on) \"\"\" self . top_level_schema = KGSchema . from_schema_info ( KG_SCHEMAS [ \"Data Science\" ]) # top-level KG schema # top-level KG schema entities self . atomic_task = Entity ( self . top_level_schema . namespace . AtomicTask ) self . atomic_method = Entity ( self . top_level_schema . namespace . AtomicMethod ) self . data_entity = Entity ( self . top_level_schema . namespace . DataEntity ) self . pipeline = Entity ( self . top_level_schema . namespace . Pipeline ) self . data = Entity ( self . top_level_schema . namespace . Data ) self . data_semantics = Entity ( self . top_level_schema . namespace . DataSemantics ) self . data_structure = Entity ( self . top_level_schema . namespace . DataStructure ) # self.input_kg: KG eventually filled with 3 KG schemas and the input executable KG in case of KG execution self . input_kg = Graph ( bind_namespaces = \"rdflib\" ) if input_exe_kg_path : # KG execution mode self . input_kg . parse ( input_exe_kg_path , format = \"n3\" ) # parse input executable KG all_ns = [ n for n in self . input_kg . namespace_manager . namespaces ()] bottom_level_schema_info_set = False # flag indicating that a bottom-level schema was found for schema_name , schema_info in KG_SCHEMAS . items (): # search for used bottom-level schema if ( schema_name == \"Data Science\" or schema_name == \"Visualization\" ): # skip top-level KG schema and Visualization schema that is always used continue if ( schema_info [ \"namespace_prefix\" ], URIRef ( schema_info [ \"namespace\" ])) in all_ns : # bottom-level schema found self . bottom_level_schema = KGSchema . from_schema_info ( schema_info ) bottom_level_schema_info_set = True break visu_schema_info = KG_SCHEMAS [ \"Visualization\" ] if ( not bottom_level_schema_info_set and ( visu_schema_info [ \"namespace_prefix\" ], URIRef ( visu_schema_info [ \"namespace\" ])) in all_ns ): # Visualization schema is considered the bottom-level schema ONLY IF no other bottom-level schema was found self . bottom_level_schema = KGSchema . from_schema_info ( visu_schema_info ) bottom_level_schema_info_set = True if not bottom_level_schema_info_set : # no bottom-level schema found, input executable KG is invalid print ( \"Input executable KG did not have any bottom level KG schemas\" ) exit ( 1 ) else : # KG construction mode # bottom-level schema used as compatibility guide for constructing executable KG self . bottom_level_schema = KGSchema . from_schema_info ( KG_SCHEMAS [ kg_schema_name ]) self . visu_schema = KGSchema . from_schema_info ( KG_SCHEMAS [ \"Visualization\" ] ) # Visualization KG schema, always used self . input_kg += ( self . top_level_schema . kg + self . bottom_level_schema . kg + self . visu_schema . kg ) # combine all KG schemas in input KG self . output_kg = Graph ( bind_namespaces = \"rdflib\" ) # KG to be filled while constructing executable KG self . _bind_used_namespaces ([ self . input_kg , self . output_kg ]) # below variables are filled in self._parse_kgs() self . task_type_dict = {} # dict for uniquely naming each new pipeline task self . method_type_dict = {} # dict for uniquely naming each new pipeline method self . atomic_task_list = [] # list for storing the available sub-classes of ds:AtomicTask self . atomic_method_list = [] # list for storing the available sub-classes of ds:AtomicMethod self . data_type_list = [] # list for storing the available sub-classes of ds:DataEntity self . data_semantics_list = [] # list for storing the available sub-classes of ds:DataSemantics self . data_structure_list = [] # list for storing the available sub-classes of ds:DataStructure self . existing_data_entity_list = ( [] ) # contains existing data entities that are output entities of previous tasks during KG construction self . last_created_task = ( None # last created pipeline task, for connecting consecutive pipeline tasks during KG construction ) self . canvas_task_created = False # indicates if canvas task was created during KG construction, and used for hiding the other Visualization tasks in CLI self . _parse_kgs () def _bind_used_namespaces ( self , kgs : List [ Graph ]): \"\"\" Binds top-level, bottom-level and Visualization KG schemas' namespaces with their prefixes Adds these bindings to the Graphs of kgs list Args: kgs: list of Graph objects to which the namespace bindings are added \"\"\" for kg in kgs : kg . bind ( self . top_level_schema . namespace_prefix , self . top_level_schema . namespace ) kg . bind ( self . bottom_level_schema . namespace_prefix , self . bottom_level_schema . namespace , ) kg . bind ( self . visu_schema . namespace_prefix , self . visu_schema . namespace , ) def _parse_kgs ( self ) -> None : \"\"\" Fills lists with subclasses of top-level KG schema classes and initializes dicts used for unique naming \"\"\" atomic_task_subclasses = get_subclasses_of ( self . atomic_task . iri , self . input_kg ) for t in list ( atomic_task_subclasses ): task = Entity ( t [ 0 ], self . atomic_task ) self . atomic_task_list . append ( task ) self . task_type_dict [ task . name ] = 1 atomic_method_subclasses = get_subclasses_of ( self . atomic_method . iri , self . input_kg ) for m in list ( atomic_method_subclasses ): method = Entity ( m [ 0 ], self . atomic_method ) self . atomic_method_list . append ( method ) self . method_type_dict [ method . name ] = 1 data_type_subclasses = get_subclasses_of ( self . data_entity . iri , self . input_kg ) for d in list ( data_type_subclasses ): data_type = Entity ( d [ 0 ], self . data_entity ) self . data_type_list . append ( data_type ) data_semantics_subclasses = get_subclasses_of ( self . data_semantics . iri , self . top_level_schema . kg ) for d in list ( data_semantics_subclasses ): if d [ 0 ] == self . data_entity . iri : continue data_semantics = Entity ( d [ 0 ], self . data_semantics ) self . data_semantics_list . append ( data_semantics ) data_structure_subclasses = get_subclasses_of ( self . data_structure . iri , self . top_level_schema . kg ) for d in list ( data_structure_subclasses ): if d [ 0 ] == self . data_entity . iri : continue data_structure = Entity ( d [ 0 ], self . data_structure ) self . data_structure_list . append ( data_structure ) def create_pipeline_task ( self , pipeline_name : str , input_data_path : str ) -> Task : \"\"\" Instantiates and adds a new pipeline task entity to self.output_kg Args: pipeline_name: name for the pipeline input_data_path: path for the input data to be used by the pipeline's tasks Returns: Task: created pipeline \"\"\" pipeline = create_pipeline_task ( self . top_level_schema . namespace , self . bottom_level_schema . namespace , self . pipeline , self . output_kg , pipeline_name , input_data_path , ) self . last_created_task = pipeline return pipeline def create_data_entity ( self , name : str , source_value : str , data_semantics_name : str , data_structure_name : str , ) -> DataEntity : \"\"\" Creates a DataEntity object Args: name: name of the data entity source_value: name of the data source corresponding to a column of the data data_semantics_name: name of the data semantics entity data_structure_name: name of the data structure entity Returns: DataEntity: object initialized with the given parameter values \"\"\" return DataEntity ( self . bottom_level_schema . namespace + name , self . data_entity , source_value , self . top_level_schema . namespace + data_semantics_name , self . top_level_schema . namespace + data_structure_name , ) def add_task ( self , task_type : str , input_data_entity_dict : Dict [ str , List [ DataEntity ]], method_type : str , data_properties : Dict [ str , Union [ str , int , float ]], visualization : bool = False , ) -> Task : \"\"\" Instantiates and adds a new task entity to self.output_kg Components added to the task during creation: input and output entities, and a method with data properties Args: task_type: type of the task input_data_entity_dict: keys -> input entity names corresponding to the given task_type as defined in the chosen bottom-level KG schema values -> list of corresponding data entities to be added as input to the task method_type: type of the task's method data_properties: keys -> data property names corresponding to the given method_type as defined in the chosen bottom-level KG schema values -> list of corresponding values to be added as property values to the task visualization: if True, the namespace prefix of Visualization KG schema is used during creation of the task else, the namespace prefix of the chosen bottom-level KG schema is used Returns: Task: object of the created task \"\"\" namespace_to_use = ( self . visu_schema . namespace if visualization else self . bottom_level_schema . namespace ) # use appropriate namespace for the task relation_iri = ( self . top_level_schema . namespace . hasNextTask if self . last_created_task . type != \"Pipeline\" else self . top_level_schema . namespace . hasStartTask ) # use relation depending on the previous task # instantiate task and link it with the previous one parent_task = Task ( namespace_to_use + task_type , self . atomic_task ) added_entity = add_instance_from_parent_with_relation ( self . bottom_level_schema . namespace , self . output_kg , parent_task , relation_iri , self . last_created_task , name_instance ( self . task_type_dict , self . method_type_dict , parent_task ), ) next_task = Task . from_entity ( added_entity ) # create Task object from Entity object # instantiate and add given input data entities to the task self . _add_inputs_to_task ( next_task , input_data_entity_dict ) # instantiate and add output data entities to the task, as specified in the KG schema self . _add_outputs_to_task ( next_task ) method_parent = Entity ( namespace_to_use + method_type , self . atomic_method ) # fetch compatible methods and their properties from KG schema results = list ( get_method_properties_and_methods ( self . input_kg , self . top_level_schema . namespace_prefix , next_task . parent_entity . iri , ) ) chosen_property_method = next ( filter ( lambda pair : pair [ 1 ] . split ( \"#\" )[ 1 ] == method_type , results ), None ) # match given method_type with query result if chosen_property_method is None : print ( f \"Property connecting task of type { task_type } with method of type { method_type } not found\" ) exit ( 1 ) # instantiate method and link it with the task using the appropriate chosen_property_method[0] relation add_instance_from_parent_with_relation ( self . bottom_level_schema . namespace , self . output_kg , method_parent , chosen_property_method [ 0 ], next_task , name_instance ( self . task_type_dict , self . method_type_dict , method_parent ), ) # fetch compatible data properties from KG schema property_list = get_data_properties_plus_inherited_by_class_iri ( self . input_kg , method_parent . iri ) # add data properties to the task with given values for pair in property_list : property_iri = pair [ 0 ] property_name = property_iri . split ( \"#\" )[ 1 ] range_iri = pair [ 1 ] input_property = Literal ( lexical_or_value = data_properties [ property_name ], datatype = range_iri , ) add_literal ( self . output_kg , next_task , property_iri , input_property ) self . last_created_task = next_task # store created task return next_task def _add_inputs_to_task ( self , task_entity : Task , input_data_entity_dict : Dict [ str , List [ DataEntity ]] = None ) -> None : \"\"\" Instantiates and adds given input data entities to the given task of self.output_kg if input_data_entity_dict is None, user is asked to specify input data entities Args: task_entity: the task to add the input to input_data_entity_dict: keys -> input entity names corresponding to the given task as defined in the chosen bottom-level KG schema values -> list of corresponding data entities to be added as input to the task \"\"\" # fetch compatible inputs from KG schema results = list ( get_input_properties_and_inputs ( self . input_kg , self . top_level_schema . namespace_prefix , task_entity . parent_entity . iri , ) ) # task_type_index was incremented when creating the task entity # reset the index to match the currently created task's index task_type_index = self . task_type_dict [ task_entity . type ] - 1 for _ , input_entity_iri in results : input_entity_name = input_entity_iri . split ( \"#\" )[ 1 ] if input_data_entity_dict : input_data_entity_list = input_data_entity_dict [ input_entity_name ] else : # use CLI print ( f \"Specify input corresponding to { input_entity_name } \" ) input_data_entity_list = get_input_for_existing_data_entities ( self . existing_data_entity_list ) input_data_entity_list += get_input_for_new_data_entities ( self . data_semantics_list , self . data_structure_list , self . bottom_level_schema . namespace , self . data_entity , ) same_input_index = 1 for input_data_entity in input_data_entity_list : # instantiate data entity corresponding to the found input_entity_name data_entity_iri = input_entity_iri + str ( task_type_index ) + \"_\" + str ( same_input_index ) # instantiate given data entity add_data_entity_instance ( self . output_kg , self . data , self . top_level_schema . kg , self . top_level_schema . namespace , input_data_entity , ) # instantiate and attach data entity with reference to the given data entity data_entity = DataEntity ( data_entity_iri , DataEntity ( input_entity_iri , self . data_entity ), has_reference = input_data_entity . iri , ) add_and_attach_data_entity ( self . output_kg , self . data , self . top_level_schema . kg , self . top_level_schema . namespace , data_entity , self . top_level_schema . namespace . hasInput , task_entity , ) task_entity . input_dict [ input_entity_name ] = data_entity same_input_index += 1 def _add_outputs_to_task ( self , task_entity : Task ) -> None : \"\"\" Instantiates and adds output data entities to the given task of self.output_kg, based on the task's definition in the KG schema Args: task_entity: the task to add the output to \"\"\" # fetch compatible outputs from KG schema results = list ( get_output_properties_and_outputs ( self . input_kg , self . top_level_schema . namespace_prefix , task_entity . parent_entity . iri , ) ) # task_type_index was incremented when creating the task entity # reset the index to match the currently created task's index task_type_index = self . task_type_dict [ task_entity . type ] - 1 for output_property , output_entity_iri in results : # instantiate and add data entity data_entity_iri = output_entity_iri + str ( task_type_index ) data_entity = DataEntity ( data_entity_iri , self . data_entity ) add_and_attach_data_entity ( self . output_kg , self . data , self . top_level_schema . kg , self . top_level_schema . namespace , data_entity , self . top_level_schema . namespace . hasOutput , task_entity , ) task_entity . output_dict [ output_entity_iri . split ( \"#\" )[ 1 ]] = data_entity self . existing_data_entity_list . append ( data_entity ) def _create_next_task_cli ( self ) -> Union [ None , Task ]: \"\"\" Instantiates and adds task (without method) based on user input to self.output_kg Adds task's output data entities to self.existing_data_entity_list Returns: None: in case user wants to end the pipeline creation Task: object of the created task \"\"\" print ( \"Please choose the next task\" ) for i , t in enumerate ( self . atomic_task_list ): if not self . canvas_task_created and t . name == \"PlotTask\" : continue if self . canvas_task_created and t . name == \"CanvasTask\" : continue print ( f \" \\t { str ( i ) } . { t . name } \" ) print ( f \" \\t { str ( - 1 ) } . End pipeline\" ) next_task_id = int ( input ()) if next_task_id == - 1 : return None next_task_parent = self . atomic_task_list [ next_task_id ] relation_iri = ( self . top_level_schema . namespace . hasNextTask if self . last_created_task . type != \"Pipeline\" else self . top_level_schema . namespace . hasStartTask ) # use relation depending on the previous task # instantiate task and link it with the previous one task_entity = add_instance_from_parent_with_relation ( self . bottom_level_schema . namespace , self . output_kg , next_task_parent , relation_iri , self . last_created_task , name_instance ( self . task_type_dict , self . method_type_dict , next_task_parent ), ) task_entity = Task ( task_entity . iri , task_entity . parent_entity ) # create Task object from Entity object's info # instantiate and add input data entities to the task based on user input self . _add_inputs_to_task ( task_entity ) # instantiate and add output data entities to the task, as specified in the KG schema self . _add_outputs_to_task ( task_entity ) self . last_created_task = task_entity if task_entity . type == \"CanvasTask\" : self . canvas_task_created = True return task_entity def _create_method ( self , task_to_attach_to : Entity ) -> None : \"\"\" Instantiate and attach method to task of self.output_kg Args: task_to_attach_to: the task to attach the created method to \"\"\" print ( f \"Please choose a method for { task_to_attach_to . type } :\" ) # fetch compatible methods and their properties from KG schema results = list ( get_method_properties_and_methods ( self . input_kg , self . top_level_schema . namespace_prefix , task_to_attach_to . parent_entity . iri , ) ) for i , pair in enumerate ( results ): tmp_method = pair [ 1 ] . split ( \"#\" )[ 1 ] print ( f \" \\t { str ( i ) } . { tmp_method } \" ) method_id = int ( input ()) selected_property_and_method = results [ method_id ] method_parent = next ( filter ( lambda m : m . iri == selected_property_and_method [ 1 ], self . atomic_method_list , ), None , ) # instantiate method and link it with the task using the appropriate selected_property_and_method[0] relation add_instance_from_parent_with_relation ( self . bottom_level_schema . namespace , self . output_kg , method_parent , selected_property_and_method [ 0 ], task_to_attach_to , name_instance ( self . task_type_dict , self . method_type_dict , method_parent ), ) # fetch compatible data properties from KG schema property_list = get_data_properties_plus_inherited_by_class_iri ( self . input_kg , method_parent . iri ) if property_list : print ( f \"Please enter requested properties for { method_parent . name } :\" ) # add data properties to the task with given values for pair in property_list : property_instance = URIRef ( pair [ 0 ]) range = pair [ 1 ] . split ( \"#\" )[ 1 ] range_iri = pair [ 1 ] input_property = Literal ( lexical_or_value = input ( \" \\t {} in range( {} ): \" . format ( pair [ 0 ] . split ( \"#\" )[ 1 ], range )), datatype = range_iri , ) add_literal ( self . output_kg , task_to_attach_to , property_instance , input_property ) def start_pipeline_creation ( self , pipeline_name : str , input_data_path : str ) -> None : \"\"\" Handles the pipeline creation through CLI Args: pipeline_name: name for the pipeline input_data_path: path for the input data to be used by the pipeline's tasks \"\"\" pipeline = create_pipeline_task ( self . top_level_schema . namespace , self . bottom_level_schema . namespace , self . pipeline , self . output_kg , pipeline_name , input_data_path , ) self . last_created_task = pipeline while True : next_task = self . _create_next_task_cli () if next_task is None : break self . _create_method ( next_task ) def save_created_kg ( self , file_path : str ) -> None : \"\"\" Saves self.output_kg to a file Args: file_path: path of the output file \"\"\" dir_path = os . path . dirname ( file_path ) os . makedirs ( dir_path , exist_ok = True ) self . output_kg . serialize ( destination = file_path ) print ( f \"Executable KG saved in { file_path } \" ) def _property_value_to_field_value ( self , property_value : str ) -> Union [ str , DataEntity ]: \"\"\" Converts property value to Python class field value If property_value is not a data entity's IRI, it is returned as is Else, its property values are converted recursively and stored in a DataEntity object Args: property_value: value of the property as found in KG Returns: str: property_value parameter as is DataEntity: object containing parsed data entity properties \"\"\" if \"#\" in property_value : data_entity = self . _parse_data_entity_by_iri ( property_value ) if data_entity is None : return property_value return data_entity return property_value def _parse_data_entity_by_iri ( self , in_out_data_entity_iri : str ) -> Optional [ DataEntity ]: \"\"\" Parses an input or output data entity of self.input_kg and stores the parsed info in a Python object Args: in_out_data_entity_iri: IRI of the KG entity to parse Returns: None: if given IRI does not belong to an instance of a sub-class of self.top_level_schema.namespace.DataEntity DataEntity: object with data entity's parsed properties \"\"\" # fetch type of entity with given IRI query_result = get_first_query_result_if_exists ( query_entity_parent_iri , self . input_kg , in_out_data_entity_iri , self . top_level_schema . namespace . DataEntity , ) if query_result is None : return None data_entity_parent_iri = str ( query_result [ 0 ]) # fetch IRI of data entity that is referenced by the given entity query_result = get_first_query_result_if_exists ( query_data_entity_reference_iri , self . input_kg , self . top_level_schema . namespace_prefix , in_out_data_entity_iri , ) if query_result is None : # no referenced data entity found data_entity_ref_iri = in_out_data_entity_iri else : data_entity_ref_iri = str ( query_result [ 0 ]) # create DataEntity object to store all the parsed properties data_entity = DataEntity ( in_out_data_entity_iri , Entity ( data_entity_parent_iri )) data_entity . has_reference = data_entity_ref_iri . split ( \"#\" )[ 1 ] for s , p , o in self . input_kg . triples (( URIRef ( data_entity_ref_iri ), None , None )): # parse property name and value field_name = property_name_to_field_name ( str ( p )) if not hasattr ( data_entity , field_name ) or field_name == \"type\" : continue field_value = self . _property_value_to_field_value ( str ( o )) setattr ( data_entity , field_name , field_value ) # set field value dynamically return data_entity def _parse_task_by_iri ( self , task_iri : str , canvas_method : visual_tasks . CanvasTaskCanvasMethod = None ) -> Task : \"\"\" Parses a task of self.input_kg and stores the info in an object of a sub-class of Task The sub-class name and the object's fields are mapped dynamically based on the found KG components Args: task_iri: IRI of the task to be parsed canvas_method: optional object to pass as argument for task object initialization Returns: Task: object of a sub-class of Task, containing all the parsed info \"\"\" # fetch type of entity with given IRI query_result = get_first_query_result_if_exists ( query_entity_parent_iri , self . input_kg , task_iri , self . top_level_schema . namespace . AtomicTask , ) if ( query_result is None ): # given IRI does not belong to an instance of a sub-class of self.top_level_schema.namespace.AtomicTask print ( f \"Cannot retrieve parent of task with iri { task_iri } . Exiting...\" ) exit ( 1 ) task_parent_iri = str ( query_result [ 0 ]) task = Task ( task_iri , Task ( task_parent_iri )) method = get_method_by_task_iri ( self . input_kg , self . top_level_schema . namespace_prefix , self . top_level_schema . namespace , task_iri , ) if method is None : print ( f \"Cannot retrieve method for task with iri: { task_iri } \" ) # perform automatic mapping of KG task class to Python sub-class class_name = task . type + method . type Class = getattr ( visual_tasks , class_name , None ) if Class is None : Class = getattr ( statistic_tasks , class_name , None ) if Class is None : Class = getattr ( ml_tasks , class_name , None ) # create Task sub-class object if canvas_method : task = Class ( task_iri , Task ( task_parent_iri ), canvas_method ) else : task = Class ( task_iri , Task ( task_parent_iri )) for s , p , o in self . input_kg . triples (( URIRef ( task_iri ), None , None )): # parse property name and value field_name = property_name_to_field_name ( str ( p )) if not hasattr ( task , field_name ) or field_name == \"type\" : continue field_value = self . _property_value_to_field_value ( str ( o )) # set field value dynamically if field_name == \"has_input\" or field_name == \"has_output\" : getattr ( task , field_name ) . append ( field_value ) else : setattr ( task , field_name , field_value ) return task def execute_pipeline ( self ): \"\"\" Retrieves and executes pipeline by parsing self.input_kg \"\"\" pipeline_iri , input_data_path , next_task_iri = get_pipeline_and_first_task_iri ( self . input_kg , self . top_level_schema . namespace_prefix ) input_data = pd . read_csv ( input_data_path , delimiter = \",\" , encoding = \"ISO-8859-1\" ) canvas_method = None # stores Task object that corresponds to a task of type CanvasTask task_output_dict = {} # gradually filled with outputs of executed tasks while next_task_iri is not None : next_task = self . _parse_task_by_iri ( next_task_iri , canvas_method ) output = next_task . run_method ( task_output_dict , input_data ) if output : task_output_dict . update ( output ) if next_task . type == \"CanvasTask\" : canvas_method = next_task next_task_iri = next_task . has_next_task @staticmethod def input_kg_schema_name () -> str : \"\"\" Prompts the user to choose a schema by presenting the available schemas' names Returns: str: chosen schema name \"\"\" kg_schema_names = list ( KG_SCHEMAS . keys ()) print ( \"Choose a KG schema to use. Components of the Visualization schema can be used regardless of the chosen schema.\" ) for i , kg_schema_name in enumerate ( kg_schema_names ): if kg_schema_name == \"Data Science\" : continue print ( f \" { i } : { kg_schema_name } \" ) selected_schema_i = int ( input ()) selected_schema_name = kg_schema_names [ selected_schema_i ] return selected_schema_name __init__ ( kg_schema_name = None , input_exe_kg_path = None ) \u00b6 Parameters: Name Type Description Default kg_schema_name str name of chosen bottom-level KG schema to use in case of KG construction (must be equal to one of KG_SCHEMAS keys) acts as switch for KG construction mode (if filled, mode is on) None input_exe_kg_path str path of KG to be executed acts as switch for KG execution mode (if filled, mode is on) None Source code in exe_kg_lib\\classes\\exe_kg.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 def __init__ ( self , kg_schema_name : str = None , input_exe_kg_path : str = None ): \"\"\" Args: kg_schema_name: name of chosen bottom-level KG schema to use in case of KG construction (must be equal to one of KG_SCHEMAS keys) acts as switch for KG construction mode (if filled, mode is on) input_exe_kg_path: path of KG to be executed acts as switch for KG execution mode (if filled, mode is on) \"\"\" self . top_level_schema = KGSchema . from_schema_info ( KG_SCHEMAS [ \"Data Science\" ]) # top-level KG schema # top-level KG schema entities self . atomic_task = Entity ( self . top_level_schema . namespace . AtomicTask ) self . atomic_method = Entity ( self . top_level_schema . namespace . AtomicMethod ) self . data_entity = Entity ( self . top_level_schema . namespace . DataEntity ) self . pipeline = Entity ( self . top_level_schema . namespace . Pipeline ) self . data = Entity ( self . top_level_schema . namespace . Data ) self . data_semantics = Entity ( self . top_level_schema . namespace . DataSemantics ) self . data_structure = Entity ( self . top_level_schema . namespace . DataStructure ) # self.input_kg: KG eventually filled with 3 KG schemas and the input executable KG in case of KG execution self . input_kg = Graph ( bind_namespaces = \"rdflib\" ) if input_exe_kg_path : # KG execution mode self . input_kg . parse ( input_exe_kg_path , format = \"n3\" ) # parse input executable KG all_ns = [ n for n in self . input_kg . namespace_manager . namespaces ()] bottom_level_schema_info_set = False # flag indicating that a bottom-level schema was found for schema_name , schema_info in KG_SCHEMAS . items (): # search for used bottom-level schema if ( schema_name == \"Data Science\" or schema_name == \"Visualization\" ): # skip top-level KG schema and Visualization schema that is always used continue if ( schema_info [ \"namespace_prefix\" ], URIRef ( schema_info [ \"namespace\" ])) in all_ns : # bottom-level schema found self . bottom_level_schema = KGSchema . from_schema_info ( schema_info ) bottom_level_schema_info_set = True break visu_schema_info = KG_SCHEMAS [ \"Visualization\" ] if ( not bottom_level_schema_info_set and ( visu_schema_info [ \"namespace_prefix\" ], URIRef ( visu_schema_info [ \"namespace\" ])) in all_ns ): # Visualization schema is considered the bottom-level schema ONLY IF no other bottom-level schema was found self . bottom_level_schema = KGSchema . from_schema_info ( visu_schema_info ) bottom_level_schema_info_set = True if not bottom_level_schema_info_set : # no bottom-level schema found, input executable KG is invalid print ( \"Input executable KG did not have any bottom level KG schemas\" ) exit ( 1 ) else : # KG construction mode # bottom-level schema used as compatibility guide for constructing executable KG self . bottom_level_schema = KGSchema . from_schema_info ( KG_SCHEMAS [ kg_schema_name ]) self . visu_schema = KGSchema . from_schema_info ( KG_SCHEMAS [ \"Visualization\" ] ) # Visualization KG schema, always used self . input_kg += ( self . top_level_schema . kg + self . bottom_level_schema . kg + self . visu_schema . kg ) # combine all KG schemas in input KG self . output_kg = Graph ( bind_namespaces = \"rdflib\" ) # KG to be filled while constructing executable KG self . _bind_used_namespaces ([ self . input_kg , self . output_kg ]) # below variables are filled in self._parse_kgs() self . task_type_dict = {} # dict for uniquely naming each new pipeline task self . method_type_dict = {} # dict for uniquely naming each new pipeline method self . atomic_task_list = [] # list for storing the available sub-classes of ds:AtomicTask self . atomic_method_list = [] # list for storing the available sub-classes of ds:AtomicMethod self . data_type_list = [] # list for storing the available sub-classes of ds:DataEntity self . data_semantics_list = [] # list for storing the available sub-classes of ds:DataSemantics self . data_structure_list = [] # list for storing the available sub-classes of ds:DataStructure self . existing_data_entity_list = ( [] ) # contains existing data entities that are output entities of previous tasks during KG construction self . last_created_task = ( None # last created pipeline task, for connecting consecutive pipeline tasks during KG construction ) self . canvas_task_created = False # indicates if canvas task was created during KG construction, and used for hiding the other Visualization tasks in CLI self . _parse_kgs () add_task ( task_type , input_data_entity_dict , method_type , data_properties , visualization = False ) \u00b6 Instantiates and adds a new task entity to self.output_kg Components added to the task during creation: input and output entities, and a method with data properties Parameters: Name Type Description Default task_type str type of the task required input_data_entity_dict Dict [ str , List [ DataEntity ]] keys -> input entity names corresponding to the given task_type as defined in the chosen bottom-level KG schema values -> list of corresponding data entities to be added as input to the task required method_type str type of the task's method required data_properties Dict [ str , Union [ str , int , float ]] keys -> data property names corresponding to the given method_type as defined in the chosen bottom-level KG schema values -> list of corresponding values to be added as property values to the task required visualization bool if True, the namespace prefix of Visualization KG schema is used during creation of the task else, the namespace prefix of the chosen bottom-level KG schema is used False Returns: Name Type Description Task Task object of the created task Source code in exe_kg_lib\\classes\\exe_kg.py 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 def add_task ( self , task_type : str , input_data_entity_dict : Dict [ str , List [ DataEntity ]], method_type : str , data_properties : Dict [ str , Union [ str , int , float ]], visualization : bool = False , ) -> Task : \"\"\" Instantiates and adds a new task entity to self.output_kg Components added to the task during creation: input and output entities, and a method with data properties Args: task_type: type of the task input_data_entity_dict: keys -> input entity names corresponding to the given task_type as defined in the chosen bottom-level KG schema values -> list of corresponding data entities to be added as input to the task method_type: type of the task's method data_properties: keys -> data property names corresponding to the given method_type as defined in the chosen bottom-level KG schema values -> list of corresponding values to be added as property values to the task visualization: if True, the namespace prefix of Visualization KG schema is used during creation of the task else, the namespace prefix of the chosen bottom-level KG schema is used Returns: Task: object of the created task \"\"\" namespace_to_use = ( self . visu_schema . namespace if visualization else self . bottom_level_schema . namespace ) # use appropriate namespace for the task relation_iri = ( self . top_level_schema . namespace . hasNextTask if self . last_created_task . type != \"Pipeline\" else self . top_level_schema . namespace . hasStartTask ) # use relation depending on the previous task # instantiate task and link it with the previous one parent_task = Task ( namespace_to_use + task_type , self . atomic_task ) added_entity = add_instance_from_parent_with_relation ( self . bottom_level_schema . namespace , self . output_kg , parent_task , relation_iri , self . last_created_task , name_instance ( self . task_type_dict , self . method_type_dict , parent_task ), ) next_task = Task . from_entity ( added_entity ) # create Task object from Entity object # instantiate and add given input data entities to the task self . _add_inputs_to_task ( next_task , input_data_entity_dict ) # instantiate and add output data entities to the task, as specified in the KG schema self . _add_outputs_to_task ( next_task ) method_parent = Entity ( namespace_to_use + method_type , self . atomic_method ) # fetch compatible methods and their properties from KG schema results = list ( get_method_properties_and_methods ( self . input_kg , self . top_level_schema . namespace_prefix , next_task . parent_entity . iri , ) ) chosen_property_method = next ( filter ( lambda pair : pair [ 1 ] . split ( \"#\" )[ 1 ] == method_type , results ), None ) # match given method_type with query result if chosen_property_method is None : print ( f \"Property connecting task of type { task_type } with method of type { method_type } not found\" ) exit ( 1 ) # instantiate method and link it with the task using the appropriate chosen_property_method[0] relation add_instance_from_parent_with_relation ( self . bottom_level_schema . namespace , self . output_kg , method_parent , chosen_property_method [ 0 ], next_task , name_instance ( self . task_type_dict , self . method_type_dict , method_parent ), ) # fetch compatible data properties from KG schema property_list = get_data_properties_plus_inherited_by_class_iri ( self . input_kg , method_parent . iri ) # add data properties to the task with given values for pair in property_list : property_iri = pair [ 0 ] property_name = property_iri . split ( \"#\" )[ 1 ] range_iri = pair [ 1 ] input_property = Literal ( lexical_or_value = data_properties [ property_name ], datatype = range_iri , ) add_literal ( self . output_kg , next_task , property_iri , input_property ) self . last_created_task = next_task # store created task return next_task create_data_entity ( name , source_value , data_semantics_name , data_structure_name ) \u00b6 Creates a DataEntity object Parameters: Name Type Description Default name str name of the data entity required source_value str name of the data source corresponding to a column of the data required data_semantics_name str name of the data semantics entity required data_structure_name str name of the data structure entity required Returns: Name Type Description DataEntity DataEntity object initialized with the given parameter values Source code in exe_kg_lib\\classes\\exe_kg.py 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 def create_data_entity ( self , name : str , source_value : str , data_semantics_name : str , data_structure_name : str , ) -> DataEntity : \"\"\" Creates a DataEntity object Args: name: name of the data entity source_value: name of the data source corresponding to a column of the data data_semantics_name: name of the data semantics entity data_structure_name: name of the data structure entity Returns: DataEntity: object initialized with the given parameter values \"\"\" return DataEntity ( self . bottom_level_schema . namespace + name , self . data_entity , source_value , self . top_level_schema . namespace + data_semantics_name , self . top_level_schema . namespace + data_structure_name , ) create_pipeline_task ( pipeline_name , input_data_path ) \u00b6 Instantiates and adds a new pipeline task entity to self.output_kg Parameters: Name Type Description Default pipeline_name str name for the pipeline required input_data_path str path for the input data to be used by the pipeline's tasks required Returns: Name Type Description Task Task created pipeline Source code in exe_kg_lib\\classes\\exe_kg.py 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 def create_pipeline_task ( self , pipeline_name : str , input_data_path : str ) -> Task : \"\"\" Instantiates and adds a new pipeline task entity to self.output_kg Args: pipeline_name: name for the pipeline input_data_path: path for the input data to be used by the pipeline's tasks Returns: Task: created pipeline \"\"\" pipeline = create_pipeline_task ( self . top_level_schema . namespace , self . bottom_level_schema . namespace , self . pipeline , self . output_kg , pipeline_name , input_data_path , ) self . last_created_task = pipeline return pipeline execute_pipeline () \u00b6 Retrieves and executes pipeline by parsing self.input_kg Source code in exe_kg_lib\\classes\\exe_kg.py 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 def execute_pipeline ( self ): \"\"\" Retrieves and executes pipeline by parsing self.input_kg \"\"\" pipeline_iri , input_data_path , next_task_iri = get_pipeline_and_first_task_iri ( self . input_kg , self . top_level_schema . namespace_prefix ) input_data = pd . read_csv ( input_data_path , delimiter = \",\" , encoding = \"ISO-8859-1\" ) canvas_method = None # stores Task object that corresponds to a task of type CanvasTask task_output_dict = {} # gradually filled with outputs of executed tasks while next_task_iri is not None : next_task = self . _parse_task_by_iri ( next_task_iri , canvas_method ) output = next_task . run_method ( task_output_dict , input_data ) if output : task_output_dict . update ( output ) if next_task . type == \"CanvasTask\" : canvas_method = next_task next_task_iri = next_task . has_next_task input_kg_schema_name () staticmethod \u00b6 Prompts the user to choose a schema by presenting the available schemas' names Returns: Name Type Description str str chosen schema name Source code in exe_kg_lib\\classes\\exe_kg.py 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 @staticmethod def input_kg_schema_name () -> str : \"\"\" Prompts the user to choose a schema by presenting the available schemas' names Returns: str: chosen schema name \"\"\" kg_schema_names = list ( KG_SCHEMAS . keys ()) print ( \"Choose a KG schema to use. Components of the Visualization schema can be used regardless of the chosen schema.\" ) for i , kg_schema_name in enumerate ( kg_schema_names ): if kg_schema_name == \"Data Science\" : continue print ( f \" { i } : { kg_schema_name } \" ) selected_schema_i = int ( input ()) selected_schema_name = kg_schema_names [ selected_schema_i ] return selected_schema_name save_created_kg ( file_path ) \u00b6 Saves self.output_kg to a file Parameters: Name Type Description Default file_path str path of the output file required Source code in exe_kg_lib\\classes\\exe_kg.py 567 568 569 570 571 572 573 574 575 576 577 def save_created_kg ( self , file_path : str ) -> None : \"\"\" Saves self.output_kg to a file Args: file_path: path of the output file \"\"\" dir_path = os . path . dirname ( file_path ) os . makedirs ( dir_path , exist_ok = True ) self . output_kg . serialize ( destination = file_path ) print ( f \"Executable KG saved in { file_path } \" ) start_pipeline_creation ( pipeline_name , input_data_path ) \u00b6 Handles the pipeline creation through CLI Parameters: Name Type Description Default pipeline_name str name for the pipeline required input_data_path str path for the input data to be used by the pipeline's tasks required Source code in exe_kg_lib\\classes\\exe_kg.py 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 def start_pipeline_creation ( self , pipeline_name : str , input_data_path : str ) -> None : \"\"\" Handles the pipeline creation through CLI Args: pipeline_name: name for the pipeline input_data_path: path for the input data to be used by the pipeline's tasks \"\"\" pipeline = create_pipeline_task ( self . top_level_schema . namespace , self . bottom_level_schema . namespace , self . pipeline , self . output_kg , pipeline_name , input_data_path , ) self . last_created_task = pipeline while True : next_task = self . _create_next_task_cli () if next_task is None : break self . _create_method ( next_task )","title":"exe_kg"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG","text":"Source code in exe_kg_lib\\classes\\exe_kg.pyclass ExeKG : def __init__ ( self , kg_schema_name : str = None , input_exe_kg_path : str = None ): \"\"\" Args: kg_schema_name: name of chosen bottom-level KG schema to use in case of KG construction (must be equal to one of KG_SCHEMAS keys) acts as switch for KG construction mode (if filled, mode is on) input_exe_kg_path: path of KG to be executed acts as switch for KG execution mode (if filled, mode is on) \"\"\" self . top_level_schema = KGSchema . from_schema_info ( KG_SCHEMAS [ \"Data Science\" ]) # top-level KG schema # top-level KG schema entities self . atomic_task = Entity ( self . top_level_schema . namespace . AtomicTask ) self . atomic_method = Entity ( self . top_level_schema . namespace . AtomicMethod ) self . data_entity = Entity ( self . top_level_schema . namespace . DataEntity ) self . pipeline = Entity ( self . top_level_schema . namespace . Pipeline ) self . data = Entity ( self . top_level_schema . namespace . Data ) self . data_semantics = Entity ( self . top_level_schema . namespace . DataSemantics ) self . data_structure = Entity ( self . top_level_schema . namespace . DataStructure ) # self.input_kg: KG eventually filled with 3 KG schemas and the input executable KG in case of KG execution self . input_kg = Graph ( bind_namespaces = \"rdflib\" ) if input_exe_kg_path : # KG execution mode self . input_kg . parse ( input_exe_kg_path , format = \"n3\" ) # parse input executable KG all_ns = [ n for n in self . input_kg . namespace_manager . namespaces ()] bottom_level_schema_info_set = False # flag indicating that a bottom-level schema was found for schema_name , schema_info in KG_SCHEMAS . items (): # search for used bottom-level schema if ( schema_name == \"Data Science\" or schema_name == \"Visualization\" ): # skip top-level KG schema and Visualization schema that is always used continue if ( schema_info [ \"namespace_prefix\" ], URIRef ( schema_info [ \"namespace\" ])) in all_ns : # bottom-level schema found self . bottom_level_schema = KGSchema . from_schema_info ( schema_info ) bottom_level_schema_info_set = True break visu_schema_info = KG_SCHEMAS [ \"Visualization\" ] if ( not bottom_level_schema_info_set and ( visu_schema_info [ \"namespace_prefix\" ], URIRef ( visu_schema_info [ \"namespace\" ])) in all_ns ): # Visualization schema is considered the bottom-level schema ONLY IF no other bottom-level schema was found self . bottom_level_schema = KGSchema . from_schema_info ( visu_schema_info ) bottom_level_schema_info_set = True if not bottom_level_schema_info_set : # no bottom-level schema found, input executable KG is invalid print ( \"Input executable KG did not have any bottom level KG schemas\" ) exit ( 1 ) else : # KG construction mode # bottom-level schema used as compatibility guide for constructing executable KG self . bottom_level_schema = KGSchema . from_schema_info ( KG_SCHEMAS [ kg_schema_name ]) self . visu_schema = KGSchema . from_schema_info ( KG_SCHEMAS [ \"Visualization\" ] ) # Visualization KG schema, always used self . input_kg += ( self . top_level_schema . kg + self . bottom_level_schema . kg + self . visu_schema . kg ) # combine all KG schemas in input KG self . output_kg = Graph ( bind_namespaces = \"rdflib\" ) # KG to be filled while constructing executable KG self . _bind_used_namespaces ([ self . input_kg , self . output_kg ]) # below variables are filled in self._parse_kgs() self . task_type_dict = {} # dict for uniquely naming each new pipeline task self . method_type_dict = {} # dict for uniquely naming each new pipeline method self . atomic_task_list = [] # list for storing the available sub-classes of ds:AtomicTask self . atomic_method_list = [] # list for storing the available sub-classes of ds:AtomicMethod self . data_type_list = [] # list for storing the available sub-classes of ds:DataEntity self . data_semantics_list = [] # list for storing the available sub-classes of ds:DataSemantics self . data_structure_list = [] # list for storing the available sub-classes of ds:DataStructure self . existing_data_entity_list = ( [] ) # contains existing data entities that are output entities of previous tasks during KG construction self . last_created_task = ( None # last created pipeline task, for connecting consecutive pipeline tasks during KG construction ) self . canvas_task_created = False # indicates if canvas task was created during KG construction, and used for hiding the other Visualization tasks in CLI self . _parse_kgs () def _bind_used_namespaces ( self , kgs : List [ Graph ]): \"\"\" Binds top-level, bottom-level and Visualization KG schemas' namespaces with their prefixes Adds these bindings to the Graphs of kgs list Args: kgs: list of Graph objects to which the namespace bindings are added \"\"\" for kg in kgs : kg . bind ( self . top_level_schema . namespace_prefix , self . top_level_schema . namespace ) kg . bind ( self . bottom_level_schema . namespace_prefix , self . bottom_level_schema . namespace , ) kg . bind ( self . visu_schema . namespace_prefix , self . visu_schema . namespace , ) def _parse_kgs ( self ) -> None : \"\"\" Fills lists with subclasses of top-level KG schema classes and initializes dicts used for unique naming \"\"\" atomic_task_subclasses = get_subclasses_of ( self . atomic_task . iri , self . input_kg ) for t in list ( atomic_task_subclasses ): task = Entity ( t [ 0 ], self . atomic_task ) self . atomic_task_list . append ( task ) self . task_type_dict [ task . name ] = 1 atomic_method_subclasses = get_subclasses_of ( self . atomic_method . iri , self . input_kg ) for m in list ( atomic_method_subclasses ): method = Entity ( m [ 0 ], self . atomic_method ) self . atomic_method_list . append ( method ) self . method_type_dict [ method . name ] = 1 data_type_subclasses = get_subclasses_of ( self . data_entity . iri , self . input_kg ) for d in list ( data_type_subclasses ): data_type = Entity ( d [ 0 ], self . data_entity ) self . data_type_list . append ( data_type ) data_semantics_subclasses = get_subclasses_of ( self . data_semantics . iri , self . top_level_schema . kg ) for d in list ( data_semantics_subclasses ): if d [ 0 ] == self . data_entity . iri : continue data_semantics = Entity ( d [ 0 ], self . data_semantics ) self . data_semantics_list . append ( data_semantics ) data_structure_subclasses = get_subclasses_of ( self . data_structure . iri , self . top_level_schema . kg ) for d in list ( data_structure_subclasses ): if d [ 0 ] == self . data_entity . iri : continue data_structure = Entity ( d [ 0 ], self . data_structure ) self . data_structure_list . append ( data_structure ) def create_pipeline_task ( self , pipeline_name : str , input_data_path : str ) -> Task : \"\"\" Instantiates and adds a new pipeline task entity to self.output_kg Args: pipeline_name: name for the pipeline input_data_path: path for the input data to be used by the pipeline's tasks Returns: Task: created pipeline \"\"\" pipeline = create_pipeline_task ( self . top_level_schema . namespace , self . bottom_level_schema . namespace , self . pipeline , self . output_kg , pipeline_name , input_data_path , ) self . last_created_task = pipeline return pipeline def create_data_entity ( self , name : str , source_value : str , data_semantics_name : str , data_structure_name : str , ) -> DataEntity : \"\"\" Creates a DataEntity object Args: name: name of the data entity source_value: name of the data source corresponding to a column of the data data_semantics_name: name of the data semantics entity data_structure_name: name of the data structure entity Returns: DataEntity: object initialized with the given parameter values \"\"\" return DataEntity ( self . bottom_level_schema . namespace + name , self . data_entity , source_value , self . top_level_schema . namespace + data_semantics_name , self . top_level_schema . namespace + data_structure_name , ) def add_task ( self , task_type : str , input_data_entity_dict : Dict [ str , List [ DataEntity ]], method_type : str , data_properties : Dict [ str , Union [ str , int , float ]], visualization : bool = False , ) -> Task : \"\"\" Instantiates and adds a new task entity to self.output_kg Components added to the task during creation: input and output entities, and a method with data properties Args: task_type: type of the task input_data_entity_dict: keys -> input entity names corresponding to the given task_type as defined in the chosen bottom-level KG schema values -> list of corresponding data entities to be added as input to the task method_type: type of the task's method data_properties: keys -> data property names corresponding to the given method_type as defined in the chosen bottom-level KG schema values -> list of corresponding values to be added as property values to the task visualization: if True, the namespace prefix of Visualization KG schema is used during creation of the task else, the namespace prefix of the chosen bottom-level KG schema is used Returns: Task: object of the created task \"\"\" namespace_to_use = ( self . visu_schema . namespace if visualization else self . bottom_level_schema . namespace ) # use appropriate namespace for the task relation_iri = ( self . top_level_schema . namespace . hasNextTask if self . last_created_task . type != \"Pipeline\" else self . top_level_schema . namespace . hasStartTask ) # use relation depending on the previous task # instantiate task and link it with the previous one parent_task = Task ( namespace_to_use + task_type , self . atomic_task ) added_entity = add_instance_from_parent_with_relation ( self . bottom_level_schema . namespace , self . output_kg , parent_task , relation_iri , self . last_created_task , name_instance ( self . task_type_dict , self . method_type_dict , parent_task ), ) next_task = Task . from_entity ( added_entity ) # create Task object from Entity object # instantiate and add given input data entities to the task self . _add_inputs_to_task ( next_task , input_data_entity_dict ) # instantiate and add output data entities to the task, as specified in the KG schema self . _add_outputs_to_task ( next_task ) method_parent = Entity ( namespace_to_use + method_type , self . atomic_method ) # fetch compatible methods and their properties from KG schema results = list ( get_method_properties_and_methods ( self . input_kg , self . top_level_schema . namespace_prefix , next_task . parent_entity . iri , ) ) chosen_property_method = next ( filter ( lambda pair : pair [ 1 ] . split ( \"#\" )[ 1 ] == method_type , results ), None ) # match given method_type with query result if chosen_property_method is None : print ( f \"Property connecting task of type { task_type } with method of type { method_type } not found\" ) exit ( 1 ) # instantiate method and link it with the task using the appropriate chosen_property_method[0] relation add_instance_from_parent_with_relation ( self . bottom_level_schema . namespace , self . output_kg , method_parent , chosen_property_method [ 0 ], next_task , name_instance ( self . task_type_dict , self . method_type_dict , method_parent ), ) # fetch compatible data properties from KG schema property_list = get_data_properties_plus_inherited_by_class_iri ( self . input_kg , method_parent . iri ) # add data properties to the task with given values for pair in property_list : property_iri = pair [ 0 ] property_name = property_iri . split ( \"#\" )[ 1 ] range_iri = pair [ 1 ] input_property = Literal ( lexical_or_value = data_properties [ property_name ], datatype = range_iri , ) add_literal ( self . output_kg , next_task , property_iri , input_property ) self . last_created_task = next_task # store created task return next_task def _add_inputs_to_task ( self , task_entity : Task , input_data_entity_dict : Dict [ str , List [ DataEntity ]] = None ) -> None : \"\"\" Instantiates and adds given input data entities to the given task of self.output_kg if input_data_entity_dict is None, user is asked to specify input data entities Args: task_entity: the task to add the input to input_data_entity_dict: keys -> input entity names corresponding to the given task as defined in the chosen bottom-level KG schema values -> list of corresponding data entities to be added as input to the task \"\"\" # fetch compatible inputs from KG schema results = list ( get_input_properties_and_inputs ( self . input_kg , self . top_level_schema . namespace_prefix , task_entity . parent_entity . iri , ) ) # task_type_index was incremented when creating the task entity # reset the index to match the currently created task's index task_type_index = self . task_type_dict [ task_entity . type ] - 1 for _ , input_entity_iri in results : input_entity_name = input_entity_iri . split ( \"#\" )[ 1 ] if input_data_entity_dict : input_data_entity_list = input_data_entity_dict [ input_entity_name ] else : # use CLI print ( f \"Specify input corresponding to { input_entity_name } \" ) input_data_entity_list = get_input_for_existing_data_entities ( self . existing_data_entity_list ) input_data_entity_list += get_input_for_new_data_entities ( self . data_semantics_list , self . data_structure_list , self . bottom_level_schema . namespace , self . data_entity , ) same_input_index = 1 for input_data_entity in input_data_entity_list : # instantiate data entity corresponding to the found input_entity_name data_entity_iri = input_entity_iri + str ( task_type_index ) + \"_\" + str ( same_input_index ) # instantiate given data entity add_data_entity_instance ( self . output_kg , self . data , self . top_level_schema . kg , self . top_level_schema . namespace , input_data_entity , ) # instantiate and attach data entity with reference to the given data entity data_entity = DataEntity ( data_entity_iri , DataEntity ( input_entity_iri , self . data_entity ), has_reference = input_data_entity . iri , ) add_and_attach_data_entity ( self . output_kg , self . data , self . top_level_schema . kg , self . top_level_schema . namespace , data_entity , self . top_level_schema . namespace . hasInput , task_entity , ) task_entity . input_dict [ input_entity_name ] = data_entity same_input_index += 1 def _add_outputs_to_task ( self , task_entity : Task ) -> None : \"\"\" Instantiates and adds output data entities to the given task of self.output_kg, based on the task's definition in the KG schema Args: task_entity: the task to add the output to \"\"\" # fetch compatible outputs from KG schema results = list ( get_output_properties_and_outputs ( self . input_kg , self . top_level_schema . namespace_prefix , task_entity . parent_entity . iri , ) ) # task_type_index was incremented when creating the task entity # reset the index to match the currently created task's index task_type_index = self . task_type_dict [ task_entity . type ] - 1 for output_property , output_entity_iri in results : # instantiate and add data entity data_entity_iri = output_entity_iri + str ( task_type_index ) data_entity = DataEntity ( data_entity_iri , self . data_entity ) add_and_attach_data_entity ( self . output_kg , self . data , self . top_level_schema . kg , self . top_level_schema . namespace , data_entity , self . top_level_schema . namespace . hasOutput , task_entity , ) task_entity . output_dict [ output_entity_iri . split ( \"#\" )[ 1 ]] = data_entity self . existing_data_entity_list . append ( data_entity ) def _create_next_task_cli ( self ) -> Union [ None , Task ]: \"\"\" Instantiates and adds task (without method) based on user input to self.output_kg Adds task's output data entities to self.existing_data_entity_list Returns: None: in case user wants to end the pipeline creation Task: object of the created task \"\"\" print ( \"Please choose the next task\" ) for i , t in enumerate ( self . atomic_task_list ): if not self . canvas_task_created and t . name == \"PlotTask\" : continue if self . canvas_task_created and t . name == \"CanvasTask\" : continue print ( f \" \\t { str ( i ) } . { t . name } \" ) print ( f \" \\t { str ( - 1 ) } . End pipeline\" ) next_task_id = int ( input ()) if next_task_id == - 1 : return None next_task_parent = self . atomic_task_list [ next_task_id ] relation_iri = ( self . top_level_schema . namespace . hasNextTask if self . last_created_task . type != \"Pipeline\" else self . top_level_schema . namespace . hasStartTask ) # use relation depending on the previous task # instantiate task and link it with the previous one task_entity = add_instance_from_parent_with_relation ( self . bottom_level_schema . namespace , self . output_kg , next_task_parent , relation_iri , self . last_created_task , name_instance ( self . task_type_dict , self . method_type_dict , next_task_parent ), ) task_entity = Task ( task_entity . iri , task_entity . parent_entity ) # create Task object from Entity object's info # instantiate and add input data entities to the task based on user input self . _add_inputs_to_task ( task_entity ) # instantiate and add output data entities to the task, as specified in the KG schema self . _add_outputs_to_task ( task_entity ) self . last_created_task = task_entity if task_entity . type == \"CanvasTask\" : self . canvas_task_created = True return task_entity def _create_method ( self , task_to_attach_to : Entity ) -> None : \"\"\" Instantiate and attach method to task of self.output_kg Args: task_to_attach_to: the task to attach the created method to \"\"\" print ( f \"Please choose a method for { task_to_attach_to . type } :\" ) # fetch compatible methods and their properties from KG schema results = list ( get_method_properties_and_methods ( self . input_kg , self . top_level_schema . namespace_prefix , task_to_attach_to . parent_entity . iri , ) ) for i , pair in enumerate ( results ): tmp_method = pair [ 1 ] . split ( \"#\" )[ 1 ] print ( f \" \\t { str ( i ) } . { tmp_method } \" ) method_id = int ( input ()) selected_property_and_method = results [ method_id ] method_parent = next ( filter ( lambda m : m . iri == selected_property_and_method [ 1 ], self . atomic_method_list , ), None , ) # instantiate method and link it with the task using the appropriate selected_property_and_method[0] relation add_instance_from_parent_with_relation ( self . bottom_level_schema . namespace , self . output_kg , method_parent , selected_property_and_method [ 0 ], task_to_attach_to , name_instance ( self . task_type_dict , self . method_type_dict , method_parent ), ) # fetch compatible data properties from KG schema property_list = get_data_properties_plus_inherited_by_class_iri ( self . input_kg , method_parent . iri ) if property_list : print ( f \"Please enter requested properties for { method_parent . name } :\" ) # add data properties to the task with given values for pair in property_list : property_instance = URIRef ( pair [ 0 ]) range = pair [ 1 ] . split ( \"#\" )[ 1 ] range_iri = pair [ 1 ] input_property = Literal ( lexical_or_value = input ( \" \\t {} in range( {} ): \" . format ( pair [ 0 ] . split ( \"#\" )[ 1 ], range )), datatype = range_iri , ) add_literal ( self . output_kg , task_to_attach_to , property_instance , input_property ) def start_pipeline_creation ( self , pipeline_name : str , input_data_path : str ) -> None : \"\"\" Handles the pipeline creation through CLI Args: pipeline_name: name for the pipeline input_data_path: path for the input data to be used by the pipeline's tasks \"\"\" pipeline = create_pipeline_task ( self . top_level_schema . namespace , self . bottom_level_schema . namespace , self . pipeline , self . output_kg , pipeline_name , input_data_path , ) self . last_created_task = pipeline while True : next_task = self . _create_next_task_cli () if next_task is None : break self . _create_method ( next_task ) def save_created_kg ( self , file_path : str ) -> None : \"\"\" Saves self.output_kg to a file Args: file_path: path of the output file \"\"\" dir_path = os . path . dirname ( file_path ) os . makedirs ( dir_path , exist_ok = True ) self . output_kg . serialize ( destination = file_path ) print ( f \"Executable KG saved in { file_path } \" ) def _property_value_to_field_value ( self , property_value : str ) -> Union [ str , DataEntity ]: \"\"\" Converts property value to Python class field value If property_value is not a data entity's IRI, it is returned as is Else, its property values are converted recursively and stored in a DataEntity object Args: property_value: value of the property as found in KG Returns: str: property_value parameter as is DataEntity: object containing parsed data entity properties \"\"\" if \"#\" in property_value : data_entity = self . _parse_data_entity_by_iri ( property_value ) if data_entity is None : return property_value return data_entity return property_value def _parse_data_entity_by_iri ( self , in_out_data_entity_iri : str ) -> Optional [ DataEntity ]: \"\"\" Parses an input or output data entity of self.input_kg and stores the parsed info in a Python object Args: in_out_data_entity_iri: IRI of the KG entity to parse Returns: None: if given IRI does not belong to an instance of a sub-class of self.top_level_schema.namespace.DataEntity DataEntity: object with data entity's parsed properties \"\"\" # fetch type of entity with given IRI query_result = get_first_query_result_if_exists ( query_entity_parent_iri , self . input_kg , in_out_data_entity_iri , self . top_level_schema . namespace . DataEntity , ) if query_result is None : return None data_entity_parent_iri = str ( query_result [ 0 ]) # fetch IRI of data entity that is referenced by the given entity query_result = get_first_query_result_if_exists ( query_data_entity_reference_iri , self . input_kg , self . top_level_schema . namespace_prefix , in_out_data_entity_iri , ) if query_result is None : # no referenced data entity found data_entity_ref_iri = in_out_data_entity_iri else : data_entity_ref_iri = str ( query_result [ 0 ]) # create DataEntity object to store all the parsed properties data_entity = DataEntity ( in_out_data_entity_iri , Entity ( data_entity_parent_iri )) data_entity . has_reference = data_entity_ref_iri . split ( \"#\" )[ 1 ] for s , p , o in self . input_kg . triples (( URIRef ( data_entity_ref_iri ), None , None )): # parse property name and value field_name = property_name_to_field_name ( str ( p )) if not hasattr ( data_entity , field_name ) or field_name == \"type\" : continue field_value = self . _property_value_to_field_value ( str ( o )) setattr ( data_entity , field_name , field_value ) # set field value dynamically return data_entity def _parse_task_by_iri ( self , task_iri : str , canvas_method : visual_tasks . CanvasTaskCanvasMethod = None ) -> Task : \"\"\" Parses a task of self.input_kg and stores the info in an object of a sub-class of Task The sub-class name and the object's fields are mapped dynamically based on the found KG components Args: task_iri: IRI of the task to be parsed canvas_method: optional object to pass as argument for task object initialization Returns: Task: object of a sub-class of Task, containing all the parsed info \"\"\" # fetch type of entity with given IRI query_result = get_first_query_result_if_exists ( query_entity_parent_iri , self . input_kg , task_iri , self . top_level_schema . namespace . AtomicTask , ) if ( query_result is None ): # given IRI does not belong to an instance of a sub-class of self.top_level_schema.namespace.AtomicTask print ( f \"Cannot retrieve parent of task with iri { task_iri } . Exiting...\" ) exit ( 1 ) task_parent_iri = str ( query_result [ 0 ]) task = Task ( task_iri , Task ( task_parent_iri )) method = get_method_by_task_iri ( self . input_kg , self . top_level_schema . namespace_prefix , self . top_level_schema . namespace , task_iri , ) if method is None : print ( f \"Cannot retrieve method for task with iri: { task_iri } \" ) # perform automatic mapping of KG task class to Python sub-class class_name = task . type + method . type Class = getattr ( visual_tasks , class_name , None ) if Class is None : Class = getattr ( statistic_tasks , class_name , None ) if Class is None : Class = getattr ( ml_tasks , class_name , None ) # create Task sub-class object if canvas_method : task = Class ( task_iri , Task ( task_parent_iri ), canvas_method ) else : task = Class ( task_iri , Task ( task_parent_iri )) for s , p , o in self . input_kg . triples (( URIRef ( task_iri ), None , None )): # parse property name and value field_name = property_name_to_field_name ( str ( p )) if not hasattr ( task , field_name ) or field_name == \"type\" : continue field_value = self . _property_value_to_field_value ( str ( o )) # set field value dynamically if field_name == \"has_input\" or field_name == \"has_output\" : getattr ( task , field_name ) . append ( field_value ) else : setattr ( task , field_name , field_value ) return task def execute_pipeline ( self ): \"\"\" Retrieves and executes pipeline by parsing self.input_kg \"\"\" pipeline_iri , input_data_path , next_task_iri = get_pipeline_and_first_task_iri ( self . input_kg , self . top_level_schema . namespace_prefix ) input_data = pd . read_csv ( input_data_path , delimiter = \",\" , encoding = \"ISO-8859-1\" ) canvas_method = None # stores Task object that corresponds to a task of type CanvasTask task_output_dict = {} # gradually filled with outputs of executed tasks while next_task_iri is not None : next_task = self . _parse_task_by_iri ( next_task_iri , canvas_method ) output = next_task . run_method ( task_output_dict , input_data ) if output : task_output_dict . update ( output ) if next_task . type == \"CanvasTask\" : canvas_method = next_task next_task_iri = next_task . has_next_task @staticmethod def input_kg_schema_name () -> str : \"\"\" Prompts the user to choose a schema by presenting the available schemas' names Returns: str: chosen schema name \"\"\" kg_schema_names = list ( KG_SCHEMAS . keys ()) print ( \"Choose a KG schema to use. Components of the Visualization schema can be used regardless of the chosen schema.\" ) for i , kg_schema_name in enumerate ( kg_schema_names ): if kg_schema_name == \"Data Science\" : continue print ( f \" { i } : { kg_schema_name } \" ) selected_schema_i = int ( input ()) selected_schema_name = kg_schema_names [ selected_schema_i ] return selected_schema_name","title":"ExeKG"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG.__init__","text":"Parameters: Name Type Description Default kg_schema_name str name of chosen bottom-level KG schema to use in case of KG construction (must be equal to one of KG_SCHEMAS keys) acts as switch for KG construction mode (if filled, mode is on) None input_exe_kg_path str path of KG to be executed acts as switch for KG execution mode (if filled, mode is on) None Source code in exe_kg_lib\\classes\\exe_kg.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 def __init__ ( self , kg_schema_name : str = None , input_exe_kg_path : str = None ): \"\"\" Args: kg_schema_name: name of chosen bottom-level KG schema to use in case of KG construction (must be equal to one of KG_SCHEMAS keys) acts as switch for KG construction mode (if filled, mode is on) input_exe_kg_path: path of KG to be executed acts as switch for KG execution mode (if filled, mode is on) \"\"\" self . top_level_schema = KGSchema . from_schema_info ( KG_SCHEMAS [ \"Data Science\" ]) # top-level KG schema # top-level KG schema entities self . atomic_task = Entity ( self . top_level_schema . namespace . AtomicTask ) self . atomic_method = Entity ( self . top_level_schema . namespace . AtomicMethod ) self . data_entity = Entity ( self . top_level_schema . namespace . DataEntity ) self . pipeline = Entity ( self . top_level_schema . namespace . Pipeline ) self . data = Entity ( self . top_level_schema . namespace . Data ) self . data_semantics = Entity ( self . top_level_schema . namespace . DataSemantics ) self . data_structure = Entity ( self . top_level_schema . namespace . DataStructure ) # self.input_kg: KG eventually filled with 3 KG schemas and the input executable KG in case of KG execution self . input_kg = Graph ( bind_namespaces = \"rdflib\" ) if input_exe_kg_path : # KG execution mode self . input_kg . parse ( input_exe_kg_path , format = \"n3\" ) # parse input executable KG all_ns = [ n for n in self . input_kg . namespace_manager . namespaces ()] bottom_level_schema_info_set = False # flag indicating that a bottom-level schema was found for schema_name , schema_info in KG_SCHEMAS . items (): # search for used bottom-level schema if ( schema_name == \"Data Science\" or schema_name == \"Visualization\" ): # skip top-level KG schema and Visualization schema that is always used continue if ( schema_info [ \"namespace_prefix\" ], URIRef ( schema_info [ \"namespace\" ])) in all_ns : # bottom-level schema found self . bottom_level_schema = KGSchema . from_schema_info ( schema_info ) bottom_level_schema_info_set = True break visu_schema_info = KG_SCHEMAS [ \"Visualization\" ] if ( not bottom_level_schema_info_set and ( visu_schema_info [ \"namespace_prefix\" ], URIRef ( visu_schema_info [ \"namespace\" ])) in all_ns ): # Visualization schema is considered the bottom-level schema ONLY IF no other bottom-level schema was found self . bottom_level_schema = KGSchema . from_schema_info ( visu_schema_info ) bottom_level_schema_info_set = True if not bottom_level_schema_info_set : # no bottom-level schema found, input executable KG is invalid print ( \"Input executable KG did not have any bottom level KG schemas\" ) exit ( 1 ) else : # KG construction mode # bottom-level schema used as compatibility guide for constructing executable KG self . bottom_level_schema = KGSchema . from_schema_info ( KG_SCHEMAS [ kg_schema_name ]) self . visu_schema = KGSchema . from_schema_info ( KG_SCHEMAS [ \"Visualization\" ] ) # Visualization KG schema, always used self . input_kg += ( self . top_level_schema . kg + self . bottom_level_schema . kg + self . visu_schema . kg ) # combine all KG schemas in input KG self . output_kg = Graph ( bind_namespaces = \"rdflib\" ) # KG to be filled while constructing executable KG self . _bind_used_namespaces ([ self . input_kg , self . output_kg ]) # below variables are filled in self._parse_kgs() self . task_type_dict = {} # dict for uniquely naming each new pipeline task self . method_type_dict = {} # dict for uniquely naming each new pipeline method self . atomic_task_list = [] # list for storing the available sub-classes of ds:AtomicTask self . atomic_method_list = [] # list for storing the available sub-classes of ds:AtomicMethod self . data_type_list = [] # list for storing the available sub-classes of ds:DataEntity self . data_semantics_list = [] # list for storing the available sub-classes of ds:DataSemantics self . data_structure_list = [] # list for storing the available sub-classes of ds:DataStructure self . existing_data_entity_list = ( [] ) # contains existing data entities that are output entities of previous tasks during KG construction self . last_created_task = ( None # last created pipeline task, for connecting consecutive pipeline tasks during KG construction ) self . canvas_task_created = False # indicates if canvas task was created during KG construction, and used for hiding the other Visualization tasks in CLI self . _parse_kgs ()","title":"__init__()"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG.add_task","text":"Instantiates and adds a new task entity to self.output_kg Components added to the task during creation: input and output entities, and a method with data properties Parameters: Name Type Description Default task_type str type of the task required input_data_entity_dict Dict [ str , List [ DataEntity ]] keys -> input entity names corresponding to the given task_type as defined in the chosen bottom-level KG schema values -> list of corresponding data entities to be added as input to the task required method_type str type of the task's method required data_properties Dict [ str , Union [ str , int , float ]] keys -> data property names corresponding to the given method_type as defined in the chosen bottom-level KG schema values -> list of corresponding values to be added as property values to the task required visualization bool if True, the namespace prefix of Visualization KG schema is used during creation of the task else, the namespace prefix of the chosen bottom-level KG schema is used False Returns: Name Type Description Task Task object of the created task Source code in exe_kg_lib\\classes\\exe_kg.py 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 def add_task ( self , task_type : str , input_data_entity_dict : Dict [ str , List [ DataEntity ]], method_type : str , data_properties : Dict [ str , Union [ str , int , float ]], visualization : bool = False , ) -> Task : \"\"\" Instantiates and adds a new task entity to self.output_kg Components added to the task during creation: input and output entities, and a method with data properties Args: task_type: type of the task input_data_entity_dict: keys -> input entity names corresponding to the given task_type as defined in the chosen bottom-level KG schema values -> list of corresponding data entities to be added as input to the task method_type: type of the task's method data_properties: keys -> data property names corresponding to the given method_type as defined in the chosen bottom-level KG schema values -> list of corresponding values to be added as property values to the task visualization: if True, the namespace prefix of Visualization KG schema is used during creation of the task else, the namespace prefix of the chosen bottom-level KG schema is used Returns: Task: object of the created task \"\"\" namespace_to_use = ( self . visu_schema . namespace if visualization else self . bottom_level_schema . namespace ) # use appropriate namespace for the task relation_iri = ( self . top_level_schema . namespace . hasNextTask if self . last_created_task . type != \"Pipeline\" else self . top_level_schema . namespace . hasStartTask ) # use relation depending on the previous task # instantiate task and link it with the previous one parent_task = Task ( namespace_to_use + task_type , self . atomic_task ) added_entity = add_instance_from_parent_with_relation ( self . bottom_level_schema . namespace , self . output_kg , parent_task , relation_iri , self . last_created_task , name_instance ( self . task_type_dict , self . method_type_dict , parent_task ), ) next_task = Task . from_entity ( added_entity ) # create Task object from Entity object # instantiate and add given input data entities to the task self . _add_inputs_to_task ( next_task , input_data_entity_dict ) # instantiate and add output data entities to the task, as specified in the KG schema self . _add_outputs_to_task ( next_task ) method_parent = Entity ( namespace_to_use + method_type , self . atomic_method ) # fetch compatible methods and their properties from KG schema results = list ( get_method_properties_and_methods ( self . input_kg , self . top_level_schema . namespace_prefix , next_task . parent_entity . iri , ) ) chosen_property_method = next ( filter ( lambda pair : pair [ 1 ] . split ( \"#\" )[ 1 ] == method_type , results ), None ) # match given method_type with query result if chosen_property_method is None : print ( f \"Property connecting task of type { task_type } with method of type { method_type } not found\" ) exit ( 1 ) # instantiate method and link it with the task using the appropriate chosen_property_method[0] relation add_instance_from_parent_with_relation ( self . bottom_level_schema . namespace , self . output_kg , method_parent , chosen_property_method [ 0 ], next_task , name_instance ( self . task_type_dict , self . method_type_dict , method_parent ), ) # fetch compatible data properties from KG schema property_list = get_data_properties_plus_inherited_by_class_iri ( self . input_kg , method_parent . iri ) # add data properties to the task with given values for pair in property_list : property_iri = pair [ 0 ] property_name = property_iri . split ( \"#\" )[ 1 ] range_iri = pair [ 1 ] input_property = Literal ( lexical_or_value = data_properties [ property_name ], datatype = range_iri , ) add_literal ( self . output_kg , next_task , property_iri , input_property ) self . last_created_task = next_task # store created task return next_task","title":"add_task()"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG.create_data_entity","text":"Creates a DataEntity object Parameters: Name Type Description Default name str name of the data entity required source_value str name of the data source corresponding to a column of the data required data_semantics_name str name of the data semantics entity required data_structure_name str name of the data structure entity required Returns: Name Type Description DataEntity DataEntity object initialized with the given parameter values Source code in exe_kg_lib\\classes\\exe_kg.py 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 def create_data_entity ( self , name : str , source_value : str , data_semantics_name : str , data_structure_name : str , ) -> DataEntity : \"\"\" Creates a DataEntity object Args: name: name of the data entity source_value: name of the data source corresponding to a column of the data data_semantics_name: name of the data semantics entity data_structure_name: name of the data structure entity Returns: DataEntity: object initialized with the given parameter values \"\"\" return DataEntity ( self . bottom_level_schema . namespace + name , self . data_entity , source_value , self . top_level_schema . namespace + data_semantics_name , self . top_level_schema . namespace + data_structure_name , )","title":"create_data_entity()"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG.create_pipeline_task","text":"Instantiates and adds a new pipeline task entity to self.output_kg Parameters: Name Type Description Default pipeline_name str name for the pipeline required input_data_path str path for the input data to be used by the pipeline's tasks required Returns: Name Type Description Task Task created pipeline Source code in exe_kg_lib\\classes\\exe_kg.py 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 def create_pipeline_task ( self , pipeline_name : str , input_data_path : str ) -> Task : \"\"\" Instantiates and adds a new pipeline task entity to self.output_kg Args: pipeline_name: name for the pipeline input_data_path: path for the input data to be used by the pipeline's tasks Returns: Task: created pipeline \"\"\" pipeline = create_pipeline_task ( self . top_level_schema . namespace , self . bottom_level_schema . namespace , self . pipeline , self . output_kg , pipeline_name , input_data_path , ) self . last_created_task = pipeline return pipeline","title":"create_pipeline_task()"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG.execute_pipeline","text":"Retrieves and executes pipeline by parsing self.input_kg Source code in exe_kg_lib\\classes\\exe_kg.py 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 def execute_pipeline ( self ): \"\"\" Retrieves and executes pipeline by parsing self.input_kg \"\"\" pipeline_iri , input_data_path , next_task_iri = get_pipeline_and_first_task_iri ( self . input_kg , self . top_level_schema . namespace_prefix ) input_data = pd . read_csv ( input_data_path , delimiter = \",\" , encoding = \"ISO-8859-1\" ) canvas_method = None # stores Task object that corresponds to a task of type CanvasTask task_output_dict = {} # gradually filled with outputs of executed tasks while next_task_iri is not None : next_task = self . _parse_task_by_iri ( next_task_iri , canvas_method ) output = next_task . run_method ( task_output_dict , input_data ) if output : task_output_dict . update ( output ) if next_task . type == \"CanvasTask\" : canvas_method = next_task next_task_iri = next_task . has_next_task","title":"execute_pipeline()"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG.input_kg_schema_name","text":"Prompts the user to choose a schema by presenting the available schemas' names Returns: Name Type Description str str chosen schema name Source code in exe_kg_lib\\classes\\exe_kg.py 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 @staticmethod def input_kg_schema_name () -> str : \"\"\" Prompts the user to choose a schema by presenting the available schemas' names Returns: str: chosen schema name \"\"\" kg_schema_names = list ( KG_SCHEMAS . keys ()) print ( \"Choose a KG schema to use. Components of the Visualization schema can be used regardless of the chosen schema.\" ) for i , kg_schema_name in enumerate ( kg_schema_names ): if kg_schema_name == \"Data Science\" : continue print ( f \" { i } : { kg_schema_name } \" ) selected_schema_i = int ( input ()) selected_schema_name = kg_schema_names [ selected_schema_i ] return selected_schema_name","title":"input_kg_schema_name()"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG.save_created_kg","text":"Saves self.output_kg to a file Parameters: Name Type Description Default file_path str path of the output file required Source code in exe_kg_lib\\classes\\exe_kg.py 567 568 569 570 571 572 573 574 575 576 577 def save_created_kg ( self , file_path : str ) -> None : \"\"\" Saves self.output_kg to a file Args: file_path: path of the output file \"\"\" dir_path = os . path . dirname ( file_path ) os . makedirs ( dir_path , exist_ok = True ) self . output_kg . serialize ( destination = file_path ) print ( f \"Executable KG saved in { file_path } \" )","title":"save_created_kg()"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG.start_pipeline_creation","text":"Handles the pipeline creation through CLI Parameters: Name Type Description Default pipeline_name str name for the pipeline required input_data_path str path for the input data to be used by the pipeline's tasks required Source code in exe_kg_lib\\classes\\exe_kg.py 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 def start_pipeline_creation ( self , pipeline_name : str , input_data_path : str ) -> None : \"\"\" Handles the pipeline creation through CLI Args: pipeline_name: name for the pipeline input_data_path: path for the input data to be used by the pipeline's tasks \"\"\" pipeline = create_pipeline_task ( self . top_level_schema . namespace , self . bottom_level_schema . namespace , self . pipeline , self . output_kg , pipeline_name , input_data_path , ) self . last_created_task = pipeline while True : next_task = self . _create_next_task_cli () if next_task is None : break self . _create_method ( next_task )","title":"start_pipeline_creation()"},{"location":"reference/classes/kg_schema/","text":"KGSchema \u00b6 Stores a Graph object and some metadata corresponding to a KG schema Source code in exe_kg_lib\\classes\\kg_schema.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class KGSchema : \"\"\" Stores a Graph object and some metadata corresponding to a KG schema \"\"\" def __init__ ( self , path : str , namespace : str , namespace_prefix : str ): self . path = path # path of the KG schema definition, can be local or remote self . namespace = Namespace ( namespace ) self . namespace_prefix = namespace_prefix self . kg = Graph ( bind_namespaces = \"rdflib\" ) self . kg . parse ( self . path , format = \"n3\" ) @classmethod def from_schema_info ( cls , schema_info : Dict [ str , str ]): return cls ( schema_info [ \"path\" ], schema_info [ \"namespace\" ], schema_info [ \"namespace_prefix\" ])","title":"kg_schema"},{"location":"reference/classes/kg_schema/#exe_kg_lib.classes.kg_schema.KGSchema","text":"Stores a Graph object and some metadata corresponding to a KG schema Source code in exe_kg_lib\\classes\\kg_schema.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class KGSchema : \"\"\" Stores a Graph object and some metadata corresponding to a KG schema \"\"\" def __init__ ( self , path : str , namespace : str , namespace_prefix : str ): self . path = path # path of the KG schema definition, can be local or remote self . namespace = Namespace ( namespace ) self . namespace_prefix = namespace_prefix self . kg = Graph ( bind_namespaces = \"rdflib\" ) self . kg . parse ( self . path , format = \"n3\" ) @classmethod def from_schema_info ( cls , schema_info : Dict [ str , str ]): return cls ( schema_info [ \"path\" ], schema_info [ \"namespace\" ], schema_info [ \"namespace_prefix\" ])","title":"KGSchema"},{"location":"reference/classes/task/","text":"Task \u00b6 Bases: Entity Abstraction of owl:class Task. \u2757 Important for contributors \u2757 The fields that contain \"_\" are by convention the snake-case conversions of the equivalent camel-case property names in the KG. e.g. has_next_task field corresponds to hasNextTask property in the KG. This is necessary for automatically mapping KG properties to Python object fields while parsing the KG. Source code in exe_kg_lib\\classes\\task.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 class Task ( Entity ): \"\"\" Abstraction of owl:class Task. \u2757 Important for contributors \u2757 The fields that contain \"_\" are by convention the snake-case conversions of the equivalent camel-case property names in the KG. e.g. has_next_task field corresponds to hasNextTask property in the KG. This is necessary for automatically mapping KG properties to Python object fields while parsing the KG. \"\"\" def __init__ ( self , iri : str , parent_entity : Entity = None , ): super () . __init__ ( iri , parent_entity ) self . has_next_task = None self . has_method = None self . has_input = [] self . has_output = [] self . input_dict = {} # used for storing input DataEntity objects during KG creation self . output_dict = {} # used for storing output DataEntity objects during KG creation @classmethod def from_entity ( cls , entity : Entity ): return cls ( entity . iri , entity . parent_entity ) def create_output_dict ( self , keyword_value_dict : dict ) -> dict : \"\"\" For each key in keyword_value_dict, checks if the key exists in an output name of the Task. If yes, adds the output name with its value to out_dict. Args: keyword_value_dict: key-value pairs where key is a keyword to find in an output name of the Task and value is the value corresponding to that output name Returns: dict: pairs of Task's output names and corresponding output values \"\"\" if len ( self . has_output ) == 0 : # assume one output and use task name as key return { self . name : list ( keyword_value_dict . values ())[ 0 ]} output_names = [ has_output_elem . name for has_output_elem in self . has_output ] out_dict = {} for output_name in output_names : for key , value in keyword_value_dict . items (): if key in output_name : out_dict [ output_name ] = value return out_dict def get_inputs ( self , dict_to_search : dict , fallback_df : pd . DataFrame ) -> Dict [ str , np . ndarray ]: \"\"\" Tries to match the Task's input names with the keys of dict_to_search and fills input_dict list with their corresponding values. If the matches fail, it retrieves columns of the provided fallback_df Args: dict_to_search: contains key-value pairs where key is a possible input name and value is its corresponding value fallback_df: contains data to return as an alternative Returns: Dict[str, np.ndarray]: pairs of input entity types and corresponding input values \"\"\" input_dict = {} for input in self . has_input : try : input_dict [ input . type ] = dict_to_search [ input . has_reference ] except KeyError : input_dict [ input . type ] = fallback_df [ input . has_source ] return input_dict @abstractmethod def run_method ( self , * args ): \"\"\" Abstract method to be implemented by Task sub-classes that are in the bottom of the hierarchy. Executes the logic that is needed to fulfill the Task. Args: *args: defined by sub-classes \"\"\" raise NotImplementedError create_output_dict ( keyword_value_dict ) \u00b6 For each key in keyword_value_dict, checks if the key exists in an output name of the Task. If yes, adds the output name with its value to out_dict. Parameters: Name Type Description Default keyword_value_dict dict key-value pairs where key is a keyword to find in an output name of the Task and value is the value corresponding to that output name required Returns: Name Type Description dict dict pairs of Task's output names and corresponding output values Source code in exe_kg_lib\\classes\\task.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def create_output_dict ( self , keyword_value_dict : dict ) -> dict : \"\"\" For each key in keyword_value_dict, checks if the key exists in an output name of the Task. If yes, adds the output name with its value to out_dict. Args: keyword_value_dict: key-value pairs where key is a keyword to find in an output name of the Task and value is the value corresponding to that output name Returns: dict: pairs of Task's output names and corresponding output values \"\"\" if len ( self . has_output ) == 0 : # assume one output and use task name as key return { self . name : list ( keyword_value_dict . values ())[ 0 ]} output_names = [ has_output_elem . name for has_output_elem in self . has_output ] out_dict = {} for output_name in output_names : for key , value in keyword_value_dict . items (): if key in output_name : out_dict [ output_name ] = value return out_dict get_inputs ( dict_to_search , fallback_df ) \u00b6 Tries to match the Task's input names with the keys of dict_to_search and fills input_dict list with their corresponding values. If the matches fail, it retrieves columns of the provided fallback_df Parameters: Name Type Description Default dict_to_search dict contains key-value pairs where key is a possible input name and value is its corresponding value required fallback_df pd . DataFrame contains data to return as an alternative required Returns: Type Description Dict [ str , np . ndarray ] Dict[str, np.ndarray]: pairs of input entity types and corresponding input values Source code in exe_kg_lib\\classes\\task.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 def get_inputs ( self , dict_to_search : dict , fallback_df : pd . DataFrame ) -> Dict [ str , np . ndarray ]: \"\"\" Tries to match the Task's input names with the keys of dict_to_search and fills input_dict list with their corresponding values. If the matches fail, it retrieves columns of the provided fallback_df Args: dict_to_search: contains key-value pairs where key is a possible input name and value is its corresponding value fallback_df: contains data to return as an alternative Returns: Dict[str, np.ndarray]: pairs of input entity types and corresponding input values \"\"\" input_dict = {} for input in self . has_input : try : input_dict [ input . type ] = dict_to_search [ input . has_reference ] except KeyError : input_dict [ input . type ] = fallback_df [ input . has_source ] return input_dict run_method ( * args ) abstractmethod \u00b6 Abstract method to be implemented by Task sub-classes that are in the bottom of the hierarchy. Executes the logic that is needed to fulfill the Task. Parameters: Name Type Description Default *args defined by sub-classes () Source code in exe_kg_lib\\classes\\task.py 82 83 84 85 86 87 88 89 90 @abstractmethod def run_method ( self , * args ): \"\"\" Abstract method to be implemented by Task sub-classes that are in the bottom of the hierarchy. Executes the logic that is needed to fulfill the Task. Args: *args: defined by sub-classes \"\"\" raise NotImplementedError","title":"task"},{"location":"reference/classes/task/#exe_kg_lib.classes.task.Task","text":"Bases: Entity Abstraction of owl:class Task. \u2757 Important for contributors \u2757 The fields that contain \"_\" are by convention the snake-case conversions of the equivalent camel-case property names in the KG. e.g. has_next_task field corresponds to hasNextTask property in the KG. This is necessary for automatically mapping KG properties to Python object fields while parsing the KG. Source code in exe_kg_lib\\classes\\task.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 class Task ( Entity ): \"\"\" Abstraction of owl:class Task. \u2757 Important for contributors \u2757 The fields that contain \"_\" are by convention the snake-case conversions of the equivalent camel-case property names in the KG. e.g. has_next_task field corresponds to hasNextTask property in the KG. This is necessary for automatically mapping KG properties to Python object fields while parsing the KG. \"\"\" def __init__ ( self , iri : str , parent_entity : Entity = None , ): super () . __init__ ( iri , parent_entity ) self . has_next_task = None self . has_method = None self . has_input = [] self . has_output = [] self . input_dict = {} # used for storing input DataEntity objects during KG creation self . output_dict = {} # used for storing output DataEntity objects during KG creation @classmethod def from_entity ( cls , entity : Entity ): return cls ( entity . iri , entity . parent_entity ) def create_output_dict ( self , keyword_value_dict : dict ) -> dict : \"\"\" For each key in keyword_value_dict, checks if the key exists in an output name of the Task. If yes, adds the output name with its value to out_dict. Args: keyword_value_dict: key-value pairs where key is a keyword to find in an output name of the Task and value is the value corresponding to that output name Returns: dict: pairs of Task's output names and corresponding output values \"\"\" if len ( self . has_output ) == 0 : # assume one output and use task name as key return { self . name : list ( keyword_value_dict . values ())[ 0 ]} output_names = [ has_output_elem . name for has_output_elem in self . has_output ] out_dict = {} for output_name in output_names : for key , value in keyword_value_dict . items (): if key in output_name : out_dict [ output_name ] = value return out_dict def get_inputs ( self , dict_to_search : dict , fallback_df : pd . DataFrame ) -> Dict [ str , np . ndarray ]: \"\"\" Tries to match the Task's input names with the keys of dict_to_search and fills input_dict list with their corresponding values. If the matches fail, it retrieves columns of the provided fallback_df Args: dict_to_search: contains key-value pairs where key is a possible input name and value is its corresponding value fallback_df: contains data to return as an alternative Returns: Dict[str, np.ndarray]: pairs of input entity types and corresponding input values \"\"\" input_dict = {} for input in self . has_input : try : input_dict [ input . type ] = dict_to_search [ input . has_reference ] except KeyError : input_dict [ input . type ] = fallback_df [ input . has_source ] return input_dict @abstractmethod def run_method ( self , * args ): \"\"\" Abstract method to be implemented by Task sub-classes that are in the bottom of the hierarchy. Executes the logic that is needed to fulfill the Task. Args: *args: defined by sub-classes \"\"\" raise NotImplementedError","title":"Task"},{"location":"reference/classes/task/#exe_kg_lib.classes.task.Task.create_output_dict","text":"For each key in keyword_value_dict, checks if the key exists in an output name of the Task. If yes, adds the output name with its value to out_dict. Parameters: Name Type Description Default keyword_value_dict dict key-value pairs where key is a keyword to find in an output name of the Task and value is the value corresponding to that output name required Returns: Name Type Description dict dict pairs of Task's output names and corresponding output values Source code in exe_kg_lib\\classes\\task.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 def create_output_dict ( self , keyword_value_dict : dict ) -> dict : \"\"\" For each key in keyword_value_dict, checks if the key exists in an output name of the Task. If yes, adds the output name with its value to out_dict. Args: keyword_value_dict: key-value pairs where key is a keyword to find in an output name of the Task and value is the value corresponding to that output name Returns: dict: pairs of Task's output names and corresponding output values \"\"\" if len ( self . has_output ) == 0 : # assume one output and use task name as key return { self . name : list ( keyword_value_dict . values ())[ 0 ]} output_names = [ has_output_elem . name for has_output_elem in self . has_output ] out_dict = {} for output_name in output_names : for key , value in keyword_value_dict . items (): if key in output_name : out_dict [ output_name ] = value return out_dict","title":"create_output_dict()"},{"location":"reference/classes/task/#exe_kg_lib.classes.task.Task.get_inputs","text":"Tries to match the Task's input names with the keys of dict_to_search and fills input_dict list with their corresponding values. If the matches fail, it retrieves columns of the provided fallback_df Parameters: Name Type Description Default dict_to_search dict contains key-value pairs where key is a possible input name and value is its corresponding value required fallback_df pd . DataFrame contains data to return as an alternative required Returns: Type Description Dict [ str , np . ndarray ] Dict[str, np.ndarray]: pairs of input entity types and corresponding input values Source code in exe_kg_lib\\classes\\task.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 def get_inputs ( self , dict_to_search : dict , fallback_df : pd . DataFrame ) -> Dict [ str , np . ndarray ]: \"\"\" Tries to match the Task's input names with the keys of dict_to_search and fills input_dict list with their corresponding values. If the matches fail, it retrieves columns of the provided fallback_df Args: dict_to_search: contains key-value pairs where key is a possible input name and value is its corresponding value fallback_df: contains data to return as an alternative Returns: Dict[str, np.ndarray]: pairs of input entity types and corresponding input values \"\"\" input_dict = {} for input in self . has_input : try : input_dict [ input . type ] = dict_to_search [ input . has_reference ] except KeyError : input_dict [ input . type ] = fallback_df [ input . has_source ] return input_dict","title":"get_inputs()"},{"location":"reference/classes/task/#exe_kg_lib.classes.task.Task.run_method","text":"Abstract method to be implemented by Task sub-classes that are in the bottom of the hierarchy. Executes the logic that is needed to fulfill the Task. Parameters: Name Type Description Default *args defined by sub-classes () Source code in exe_kg_lib\\classes\\task.py 82 83 84 85 86 87 88 89 90 @abstractmethod def run_method ( self , * args ): \"\"\" Abstract method to be implemented by Task sub-classes that are in the bottom of the hierarchy. Executes the logic that is needed to fulfill the Task. Args: *args: defined by sub-classes \"\"\" raise NotImplementedError","title":"run_method()"},{"location":"reference/classes/tasks/ml_tasks/","text":"","title":"ml_tasks"},{"location":"reference/classes/tasks/statistic_tasks/","text":"","title":"statistic_tasks"},{"location":"reference/classes/tasks/visual_tasks/","text":"","title":"visual_tasks"},{"location":"reference/cli/main/","text":"CLI entry point.","title":"main"},{"location":"reference/examples/simple_ml_kg/","text":"","title":"simple_ml_kg"},{"location":"reference/examples/simple_stats_kg/","text":"","title":"simple_stats_kg"},{"location":"reference/examples/simple_visu_kg/","text":"","title":"simple_visu_kg"},{"location":"reference/utils/cli_utils/","text":"get_input_for_existing_data_entities ( existing_data_entity_list ) \u00b6 Asks user to choose data entities from an existing list Parameters: Name Type Description Default existing_data_entity_list List [ DataEntity ] contains DataEntity objects for the user to choose from required Returns: Type Description List [ DataEntity ] List[DataEntity]: contains the chosen DataEntity objects Source code in exe_kg_lib\\utils\\cli_utils.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def get_input_for_existing_data_entities ( existing_data_entity_list : List [ DataEntity ], ) -> List [ DataEntity ]: \"\"\" Asks user to choose data entities from an existing list Args: existing_data_entity_list: contains DataEntity objects for the user to choose from Returns: List[DataEntity]: contains the chosen DataEntity objects \"\"\" if not existing_data_entity_list : return [] chosen_data_entity_list = [] print ( \"Choose input for the task from existing data entities:\" ) while True : for i , data_entity in enumerate ( existing_data_entity_list ): print ( f \" \\t { str ( i ) } . { data_entity . name } \" ) print ( f \" \\t { str ( - 1 ) } . Continue\" ) chosen_data_entity_i = int ( input ()) if chosen_data_entity_i == - 1 : break chosen_data_entity_list . append ( existing_data_entity_list [ chosen_data_entity_i ]) return chosen_data_entity_list get_input_for_new_data_entities ( data_semantics_list , data_structure_list , namespace , data_entity ) \u00b6 Asks user to specify info of new data entities and creates relevant objects Parameters: Name Type Description Default data_semantics_list List [ Entity ] contains data semantics for the user to choose from required data_structure_list List [ Entity ] contains data structures for the user to choose from required namespace Namespace KG schema namespace to use when initializing the new entities required data_entity Entity Entity object to assign as parent entity of the new entities required Returns: Type Description List [ DataEntity ] List[DataEntity]: contains the created DataEntity objects Source code in exe_kg_lib\\utils\\cli_utils.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 def get_input_for_new_data_entities ( data_semantics_list : List [ Entity ], data_structure_list : List [ Entity ], namespace : Namespace , data_entity : Entity ) -> List [ DataEntity ]: \"\"\" Asks user to specify info of new data entities and creates relevant objects Args: data_semantics_list: contains data semantics for the user to choose from data_structure_list: contains data structures for the user to choose from namespace: KG schema namespace to use when initializing the new entities data_entity: Entity object to assign as parent entity of the new entities Returns: List[DataEntity]: contains the created DataEntity objects \"\"\" data_entities = [] prompt = \"Enter input columns, then 'quit' when done: \" source = input ( prompt ) while source != \"quit\" : new_data_entity = DataEntity ( namespace + source , data_entity , source ) print ( f \"Choose data semantics for { source } :\" ) for i , t in enumerate ( data_semantics_list ): print ( f \" \\t { str ( i ) } . { t . name } \" ) chosen_data_semantics_id = int ( input ()) new_data_entity . has_data_semantics = data_semantics_list [ chosen_data_semantics_id ] . iri print ( f \"Choose data structure for { source } :\" ) for i , t in enumerate ( data_structure_list ): print ( f \" \\t { str ( i ) } . { t . name } \" ) chosen_data_structure_id = int ( input ()) new_data_entity . has_data_structure = data_structure_list [ chosen_data_structure_id ] . iri data_entities . append ( new_data_entity ) source = input ( prompt ) return data_entities input_pipeline_info () \u00b6 Asks user to provide a name for the pipeline and a path for the input data Returns: Type Description Tuple [ str , str ] Tuple[str, str]: contains the provided strings Source code in exe_kg_lib\\utils\\cli_utils.py 77 78 79 80 81 82 83 84 85 86 def input_pipeline_info () -> Tuple [ str , str ]: \"\"\" Asks user to provide a name for the pipeline and a path for the input data Returns: Tuple[str, str]: contains the provided strings \"\"\" pipeline_name = input ( \"Enter a name for the pipeline: \" ) input_data_path = input ( \"Enter a path for the input data: \" ) return pipeline_name , input_data_path","title":"cli_utils"},{"location":"reference/utils/cli_utils/#exe_kg_lib.utils.cli_utils.get_input_for_existing_data_entities","text":"Asks user to choose data entities from an existing list Parameters: Name Type Description Default existing_data_entity_list List [ DataEntity ] contains DataEntity objects for the user to choose from required Returns: Type Description List [ DataEntity ] List[DataEntity]: contains the chosen DataEntity objects Source code in exe_kg_lib\\utils\\cli_utils.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def get_input_for_existing_data_entities ( existing_data_entity_list : List [ DataEntity ], ) -> List [ DataEntity ]: \"\"\" Asks user to choose data entities from an existing list Args: existing_data_entity_list: contains DataEntity objects for the user to choose from Returns: List[DataEntity]: contains the chosen DataEntity objects \"\"\" if not existing_data_entity_list : return [] chosen_data_entity_list = [] print ( \"Choose input for the task from existing data entities:\" ) while True : for i , data_entity in enumerate ( existing_data_entity_list ): print ( f \" \\t { str ( i ) } . { data_entity . name } \" ) print ( f \" \\t { str ( - 1 ) } . Continue\" ) chosen_data_entity_i = int ( input ()) if chosen_data_entity_i == - 1 : break chosen_data_entity_list . append ( existing_data_entity_list [ chosen_data_entity_i ]) return chosen_data_entity_list","title":"get_input_for_existing_data_entities()"},{"location":"reference/utils/cli_utils/#exe_kg_lib.utils.cli_utils.get_input_for_new_data_entities","text":"Asks user to specify info of new data entities and creates relevant objects Parameters: Name Type Description Default data_semantics_list List [ Entity ] contains data semantics for the user to choose from required data_structure_list List [ Entity ] contains data structures for the user to choose from required namespace Namespace KG schema namespace to use when initializing the new entities required data_entity Entity Entity object to assign as parent entity of the new entities required Returns: Type Description List [ DataEntity ] List[DataEntity]: contains the created DataEntity objects Source code in exe_kg_lib\\utils\\cli_utils.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 def get_input_for_new_data_entities ( data_semantics_list : List [ Entity ], data_structure_list : List [ Entity ], namespace : Namespace , data_entity : Entity ) -> List [ DataEntity ]: \"\"\" Asks user to specify info of new data entities and creates relevant objects Args: data_semantics_list: contains data semantics for the user to choose from data_structure_list: contains data structures for the user to choose from namespace: KG schema namespace to use when initializing the new entities data_entity: Entity object to assign as parent entity of the new entities Returns: List[DataEntity]: contains the created DataEntity objects \"\"\" data_entities = [] prompt = \"Enter input columns, then 'quit' when done: \" source = input ( prompt ) while source != \"quit\" : new_data_entity = DataEntity ( namespace + source , data_entity , source ) print ( f \"Choose data semantics for { source } :\" ) for i , t in enumerate ( data_semantics_list ): print ( f \" \\t { str ( i ) } . { t . name } \" ) chosen_data_semantics_id = int ( input ()) new_data_entity . has_data_semantics = data_semantics_list [ chosen_data_semantics_id ] . iri print ( f \"Choose data structure for { source } :\" ) for i , t in enumerate ( data_structure_list ): print ( f \" \\t { str ( i ) } . { t . name } \" ) chosen_data_structure_id = int ( input ()) new_data_entity . has_data_structure = data_structure_list [ chosen_data_structure_id ] . iri data_entities . append ( new_data_entity ) source = input ( prompt ) return data_entities","title":"get_input_for_new_data_entities()"},{"location":"reference/utils/cli_utils/#exe_kg_lib.utils.cli_utils.input_pipeline_info","text":"Asks user to provide a name for the pipeline and a path for the input data Returns: Type Description Tuple [ str , str ] Tuple[str, str]: contains the provided strings Source code in exe_kg_lib\\utils\\cli_utils.py 77 78 79 80 81 82 83 84 85 86 def input_pipeline_info () -> Tuple [ str , str ]: \"\"\" Asks user to provide a name for the pipeline and a path for the input data Returns: Tuple[str, str]: contains the provided strings \"\"\" pipeline_name = input ( \"Enter a name for the pipeline: \" ) input_data_path = input ( \"Enter a path for the input data: \" ) return pipeline_name , input_data_path","title":"input_pipeline_info()"},{"location":"reference/utils/kg_creation_utils/","text":"add_and_attach_data_entity ( kg , data , top_level_kg , top_level_schema_namespace , data_entity , relation , task_entity ) \u00b6 Adds data entity instance to kg with the necessary relations, and attaches it to the given task Parameters: Name Type Description Default kg Graph Graph object to add to required data Entity object representing top-level DataEntity class in KG required top_level_kg Graph KG corresponding to the top-level KG schema required top_level_schema_namespace Namespace namespace of the top-level KG schema required data_entity DataEntity data entity to add required relation URIRef IRI of relation to add required task_entity Task task to attach the data entity to required Source code in exe_kg_lib\\utils\\kg_creation_utils.py 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 def add_and_attach_data_entity ( kg : Graph , data : Entity , top_level_kg : Graph , top_level_schema_namespace : Namespace , data_entity : DataEntity , relation : URIRef , task_entity : Task , ) -> None : \"\"\" Adds data entity instance to kg with the necessary relations, and attaches it to the given task Args: kg: Graph object to add to data: object representing top-level DataEntity class in KG top_level_kg: KG corresponding to the top-level KG schema top_level_schema_namespace: namespace of the top-level KG schema data_entity: data entity to add relation: IRI of relation to add task_entity: task to attach the data entity to \"\"\" add_data_entity_instance ( kg , data , top_level_kg , top_level_schema_namespace , data_entity ) add_relation ( kg , task_entity , relation , data_entity ) add_data_entity_instance ( kg , data , top_level_kg , top_level_schema_namespace , data_entity ) \u00b6 Adds data entity instance to kg with the necessary relations Parameters: Name Type Description Default kg Graph Graph object to add to required data Entity object representing top-level DataEntity class in KG required top_level_kg Graph KG corresponding to the top-level KG schema required top_level_schema_namespace Namespace namespace of the top-level KG schema required data_entity DataEntity data entity to add required Source code in exe_kg_lib\\utils\\kg_creation_utils.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 def add_data_entity_instance ( kg : Graph , data : Entity , top_level_kg : Graph , top_level_schema_namespace : Namespace , data_entity : DataEntity , ) -> None : \"\"\" Adds data entity instance to kg with the necessary relations Args: kg: Graph object to add to data: object representing top-level DataEntity class in KG top_level_kg: KG corresponding to the top-level KG schema top_level_schema_namespace: namespace of the top-level KG schema data_entity: data entity to add \"\"\" add_instance ( kg , data_entity ) if data_entity . has_source : has_source_iri , range_iri = get_first_query_result_if_exists ( get_data_properties_by_entity_iri , data . iri , top_level_kg ) source_literal = Literal ( lexical_or_value = data_entity . has_source , datatype = range_iri , ) add_literal ( kg , data_entity , has_source_iri , source_literal ) if data_entity . has_data_structure : add_relation ( kg , data_entity , top_level_schema_namespace . hasDataStructure , Entity ( data_entity . has_data_structure ), ) if data_entity . has_data_semantics : add_relation ( kg , data_entity , top_level_schema_namespace . hasDataSemantics , Entity ( data_entity . has_data_semantics ), ) if data_entity . has_reference : add_relation ( kg , data_entity , top_level_schema_namespace . hasReference , Entity ( data_entity . has_reference ), ) add_instance ( kg , entity_instance ) \u00b6 Adds entity instance to KG only if its parent entity exists and there is no instance with the same IRI Parameters: Name Type Description Default kg Graph Graph object to add to required entity_instance Entity the entity instance to create required Source code in exe_kg_lib\\utils\\kg_creation_utils.py 10 11 12 13 14 15 16 17 18 def add_instance ( kg : Graph , entity_instance : Entity ) -> None : \"\"\" Adds entity instance to KG only if its parent entity exists and there is no instance with the same IRI Args: kg: Graph object to add to entity_instance: the entity instance to create \"\"\" if entity_instance . parent_entity and ( entity_instance . iri , None , None ) not in kg : kg . add (( entity_instance . iri , RDF . type , entity_instance . parent_entity . iri )) add_instance_from_parent_with_relation ( namespace , kg , parent_entity , relation_iri , related_entity , instance_name ) \u00b6 Creates an entity object based on the arguments and calls add_instance() and add_relation() to create a new entity instance and relation Parameters: Name Type Description Default namespace Namespace namespace for the new instance required kg Graph Graph object to add to required parent_entity Entity parent entity for the new instance required relation_iri str IRI that connects the given related_entity with the new instance required related_entity Entity relation source required instance_name str name for the new instance required Returns: Name Type Description Entity Entity object containing the new entity instance's basic info Source code in exe_kg_lib\\utils\\kg_creation_utils.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 def add_instance_from_parent_with_relation ( namespace : Namespace , kg : Graph , parent_entity : Entity , relation_iri : str , related_entity : Entity , instance_name : str , ) -> Entity : \"\"\" Creates an entity object based on the arguments and calls add_instance() and add_relation() to create a new entity instance and relation Args: namespace: namespace for the new instance kg: Graph object to add to parent_entity: parent entity for the new instance relation_iri: IRI that connects the given related_entity with the new instance related_entity: relation source instance_name: name for the new instance Returns: Entity: object containing the new entity instance's basic info \"\"\" entity_iri = namespace + instance_name instance = Entity ( entity_iri , parent_entity ) add_instance ( kg , instance ) add_relation ( kg , related_entity , relation_iri , instance ) return instance add_literal ( kg , from_entity , relation_iri , literal ) \u00b6 Adds relation between a given entity and a given literal to KG Parameters: Name Type Description Default kg Graph Graph object to add to required from_entity Entity relation source required relation_iri str IRI that connects the given entity with the given literal required literal Literal literal to add to Graph object required Source code in exe_kg_lib\\utils\\kg_creation_utils.py 39 40 41 42 43 44 45 46 47 48 def add_literal ( kg : Graph , from_entity : Entity , relation_iri : str , literal : Literal ) -> None : \"\"\" Adds relation between a given entity and a given literal to KG Args: kg: Graph object to add to from_entity: relation source relation_iri: IRI that connects the given entity with the given literal literal: literal to add to Graph object \"\"\" kg . add (( from_entity . iri , URIRef ( relation_iri ), literal )) add_relation ( kg , from_entity , relation_iri , to_entity ) \u00b6 Adds relation between 2 given entities to KG Parameters: Name Type Description Default kg Graph Graph object to add to required from_entity Entity relation source required relation_iri str IRI that connects the 2 given entities required to_entity Entity relation destination required Source code in exe_kg_lib\\utils\\kg_creation_utils.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def add_relation ( kg : Graph , from_entity : Entity , relation_iri : str , to_entity : Entity ) -> None : \"\"\" Adds relation between 2 given entities to KG Args: kg: Graph object to add to from_entity: relation source relation_iri: IRI that connects the 2 given entities to_entity: relation destination \"\"\" kg . add ( ( from_entity . iri , URIRef ( relation_iri ), to_entity . iri , ) ) create_pipeline_task ( top_level_schema_namespace , bottom_level_schema_namespace , parent_entity , kg , pipeline_name , input_data_path ) \u00b6 Adds instance of pipeline task to kg Parameters: Name Type Description Default top_level_schema_namespace Namespace namespace of the top-level KG schema required bottom_level_schema_namespace Namespace namespace of the bottom-level KG schema required parent_entity Entity parent entity of pipeline instance required kg Graph Graph object to add to required pipeline_name str name for the pipeline required input_data_path str path for the input data to be used by the pipeline's tasks required Returns: Name Type Description Task Task created pipeline task Source code in exe_kg_lib\\utils\\kg_creation_utils.py 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 def create_pipeline_task ( top_level_schema_namespace : Namespace , bottom_level_schema_namespace : Namespace , parent_entity : Entity , kg : Graph , pipeline_name : str , input_data_path : str , ) -> Task : \"\"\" Adds instance of pipeline task to kg Args: top_level_schema_namespace: namespace of the top-level KG schema bottom_level_schema_namespace: namespace of the bottom-level KG schema parent_entity: parent entity of pipeline instance kg: Graph object to add to pipeline_name: name for the pipeline input_data_path: path for the input data to be used by the pipeline's tasks Returns: Task: created pipeline task \"\"\" pipeline = Task ( bottom_level_schema_namespace + pipeline_name , parent_entity ) add_instance ( kg , pipeline ) input_data_path_literal = Literal ( lexical_or_value = input_data_path , datatype = XSD . string ) add_literal ( kg , pipeline , top_level_schema_namespace . hasInputDataPath , input_data_path_literal ) return pipeline name_instance ( task_type_dict , method_type_dict , parent_entity ) \u00b6 Creates a unique name for a new instance by concatenating the parent entity's name (which is the instance type) with a number Also increments the relevant number of the corresponding dict Parameters: Name Type Description Default task_type_dict Dict [ str , int ] contains pairs of task types and numbers required method_type_dict Dict [ str , int ] contains pairs of method types and numbers required parent_entity Entity instance's parent entity required Returns: Name Type Description str Union [None, str ] name to be given to the new instance None Union [None, str ] if the type of the given parent entity is not equal with \"AtomicTask\" or \"AtomicMethod\" Source code in exe_kg_lib\\utils\\kg_creation_utils.py 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 def name_instance ( task_type_dict : Dict [ str , int ], method_type_dict : Dict [ str , int ], parent_entity : Entity , ) -> Union [ None , str ]: \"\"\" Creates a unique name for a new instance by concatenating the parent entity's name (which is the instance type) with a number Also increments the relevant number of the corresponding dict Args: task_type_dict: contains pairs of task types and numbers method_type_dict: contains pairs of method types and numbers parent_entity: instance's parent entity Returns: str: name to be given to the new instance None: if the type of the given parent entity is not equal with \"AtomicTask\" or \"AtomicMethod\" \"\"\" if parent_entity . type == \"AtomicTask\" : entity_type_dict = task_type_dict elif parent_entity . type == \"AtomicMethod\" : entity_type_dict = method_type_dict else : print ( \"Error: Invalid parent entity type\" ) return None instance_name = parent_entity . name + str ( entity_type_dict [ parent_entity . name ]) entity_type_dict [ parent_entity . name ] += 1 return instance_name","title":"kg_creation_utils"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.add_and_attach_data_entity","text":"Adds data entity instance to kg with the necessary relations, and attaches it to the given task Parameters: Name Type Description Default kg Graph Graph object to add to required data Entity object representing top-level DataEntity class in KG required top_level_kg Graph KG corresponding to the top-level KG schema required top_level_schema_namespace Namespace namespace of the top-level KG schema required data_entity DataEntity data entity to add required relation URIRef IRI of relation to add required task_entity Task task to attach the data entity to required Source code in exe_kg_lib\\utils\\kg_creation_utils.py 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 def add_and_attach_data_entity ( kg : Graph , data : Entity , top_level_kg : Graph , top_level_schema_namespace : Namespace , data_entity : DataEntity , relation : URIRef , task_entity : Task , ) -> None : \"\"\" Adds data entity instance to kg with the necessary relations, and attaches it to the given task Args: kg: Graph object to add to data: object representing top-level DataEntity class in KG top_level_kg: KG corresponding to the top-level KG schema top_level_schema_namespace: namespace of the top-level KG schema data_entity: data entity to add relation: IRI of relation to add task_entity: task to attach the data entity to \"\"\" add_data_entity_instance ( kg , data , top_level_kg , top_level_schema_namespace , data_entity ) add_relation ( kg , task_entity , relation , data_entity )","title":"add_and_attach_data_entity()"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.add_data_entity_instance","text":"Adds data entity instance to kg with the necessary relations Parameters: Name Type Description Default kg Graph Graph object to add to required data Entity object representing top-level DataEntity class in KG required top_level_kg Graph KG corresponding to the top-level KG schema required top_level_schema_namespace Namespace namespace of the top-level KG schema required data_entity DataEntity data entity to add required Source code in exe_kg_lib\\utils\\kg_creation_utils.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 def add_data_entity_instance ( kg : Graph , data : Entity , top_level_kg : Graph , top_level_schema_namespace : Namespace , data_entity : DataEntity , ) -> None : \"\"\" Adds data entity instance to kg with the necessary relations Args: kg: Graph object to add to data: object representing top-level DataEntity class in KG top_level_kg: KG corresponding to the top-level KG schema top_level_schema_namespace: namespace of the top-level KG schema data_entity: data entity to add \"\"\" add_instance ( kg , data_entity ) if data_entity . has_source : has_source_iri , range_iri = get_first_query_result_if_exists ( get_data_properties_by_entity_iri , data . iri , top_level_kg ) source_literal = Literal ( lexical_or_value = data_entity . has_source , datatype = range_iri , ) add_literal ( kg , data_entity , has_source_iri , source_literal ) if data_entity . has_data_structure : add_relation ( kg , data_entity , top_level_schema_namespace . hasDataStructure , Entity ( data_entity . has_data_structure ), ) if data_entity . has_data_semantics : add_relation ( kg , data_entity , top_level_schema_namespace . hasDataSemantics , Entity ( data_entity . has_data_semantics ), ) if data_entity . has_reference : add_relation ( kg , data_entity , top_level_schema_namespace . hasReference , Entity ( data_entity . has_reference ), )","title":"add_data_entity_instance()"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.add_instance","text":"Adds entity instance to KG only if its parent entity exists and there is no instance with the same IRI Parameters: Name Type Description Default kg Graph Graph object to add to required entity_instance Entity the entity instance to create required Source code in exe_kg_lib\\utils\\kg_creation_utils.py 10 11 12 13 14 15 16 17 18 def add_instance ( kg : Graph , entity_instance : Entity ) -> None : \"\"\" Adds entity instance to KG only if its parent entity exists and there is no instance with the same IRI Args: kg: Graph object to add to entity_instance: the entity instance to create \"\"\" if entity_instance . parent_entity and ( entity_instance . iri , None , None ) not in kg : kg . add (( entity_instance . iri , RDF . type , entity_instance . parent_entity . iri ))","title":"add_instance()"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.add_instance_from_parent_with_relation","text":"Creates an entity object based on the arguments and calls add_instance() and add_relation() to create a new entity instance and relation Parameters: Name Type Description Default namespace Namespace namespace for the new instance required kg Graph Graph object to add to required parent_entity Entity parent entity for the new instance required relation_iri str IRI that connects the given related_entity with the new instance required related_entity Entity relation source required instance_name str name for the new instance required Returns: Name Type Description Entity Entity object containing the new entity instance's basic info Source code in exe_kg_lib\\utils\\kg_creation_utils.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 def add_instance_from_parent_with_relation ( namespace : Namespace , kg : Graph , parent_entity : Entity , relation_iri : str , related_entity : Entity , instance_name : str , ) -> Entity : \"\"\" Creates an entity object based on the arguments and calls add_instance() and add_relation() to create a new entity instance and relation Args: namespace: namespace for the new instance kg: Graph object to add to parent_entity: parent entity for the new instance relation_iri: IRI that connects the given related_entity with the new instance related_entity: relation source instance_name: name for the new instance Returns: Entity: object containing the new entity instance's basic info \"\"\" entity_iri = namespace + instance_name instance = Entity ( entity_iri , parent_entity ) add_instance ( kg , instance ) add_relation ( kg , related_entity , relation_iri , instance ) return instance","title":"add_instance_from_parent_with_relation()"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.add_literal","text":"Adds relation between a given entity and a given literal to KG Parameters: Name Type Description Default kg Graph Graph object to add to required from_entity Entity relation source required relation_iri str IRI that connects the given entity with the given literal required literal Literal literal to add to Graph object required Source code in exe_kg_lib\\utils\\kg_creation_utils.py 39 40 41 42 43 44 45 46 47 48 def add_literal ( kg : Graph , from_entity : Entity , relation_iri : str , literal : Literal ) -> None : \"\"\" Adds relation between a given entity and a given literal to KG Args: kg: Graph object to add to from_entity: relation source relation_iri: IRI that connects the given entity with the given literal literal: literal to add to Graph object \"\"\" kg . add (( from_entity . iri , URIRef ( relation_iri ), literal ))","title":"add_literal()"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.add_relation","text":"Adds relation between 2 given entities to KG Parameters: Name Type Description Default kg Graph Graph object to add to required from_entity Entity relation source required relation_iri str IRI that connects the 2 given entities required to_entity Entity relation destination required Source code in exe_kg_lib\\utils\\kg_creation_utils.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 def add_relation ( kg : Graph , from_entity : Entity , relation_iri : str , to_entity : Entity ) -> None : \"\"\" Adds relation between 2 given entities to KG Args: kg: Graph object to add to from_entity: relation source relation_iri: IRI that connects the 2 given entities to_entity: relation destination \"\"\" kg . add ( ( from_entity . iri , URIRef ( relation_iri ), to_entity . iri , ) )","title":"add_relation()"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.create_pipeline_task","text":"Adds instance of pipeline task to kg Parameters: Name Type Description Default top_level_schema_namespace Namespace namespace of the top-level KG schema required bottom_level_schema_namespace Namespace namespace of the bottom-level KG schema required parent_entity Entity parent entity of pipeline instance required kg Graph Graph object to add to required pipeline_name str name for the pipeline required input_data_path str path for the input data to be used by the pipeline's tasks required Returns: Name Type Description Task Task created pipeline task Source code in exe_kg_lib\\utils\\kg_creation_utils.py 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 def create_pipeline_task ( top_level_schema_namespace : Namespace , bottom_level_schema_namespace : Namespace , parent_entity : Entity , kg : Graph , pipeline_name : str , input_data_path : str , ) -> Task : \"\"\" Adds instance of pipeline task to kg Args: top_level_schema_namespace: namespace of the top-level KG schema bottom_level_schema_namespace: namespace of the bottom-level KG schema parent_entity: parent entity of pipeline instance kg: Graph object to add to pipeline_name: name for the pipeline input_data_path: path for the input data to be used by the pipeline's tasks Returns: Task: created pipeline task \"\"\" pipeline = Task ( bottom_level_schema_namespace + pipeline_name , parent_entity ) add_instance ( kg , pipeline ) input_data_path_literal = Literal ( lexical_or_value = input_data_path , datatype = XSD . string ) add_literal ( kg , pipeline , top_level_schema_namespace . hasInputDataPath , input_data_path_literal ) return pipeline","title":"create_pipeline_task()"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.name_instance","text":"Creates a unique name for a new instance by concatenating the parent entity's name (which is the instance type) with a number Also increments the relevant number of the corresponding dict Parameters: Name Type Description Default task_type_dict Dict [ str , int ] contains pairs of task types and numbers required method_type_dict Dict [ str , int ] contains pairs of method types and numbers required parent_entity Entity instance's parent entity required Returns: Name Type Description str Union [None, str ] name to be given to the new instance None Union [None, str ] if the type of the given parent entity is not equal with \"AtomicTask\" or \"AtomicMethod\" Source code in exe_kg_lib\\utils\\kg_creation_utils.py 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 def name_instance ( task_type_dict : Dict [ str , int ], method_type_dict : Dict [ str , int ], parent_entity : Entity , ) -> Union [ None , str ]: \"\"\" Creates a unique name for a new instance by concatenating the parent entity's name (which is the instance type) with a number Also increments the relevant number of the corresponding dict Args: task_type_dict: contains pairs of task types and numbers method_type_dict: contains pairs of method types and numbers parent_entity: instance's parent entity Returns: str: name to be given to the new instance None: if the type of the given parent entity is not equal with \"AtomicTask\" or \"AtomicMethod\" \"\"\" if parent_entity . type == \"AtomicTask\" : entity_type_dict = task_type_dict elif parent_entity . type == \"AtomicMethod\" : entity_type_dict = method_type_dict else : print ( \"Error: Invalid parent entity type\" ) return None instance_name = parent_entity . name + str ( entity_type_dict [ parent_entity . name ]) entity_type_dict [ parent_entity . name ] += 1 return instance_name","title":"name_instance()"},{"location":"reference/utils/query_utils/","text":"get_data_properties_plus_inherited_by_class_iri ( kg , entity_iri ) \u00b6 Retrieves data properties plus the inherited ones, given an entity IRI Parameters: Name Type Description Default kg Graph Graph object to use when querying required entity_iri str IRI of entity to query required Returns: Name Type Description List List contains rows of data property IRIs and their range Source code in exe_kg_lib\\utils\\query_utils.py 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 def get_data_properties_plus_inherited_by_class_iri ( kg : Graph , entity_iri : str ) -> List : \"\"\" Retrieves data properties plus the inherited ones, given an entity IRI Args: kg: Graph object to use when querying entity_iri: IRI of entity to query Returns: List: contains rows of data property IRIs and their range \"\"\" property_list = list ( get_data_properties_by_entity_iri ( entity_iri , kg )) method_parent_classes = list ( query_method_parent_classes ( kg , entity_iri )) for method_class_result_row in method_parent_classes : property_list += list ( get_data_properties_by_entity_iri ( method_class_result_row [ 0 ], kg )) return property_list get_method_by_task_iri ( kg , namespace_prefix , namespace , task_iri ) \u00b6 Retrieves a task's method, given a task IRI Parameters: Name Type Description Default kg Graph Graph object to use when querying required namespace_prefix str namespace prefix to use when querying required namespace Namespace namespace to use when querying required task_iri str IRI of task to query required Returns: Type Description Optional [ Entity ] Optional[Entity]: object containing found method's basic info is equal to None if method IRI wasn't found in KG Source code in exe_kg_lib\\utils\\query_utils.py 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 def get_method_by_task_iri ( kg : Graph , namespace_prefix : str , namespace : Namespace , task_iri : str , ) -> Optional [ Entity ]: \"\"\" Retrieves a task's method, given a task IRI Args: kg: Graph object to use when querying namespace_prefix: namespace prefix to use when querying namespace: namespace to use when querying task_iri: IRI of task to query Returns: Optional[Entity]: object containing found method's basic info is equal to None if method IRI wasn't found in KG \"\"\" query_result = get_first_query_result_if_exists ( query_method_iri_by_task_iri , kg , namespace_prefix , task_iri , ) if query_result is None : return None method_iri = str ( query_result [ 0 ]) query_result = get_first_query_result_if_exists ( query_entity_parent_iri , kg , method_iri , namespace . AtomicMethod , ) if query_result is None : return None method_parent_iri = str ( query_result [ 0 ]) return Entity ( method_iri , Entity ( method_parent_iri )) get_pipeline_and_first_task_iri ( kg , namespace_prefix ) \u00b6 Retrieves the necessary information needed to start parsing a pipeline Parameters: Name Type Description Default kg Graph Graph object to use when querying required namespace_prefix str namespace prefix to use when querying required Returns: Type Description Tuple [ str , str , str ] Tuple[str, str, str]: contains the pipeline IRI, the input data path and the first task's IRI Source code in exe_kg_lib\\utils\\query_utils.py 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 def get_pipeline_and_first_task_iri ( kg : Graph , namespace_prefix : str ) -> Tuple [ str , str , str ]: \"\"\" Retrieves the necessary information needed to start parsing a pipeline Args: kg: Graph object to use when querying namespace_prefix: namespace prefix to use when querying Returns: Tuple[str, str, str]: contains the pipeline IRI, the input data path and the first task's IRI \"\"\" # assume one pipeline per file query_result = get_first_query_result_if_exists ( query_pipeline_info , kg , namespace_prefix , ) if query_result is None : print ( \"Error: Pipeline info not found\" ) exit ( 1 ) pipeline_iri , input_data_path , task_iri = query_result return str ( pipeline_iri ), str ( input_data_path ), str ( task_iri )","title":"query_utils"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.get_data_properties_plus_inherited_by_class_iri","text":"Retrieves data properties plus the inherited ones, given an entity IRI Parameters: Name Type Description Default kg Graph Graph object to use when querying required entity_iri str IRI of entity to query required Returns: Name Type Description List List contains rows of data property IRIs and their range Source code in exe_kg_lib\\utils\\query_utils.py 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 def get_data_properties_plus_inherited_by_class_iri ( kg : Graph , entity_iri : str ) -> List : \"\"\" Retrieves data properties plus the inherited ones, given an entity IRI Args: kg: Graph object to use when querying entity_iri: IRI of entity to query Returns: List: contains rows of data property IRIs and their range \"\"\" property_list = list ( get_data_properties_by_entity_iri ( entity_iri , kg )) method_parent_classes = list ( query_method_parent_classes ( kg , entity_iri )) for method_class_result_row in method_parent_classes : property_list += list ( get_data_properties_by_entity_iri ( method_class_result_row [ 0 ], kg )) return property_list","title":"get_data_properties_plus_inherited_by_class_iri()"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.get_method_by_task_iri","text":"Retrieves a task's method, given a task IRI Parameters: Name Type Description Default kg Graph Graph object to use when querying required namespace_prefix str namespace prefix to use when querying required namespace Namespace namespace to use when querying required task_iri str IRI of task to query required Returns: Type Description Optional [ Entity ] Optional[Entity]: object containing found method's basic info is equal to None if method IRI wasn't found in KG Source code in exe_kg_lib\\utils\\query_utils.py 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 def get_method_by_task_iri ( kg : Graph , namespace_prefix : str , namespace : Namespace , task_iri : str , ) -> Optional [ Entity ]: \"\"\" Retrieves a task's method, given a task IRI Args: kg: Graph object to use when querying namespace_prefix: namespace prefix to use when querying namespace: namespace to use when querying task_iri: IRI of task to query Returns: Optional[Entity]: object containing found method's basic info is equal to None if method IRI wasn't found in KG \"\"\" query_result = get_first_query_result_if_exists ( query_method_iri_by_task_iri , kg , namespace_prefix , task_iri , ) if query_result is None : return None method_iri = str ( query_result [ 0 ]) query_result = get_first_query_result_if_exists ( query_entity_parent_iri , kg , method_iri , namespace . AtomicMethod , ) if query_result is None : return None method_parent_iri = str ( query_result [ 0 ]) return Entity ( method_iri , Entity ( method_parent_iri ))","title":"get_method_by_task_iri()"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.get_pipeline_and_first_task_iri","text":"Retrieves the necessary information needed to start parsing a pipeline Parameters: Name Type Description Default kg Graph Graph object to use when querying required namespace_prefix str namespace prefix to use when querying required Returns: Type Description Tuple [ str , str , str ] Tuple[str, str, str]: contains the pipeline IRI, the input data path and the first task's IRI Source code in exe_kg_lib\\utils\\query_utils.py 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 def get_pipeline_and_first_task_iri ( kg : Graph , namespace_prefix : str ) -> Tuple [ str , str , str ]: \"\"\" Retrieves the necessary information needed to start parsing a pipeline Args: kg: Graph object to use when querying namespace_prefix: namespace prefix to use when querying Returns: Tuple[str, str, str]: contains the pipeline IRI, the input data path and the first task's IRI \"\"\" # assume one pipeline per file query_result = get_first_query_result_if_exists ( query_pipeline_info , kg , namespace_prefix , ) if query_result is None : print ( \"Error: Pipeline info not found\" ) exit ( 1 ) pipeline_iri , input_data_path , task_iri = query_result return str ( pipeline_iri ), str ( input_data_path ), str ( task_iri )","title":"get_pipeline_and_first_task_iri()"},{"location":"reference/utils/string_utils/","text":"camel_to_snake ( text ) \u00b6 Converts camel-case string to snake-case Parameters: Name Type Description Default text str string to convert required Returns: Name Type Description str str converted string Source code in exe_kg_lib\\utils\\string_utils.py 4 5 6 7 8 9 10 11 12 13 14 def camel_to_snake ( text : str ) -> str : \"\"\" Converts camel-case string to snake-case Args: text: string to convert Returns: str: converted string \"\"\" text = re . sub ( \"(.)([A-Z][a-z]+)\" , r \"\\1_\\2\" , text ) return re . sub ( \"([a-z0-9])([A-Z])\" , r \"\\1_\\2\" , text ) . lower () property_name_to_field_name ( property_name ) \u00b6 Extracts property name from IRI and converts it to snake-case Parameters: Name Type Description Default property_name str IRI to parse required Returns: Name Type Description str str converted string Source code in exe_kg_lib\\utils\\string_utils.py 17 18 19 20 21 22 23 24 25 26 def property_name_to_field_name ( property_name : str ) -> str : \"\"\" Extracts property name from IRI and converts it to snake-case Args: property_name: IRI to parse Returns: str: converted string \"\"\" return camel_to_snake ( property_name . split ( \"#\" )[ 1 ])","title":"string_utils"},{"location":"reference/utils/string_utils/#exe_kg_lib.utils.string_utils.camel_to_snake","text":"Converts camel-case string to snake-case Parameters: Name Type Description Default text str string to convert required Returns: Name Type Description str str converted string Source code in exe_kg_lib\\utils\\string_utils.py 4 5 6 7 8 9 10 11 12 13 14 def camel_to_snake ( text : str ) -> str : \"\"\" Converts camel-case string to snake-case Args: text: string to convert Returns: str: converted string \"\"\" text = re . sub ( \"(.)([A-Z][a-z]+)\" , r \"\\1_\\2\" , text ) return re . sub ( \"([a-z0-9])([A-Z])\" , r \"\\1_\\2\" , text ) . lower ()","title":"camel_to_snake()"},{"location":"reference/utils/string_utils/#exe_kg_lib.utils.string_utils.property_name_to_field_name","text":"Extracts property name from IRI and converts it to snake-case Parameters: Name Type Description Default property_name str IRI to parse required Returns: Name Type Description str str converted string Source code in exe_kg_lib\\utils\\string_utils.py 17 18 19 20 21 22 23 24 25 26 def property_name_to_field_name ( property_name : str ) -> str : \"\"\" Extracts property name from IRI and converts it to snake-case Args: property_name: IRI to parse Returns: str: converted string \"\"\" return camel_to_snake ( property_name . split ( \"#\" )[ 1 ])","title":"property_name_to_field_name()"},{"location":"reference/utils/task_utils/ml_utils/","text":"data_splitting ( input_x , input_y , split_ratio ) \u00b6 split data into training and testing set Source code in exe_kg_lib\\utils\\task_utils\\ml_utils.py 14 15 16 17 18 19 20 21 22 23 24 25 26 def data_splitting ( input_x : pd . DataFrame , input_y : np . ndarray , split_ratio : str ) -> Tuple [ pd . DataFrame , pd . DataFrame , pd . DataFrame , pd . DataFrame ]: \"\"\"split data into training and testing set\"\"\" splitting_point = int ( float ( split_ratio ) * float ( input_x . shape [ 0 ])) train_x = input_x . iloc [: splitting_point ] test_x = input_x . iloc [ splitting_point :] train_y = input_y . iloc [: splitting_point ] test_y = input_y . iloc [ splitting_point :] return train_x , test_x , train_y , test_y","title":"ml_utils"},{"location":"reference/utils/task_utils/ml_utils/#exe_kg_lib.utils.task_utils.ml_utils.data_splitting","text":"split data into training and testing set Source code in exe_kg_lib\\utils\\task_utils\\ml_utils.py 14 15 16 17 18 19 20 21 22 23 24 25 26 def data_splitting ( input_x : pd . DataFrame , input_y : np . ndarray , split_ratio : str ) -> Tuple [ pd . DataFrame , pd . DataFrame , pd . DataFrame , pd . DataFrame ]: \"\"\"split data into training and testing set\"\"\" splitting_point = int ( float ( split_ratio ) * float ( input_x . shape [ 0 ])) train_x = input_x . iloc [: splitting_point ] test_x = input_x . iloc [ splitting_point :] train_y = input_y . iloc [: splitting_point ] test_y = input_y . iloc [ splitting_point :] return train_x , test_x , train_y , test_y","title":"data_splitting()"},{"location":"reference/utils/task_utils/statistic_utils/","text":"iqr_calculation ( input_data , percent = 50 ) \u00b6 return quarter of the input_data Source code in exe_kg_lib\\utils\\task_utils\\statistic_utils.py 51 52 53 def iqr_calculation ( input_data : np . ndarray , percent : int = 50 ) -> np . ndarray : \"\"\"return quarter of the input_data\"\"\" return np . percentile ( input_data , percent ) outlier_calculation ( input , iq1 = None , iq3 = None ) \u00b6 return the outliers in the data Source code in exe_kg_lib\\utils\\task_utils\\statistic_utils.py 56 57 58 59 60 61 62 63 64 65 def outlier_calculation ( input : np . ndarray , iq1 : float = None , iq3 : float = None ) -> np . ndarray : \"\"\"return the outliers in the data\"\"\" iq1 = iqr_calculation ( input , 25 ) if ( not iq1 ) else iq1 iq3 = iqr_calculation ( input , 75 ) if ( not iq3 ) else iq3 median = np . median ( input ) iqr = iq3 - iq1 high_outliers = input < median - 1.5 * iqr low_outliers = input > median + 1.5 * iqr outlier_rows = [ low_outliers . iloc [ i ] or high_outliers . iloc [ i ] for i in range ( len ( input ))] return outlier_rows trend_calculation ( input_data , half_window_size = 2 , padding = 'same' ) \u00b6 calculate the trend of the data, which is the sliding-window average Source code in exe_kg_lib\\utils\\task_utils\\statistic_utils.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 def trend_calculation ( input_data : np . ndarray , half_window_size : int = 2 , padding : str = \"same\" , ) -> np . ndarray : \"\"\"calculate the trend of the data, which is the sliding-window average\"\"\" def padding_input ( input : np . ndarray , half_window_size : int , padding : str = \"same\" ) -> np . ndarray : \"\"\"padding the beginning and end of the input data by the beginning or end value\"\"\" if padding == \"same\" : begin_padding = pd . Series ([ input . iloc [ 0 ]] * half_window_size ) end_padding = pd . Series ([ input . iloc [ len ( input ) - 1 ]] * half_window_size ) output = pd . concat ([ begin_padding , input , end_padding ]) . reset_index () . drop ( \"index\" , axis = 1 ) return output else : return 0 input = padding_input ( input_data , half_window_size ) output = 0 input_len = len ( input ) - 2 * half_window_size for i in range ( 2 * half_window_size + 1 ): output += np . array ( input . iloc [ i : i + input_len ]) output = output / ( 2 * half_window_size + 1 ) return output","title":"statistic_utils"},{"location":"reference/utils/task_utils/statistic_utils/#exe_kg_lib.utils.task_utils.statistic_utils.iqr_calculation","text":"return quarter of the input_data Source code in exe_kg_lib\\utils\\task_utils\\statistic_utils.py 51 52 53 def iqr_calculation ( input_data : np . ndarray , percent : int = 50 ) -> np . ndarray : \"\"\"return quarter of the input_data\"\"\" return np . percentile ( input_data , percent )","title":"iqr_calculation()"},{"location":"reference/utils/task_utils/statistic_utils/#exe_kg_lib.utils.task_utils.statistic_utils.outlier_calculation","text":"return the outliers in the data Source code in exe_kg_lib\\utils\\task_utils\\statistic_utils.py 56 57 58 59 60 61 62 63 64 65 def outlier_calculation ( input : np . ndarray , iq1 : float = None , iq3 : float = None ) -> np . ndarray : \"\"\"return the outliers in the data\"\"\" iq1 = iqr_calculation ( input , 25 ) if ( not iq1 ) else iq1 iq3 = iqr_calculation ( input , 75 ) if ( not iq3 ) else iq3 median = np . median ( input ) iqr = iq3 - iq1 high_outliers = input < median - 1.5 * iqr low_outliers = input > median + 1.5 * iqr outlier_rows = [ low_outliers . iloc [ i ] or high_outliers . iloc [ i ] for i in range ( len ( input ))] return outlier_rows","title":"outlier_calculation()"},{"location":"reference/utils/task_utils/statistic_utils/#exe_kg_lib.utils.task_utils.statistic_utils.trend_calculation","text":"calculate the trend of the data, which is the sliding-window average Source code in exe_kg_lib\\utils\\task_utils\\statistic_utils.py 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 def trend_calculation ( input_data : np . ndarray , half_window_size : int = 2 , padding : str = \"same\" , ) -> np . ndarray : \"\"\"calculate the trend of the data, which is the sliding-window average\"\"\" def padding_input ( input : np . ndarray , half_window_size : int , padding : str = \"same\" ) -> np . ndarray : \"\"\"padding the beginning and end of the input data by the beginning or end value\"\"\" if padding == \"same\" : begin_padding = pd . Series ([ input . iloc [ 0 ]] * half_window_size ) end_padding = pd . Series ([ input . iloc [ len ( input ) - 1 ]] * half_window_size ) output = pd . concat ([ begin_padding , input , end_padding ]) . reset_index () . drop ( \"index\" , axis = 1 ) return output else : return 0 input = padding_input ( input_data , half_window_size ) output = 0 input_len = len ( input ) - 2 * half_window_size for i in range ( 2 * half_window_size + 1 ): output += np . array ( input . iloc [ i : i + input_len ]) output = output / ( 2 * half_window_size + 1 ) return output","title":"trend_calculation()"},{"location":"reference/utils/task_utils/visual_utils/","text":"canvas_creation ( layout ) \u00b6 the canvas task taking as input the starting task POs and output the fig and grid Source code in exe_kg_lib\\utils\\task_utils\\visual_utils.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def canvas_creation ( layout : str ) -> Tuple [ Figure , Optional [ plt . GridSpec ]]: \"\"\"the canvas task taking as input the starting task POs and output the fig and grid\"\"\" font = FontProperties () font . set_size ( 10 ) font . set_name ( \"Verdana\" ) try : n_rows , n_cols = ( int ( i ) for i in layout [ 0 ] . split ( \" \" )) except : n_rows , n_cols = ( 1 , 1 ) fig = plt . figure ( figsize = ( 7 , 5 )) grid = None if ( n_rows == n_cols and n_rows == 1 ) else plt . GridSpec ( n_rows , n_cols , hspace = 0.3 , wspace = 0.3 ) return fig , grid","title":"visual_utils"},{"location":"reference/utils/task_utils/visual_utils/#exe_kg_lib.utils.task_utils.visual_utils.canvas_creation","text":"the canvas task taking as input the starting task POs and output the fig and grid Source code in exe_kg_lib\\utils\\task_utils\\visual_utils.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def canvas_creation ( layout : str ) -> Tuple [ Figure , Optional [ plt . GridSpec ]]: \"\"\"the canvas task taking as input the starting task POs and output the fig and grid\"\"\" font = FontProperties () font . set_size ( 10 ) font . set_name ( \"Verdana\" ) try : n_rows , n_cols = ( int ( i ) for i in layout [ 0 ] . split ( \" \" )) except : n_rows , n_cols = ( 1 , 1 ) fig = plt . figure ( figsize = ( 7 , 5 )) grid = None if ( n_rows == n_cols and n_rows == 1 ) else plt . GridSpec ( n_rows , n_cols , hspace = 0.3 , wspace = 0.3 ) return fig , grid","title":"canvas_creation()"}]}