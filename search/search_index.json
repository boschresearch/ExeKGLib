{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>ExeKGLib is a Python library that simplifies the construction and execution of Machine Learning (ML) pipelines represented by Executable Knowledge Graphs (ExeKGs). It features a coding interface and a CLI, and allows the user to:</p>"},{"location":"#features","title":"\ud83c\udf1f Features","text":"<ol> <li>\ud83d\udd28 Construct data analytics pipelines that take tabular files (e.g. CSV) as input and process the data using a variety of available tasks and methods.</li> <li>\ud83d\udcbe Save the constructed pipelines as ExeKGs in RDF Turtle format.</li> <li>\u25b6\ufe0f Execute the generated ExeKGs.</li> </ol>"},{"location":"#key-benefits-of-exekglib","title":"\ud83c\udf1f Key Benefits of ExeKGLib","text":"<ol> <li>\ud83d\ude80 No-code ML Pipeline Creation: With ExeKGLib, the user can specify the pipeline's structure and the operations to be performed using a simple JSON file (see Creating an ML pipeline), which is then automatically converted to an ExeKG. This ExeKG can be executed to perform the specified operations on the input data (see Executing an ML pipeline).</li> <li>\ud83d\udce6 Batch Pipeline Creation and Edit: ExeKGLib allows users to create and edit pipelines in a batch fashion through its simple coding interface (see Creating an ML pipeline and Editing an ML pipeline). This enables automatic creation of multiple pipelines as ExeKGs, which can then be queried and analyzed.</li> <li>\ud83d\udd17 Linked Open Data Integration: ExeKGLib is a tool that leverages linked open data (LOD) in several significant ways:<ul> <li>\ud83d\udcda Pipeline Creation Guidance: It helps guide the user through the pipeline creation process. This is achieved by using a predefined hierarchy of tasks, along with their compatible inputs, outputs, methods, and method parameters (see available tasks and methods).</li> <li>\ud83e\udde0 Enhancing User Understanding: It enhances the user's understanding of Data Science and the pipeline's functionality. This is achieved by linking the generated pipelines to Knowledge Graph (KG) schemata that encapsulate various Data Science concepts (see KG schemata).</li> <li>\u2705 Validation of ExeKGs: It validates the generated ExeKGs to ensure their executability.</li> <li>\ud83d\udd04 Automatic Conversion and Execution: It automatically converts the ExeKGs to Python code and executes them.</li> </ul> </li> </ol> <p>Under the hood, ExeKGLib uses well-known Python libraries for data processing and visualization and performing predictions such as pandas, matplotlib, and scikit-learn.</p> <p>ExeKGLib is described in the following paper published as part of ESWC 2023: Klironomos A., Zhou B., Tan Z., Zheng Z., Gad-Elrab M., Paulheim H., Kharlamov E. ExeKGLib: Knowledge Graphs-Empowered Machine Learning Analytics</p>"},{"location":"adding-new-task-and-method/","title":"Adding a new ML-related task and method","text":""},{"location":"adding-new-task-and-method/#adding-a-new-ml-related-task-and-method","title":"Adding a new ML-related task and method","text":""},{"location":"adding-new-task-and-method/#a-adding-semantic-components-to-a-bottom-level-kg-schema-and-shacl-shapes-graph","title":"A) Adding semantic components to a bottom-level KG schema and SHACL shapes graph","text":"<p>While extending an existing bottom-level KG schema, naming conventions should be followed and can be inferred by the below template snippets. The placeholders used are specified below each snippet.</p> <p>\ud83d\uddd2\ufe0f Note: For the sake of example, in this guide we use the namespace prefix of the Machine Learning KG schema (<code>ml</code>).</p> <p>To add the required semantic components:</p> <ol> <li>Clone the repo with the KG schemata.</li> <li>Open <code>{prefix}_exeKGOntology.ttl</code> after replacing <code>{prefix}</code> with the namespace prefix of the desired bottom-level KG schema. <code>ml</code> for Machine Learning, <code>stats</code> for Statistics and <code>visu</code> for Visualization.</li> <li> <p>[\u2757 This step is optional: Perform only if the new method cannot be \"thematically associated\" with an existing sub-class of <code>ds:AtomicTask</code>]</p> <p>For creating a new task, there are 2 cases:</p> <ul> <li>\u2733\ufe0fCase 1: If the new task can \"thematically belong\" under an existing task class that is a sub-class of <code>ds:Task</code>.</li> <li>\u2733\ufe0fCase 2: If the new task cannot \"thematically belong\" under an existing task class that is a sub-class of <code>ds:Task</code> and needs to be standalone.</li> </ul> <p>The steps to create the task are the following and some parts vary depending on the applicable case:</p> <ol> <li>Add a new sub-class of ds:AtomicTask.     <pre><code>ml:{NewTask}\n    a               owl:Class ;\n    rdfs:subClassOf ml:{UpperTaskClass},    # this relationship is ONLY for *Case 1*\n                    ds:AtomicTask .\n</code></pre> In the above template:<ul> <li>\ud83d\uddd2\ufe0f Note: If \u2733\ufe0fCase 2 applies, then the relationship <code>rdfs:subClassOf ml:{UpperTaskClass}</code> is not needed.</li> <li><code>{NewTask}</code> should be replaced with the new task's unique name in camel-case.</li> <li><code>{UpperTaskClass}</code> should be replaced with an existing task class under which the new task belongs. That task class must be a sub-class of <code>ds:Task</code>. Available task classes can be found in the bottom-level KG schemata. \u270d\ufe0f For example, if the new task is a specific type of classification, then the <code>{UpperTaskClass}</code> should be replaced with <code>Classification</code>.</li> </ul> </li> <li> <p>Add a new property that will connect the new task with the new method.     <pre><code>ml:has{NewTask}Method\n    a                  owl:ObjectProperty ;\n    rdfs:subPropertyOf ml:{UpperTaskToMethodProperty} ;\n    rdfs:domain        ml:{NewTask} ;\n    rdfs:range         ml:{NewMethod}Method .\n</code></pre> In the above template:</p> <ul> <li><code>{NewTask}</code> should be replaced with the new task's name from Step 3.a.</li> <li><code>{UpperTaskToMethodProperty}</code> should be replaced with an existing task-to-method property under which the new property belongs. Available task-to-method properties can be found in the bottom-level KG schemata.</li> <li><code>{NewMethod}</code> should be replaced with the new method's unique name in camel-case (see next Steps for how to create a new method). \u270d\ufe0f For example, if the new task belongs under the <code>ml:Classification</code> task which belongs under the <code>ml:Train</code> task, then <code>{UpperTaskToMethodProperty}</code> should be <code>hasTrainMethod</code>.</li> </ul> </li> <li> <p>Add a new SHACL shape for task-to-method link in <code>ml_shacl_shapes.ttl</code> or in <code>generated_schemata/generated_ml_shacl_shapes.ttl</code> (replace <code>ml</code> with the chosen schema's namespace prefix).     <pre><code>:{NewTask}TaskMethodShape\n    a              sh:NodeShape ;\n    sh:targetClass ml:{NewTask} ;\n    sh:property [\n        sh:path ml:has{NewTask}Method ;\n        sh:minCount 1 ;\n        sh:maxCount 1 ;\n        sh:or (\n            [ sh:class ml:{NewMethod} ]\n        ) ;\n        sh:message \"Tasks of type {NewTask} must be connected with exactly one compatible atomic method.\" ;\n    ] .\n</code></pre> In the above template:</p> <ul> <li>If needed, the constraints (e.g. <code>sh:minCount 1</code>) should be modified/removed and more should be added.</li> <li><code>{NewTask}</code> should be replaced with the new task's name from Step 3.a.</li> <li><code>{NewMethod}</code> should be replaced with the new method's name (see next Steps for how to create a new method).</li> </ul> </li> <li> <p>[\ud83d\uddd2\ufe0f Note: Perform this step only if \u2733\ufe0fCase 2 applies. For existing tasks, the inputs and outputs for each task are defined in the bottom-level KG schemata as inputs and outputs of the top-level task classes. \u270d\ufe0f For example, any task that belongs under the <code>ml:Train</code> task, will receive two inputs <code>ml:DataInTrainX</code> and <code>ml:DataInTrainY</code>, and produce an output <code>ml:DataOutTrainModel</code>.]</p> <p>Add the input and output as sub-classes of ds:DataEntity and link them to the new task. <pre><code>ml:{Input1}\n    a               owl:Class ;\n    rdfs:subClassOf ds:DataEntity,           # \"ds:DataEntity\" can be replaced with a subclass of \"ds:Method\" like \"ml:TrainMethod\"\n                    {Input1DataStructures} . # in case of the above replacement, data structures are not needed\n\n...\n\nml:{InputN}\n    a               owl:Class ;\n    rdfs:subClassOf ds:DataEntity,           # \"ds:DataEntity\" can be replaced with a subclass of \"ds:Method\" like \"ml:TrainMethod\"\n                    {InputNDataStructures} . # in case of the above replacement, data structures are not needed\n\nml:{Output1}\n    a               owl:Class ;\n    rdfs:subClassOf ds:DataEntity,\n                    {Output1DataStructures} .\n\n...\n\nml:{OutputN}\n    a               owl:Class ;\n    rdfs:subClassOf ds:DataEntity,\n                    {OutputNDataStructures} .\n\nml:has{NewTask}Input\n    a                  owl:ObjectProperty ;\n    rdfs:subPropertyOf ds:hasInput ;\n    rdfs:domain        ml:{NewTask} ;\n    rdfs:range         ml:{Input1},\n                       ...\n                       ml:{InputN} .\n\nml:has{NewTask}Output\n    a                  owl:ObjectProperty ;\n    rdfs:subPropertyOf ds:hasOutput ;\n    rdfs:domain        ml:{NewTask} ;\n    rdfs:range         ml:{Output1},\n                       ...\n                       ml:{OutputN} .\n</code></pre> In the above template:</p> <ul> <li><code>{NewTask}</code> should be replaced with the new task's name from Step 3.a.</li> <li><code>{Input1}</code>, ..., <code>{InputN}</code> and <code>{Output1}</code>, ..., <code>{OutputN}</code> should be replaced with unique input and output names in camel-case, respectively.</li> <li><code>{Input1DataStructures}</code>, ..., <code>{InputNDataStructures}</code> and <code>{Output1DataStructures}</code>, ..., <code>{OutputNDataStructures}</code> should be replaced with (lists of) names of sub-classes of ds:DataStructure (i.e. <code>ds:Vector</code>, <code>ds:Matrix</code> etc.). Available data structure classes can be found in the top-level KG schema.</li> </ul> </li> <li> <p>[\ud83d\uddd2\ufe0f Note: Perform this step only if \u2733\ufe0fCase 2 applies. For existing tasks, the input and output SHACL shapes for each task are defined in the bottom-level SHACL shape graphs (e.g. <code>ml_shacl_shapes.ttl</code>) as input and output SHACL shapes of the top-level task classes. \u270d\ufe0f For example, for any task that belongs under the <code>ml:Train</code> task, the corresponding shape is <code>:TrainTaskInputOutputShape</code>]</p> <p>Add a new SHACL shape in <code>ml_shacl_shapes.ttl</code> (replace <code>ml</code> with the chosen schema's namespace prefix). <pre><code>:{NewTask}TaskInputOutputShape\n    a              sh:NodeShape ;\n    sh:targetClass ml:{NewTask} ;\n\n    # input\n    sh:property [\n        sh:path ml:has{NewTask}Input ;\n        sh:qualifiedMinCount 1 ;\n        sh:qualifiedMaxCount 1 ;\n        sh:qualifiedValueShape [\n            sh:class ml:{Input1} ;\n        ] ;\n        sh:message \"Tasks of type {NewTask} must be connected with exactly one input of type {Input1}.\" ;\n    ] ;\n\n    ...\n\n    sh:property [\n        sh:path ml:has{NewTask}Input ;\n        sh:qualifiedMinCount 1 ;\n        sh:qualifiedMaxCount 1 ;\n        sh:qualifiedValueShape [\n            sh:class ml:{InputN} ;\n        ] ;\n        sh:message \"Tasks of type {NewTask} must be connected with exactly one input of type {InputN}.\" ;\n    ] ;\n\n    # output\n    sh:property [\n        sh:path ml:has{NewTask}Output ;\n        sh:qualifiedMinCount 1 ;\n        sh:qualifiedMaxCount 1 ;\n        sh:qualifiedValueShape [\n            sh:class ml:{Output1} ;\n        ] ;\n        sh:message \"Tasks of type {NewTask} must be connected with exactly one input of type {Output1}.\" ;\n    ] ;\n\n    ...\n\n    sh:property [\n        sh:path ml:has{NewTask}Output ;\n        sh:qualifiedMinCount 1 ;\n        sh:qualifiedMaxCount 1 ;\n        sh:qualifiedValueShape [\n            sh:class ml:{OutputN} ;\n        ] ;\n        sh:message \"Tasks of type {NewTask} must be connected with exactly one input of type {OutputN}.\" ;\n    ] .\n</code></pre> In the above template:</p> <ul> <li>If needed, the constraints (e.g. <code>sh:qualifiedMinCount 1</code>) should be modified/removed and more should be added.</li> <li><code>{NewTask}</code> should be replaced with the new task's name from Step 3.a.</li> <li><code>{Input1}</code>, ..., <code>{InputN}</code> and <code>{Output1}</code>, ..., <code>{OutputN}</code> should be replaced with the input and output names from Step 3.e.</li> </ul> </li> </ol> </li> <li> <p>In <code>ml_exeKGOntology.ttl</code> or in <code>generated_schemata/generated_ml_ontologies_combined.ttl</code>, add a new sub-class of ds:AtomicMethod together with its Python module hierarchy (replace <code>ml</code> with the chosen schema's namespace prefix).     <pre><code>ml:{NewMethod}Method\n    a               owl:Class ;\n    rdfs:subClassOf ml:{UpperMethodClass},\n                    ml:{Module1},\n                    ds:AtomicMethod .\n\nml:{Module1}\n    a               owl:Class ;\n    rdfs:subClassOf ml:{Module2} .\n\nml:{Module2}\n    a               owl:Class ;\n    rdfs:subClassOf ml:{Module3} .\n\n...\n\nml:{ModuleN}\n    a               owl:Class ;\n    rdfs:subClassOf ds:Module .\n</code></pre> In the above template:</p> <ul> <li><code>{NewMethod}</code> should be replaced with the new method's unique name in camel-case.</li> <li><code>{UpperMethodClass}</code> should be replaced with an existing method class under which the new method belongs. That method class must be a sub-class of <code>ds:Method</code>. Available method classes can be found in the bottom-level KG schemata. \u270d\ufe0f For example, if the new method is linked to the <code>ml:BinaryClassification</code> task which belongs under the <code>ml:Train</code> task, then <code>{UpperMethodClass}</code> should be replaced with <code>TrainMethod</code>.</li> <li>The hierarchy of modules shown above is: <code>{Module1}</code> -&gt; <code>{Module2}</code> -&gt; <code>{Module3}</code> -&gt; ... -&gt; <code>{ModuleN}</code>. This represents a hierarchy of Python modules with their names in camel-case. \u270d\ufe0f For example, if the implementation of the new method is in the Python module <code>example_module2.example_module1.example_new_method</code>, then <code>{Module1}</code> is replaced by <code>ExampleModule1</code>, <code>{Module2}</code> is replaced by <code>ExampleModule2</code>, and <code>{NewMethod}</code> is replaced by <code>ExampleNewMethod</code>.</li> </ul> </li> <li> <p>[\ud83d\uddd2\ufe0f Note: If the optional Step 3 was performed, this step can be skipped]</p> <p>To link the method to an existing task:</p> <ol> <li>Find the definition of property <code>ml:has{TaskClass}Method</code> in <code>generated_schemata/generated_ml_ontologies_combined.ttl</code> (replace <code>ml</code> with the chosen schema's namespace prefix). Here, <code>{TaskClass}</code> should be replaced with an existing task class that the new method solves. That task class must be a sub-class of <code>ds:AtomicTask</code>. \u270d\ufe0f For example, if the new method performs binary classification then <code>{TaskClass}</code> should be replaced with <code>BinaryClassification</code>.</li> <li>In the set of existing values of <code>rdfs:range</code> property, add <code>ml:{NewMethod}Method</code>. Here, <code>{NewMethod}</code> should be replaced with the new method's name from Step 4.</li> <li>Find the definition of SHACL shape <code>:{TaskClass}TaskMethodShape</code> in <code>generated_schemata/generated_ml_shacl_shapes.ttl</code> (replace <code>ml</code> with the chosen schema's namespace prefix). Here, <code>{TaskClass}</code> should be replaced with an existing task class that the new method solves. \u270d\ufe0f For example, if the new method performs binary classification then <code>{TaskClass}</code> should be replaced with <code>BinaryClassification</code>.</li> <li>In the set of existing values of <code>sh:or</code> that is under <code>sh:property</code>, add <code>[ sh:class ml:{NewMethod}Method ]</code>. Here, <code>{NewMethod}</code> should be replaced with the new method's name from Step 4.</li> </ol> </li> <li> <p>Add the desired parameters as data properties for the new method.     <pre><code>ml:hasParam{NewParam1}\n    a                  owl:DatatypeProperty ;\n    rdfs:domain        ml:{NewMethod}Method ;\n    rdfs:range         {Range1} ;\n    rdfs:subPropertyOf ds:hasParameter .\n\nml:hasParam{NewParam2}\n    a                  owl:DatatypeProperty ;\n    rdfs:domain        ml:{NewMethod}Method ;\n    rdfs:range         {Range2} ;\n    rdfs:subPropertyOf ds:hasParameter .\n</code></pre> In the above template:</p> <ul> <li><code>{NewParam1}</code> and <code>{NewParam2}</code> should be replaced with unique parameter names in camel-case.</li> <li><code>{NewMethod}</code> should be replaced with the new method's name from Step 4.</li> <li><code>{Range1}</code> and <code>{Range2}</code> should be replaced with the desired literal value ranges (e.g. <code>xsd:float</code>).</li> </ul> </li> <li> <p>Add a new SHACL shape for method-to-parameter link(s) either in <code>ml_shacl_shapes.ttl</code> or in <code>generated_schemata/generated_ml_shacl_shapes.ttl</code> (replace <code>ml</code> with the chosen schema's namespace prefix).     <pre><code>:{NewMethod}ParameterShape\n    a              sh:NodeShape ;\n    sh:targetClass ml:{NewMethod} ;\n    sh:property [\n        sh:path ml:hasParam{NewParam1} ;\n        sh:maxCount 1 ;\n        sh:or (\n            [ sh:datatype {NewParam1Type1} ]\n            ...\n            [ sh:datatype {NewParam1TypeN} ]\n        ) ;\n        sh:message \"Method {NewMethod} must have at most one compatible value for parameter hasParam{NewParam1}.\" ;\n    ] ;\n\n    ...\n\n    sh:property [\n        sh:path ml:hasParam{NewParamN} ;\n        sh:maxCount 1 ;\n        sh:or (\n            [ sh:datatype {NewParamNType1} ]\n            ...\n            [ sh:datatype {NewParamNTypeN} ]\n        ) ;\n        sh:message \"Method {NewMethod} must have at most one compatible value for parameter hasParam{NewParamN}.\" ;\n    ] .\n</code></pre> In the above template:</p> <ul> <li>If needed, the constraints (e.g. <code>sh:maxCount 1</code>) should be modified/removed and more should be added.</li> <li><code>{NewMethod}</code> should be replaced with the new method's name from Step 4.</li> <li><code>{NewParam1}</code>, ..., <code>{NewParamN}</code> should be replaced with the new parameters' names from Step 6.</li> <li><code>{NewParam1Type1}</code>, ..., <code>{NewParamNTypeN}</code> should be replaced with compatible literal types for the new parameter(s).</li> </ul> </li> <li> <p>Modify <code>config.py</code> in <code>exe_kg_lib</code> package to update the value of <code>KG_SCHEMAS_DIR</code> to point to the cloned repo's directory from Step 1.</p> </li> </ol>"},{"location":"adding-new-task-and-method/#b-modifying-the-relevant-python-code","title":"B) Modifying the relevant Python code","text":"<p>\ud83d\uddd2\ufe0f Note: While modifying the code, consider refering to the conventions mentioned in the tasks package's documentation.</p> <p>To modify the relevant Python code:</p> <ol> <li>Find the relevant sub-class of <code>exe_kg_lib.classes.task.Task</code> in the corresponding file of the <code>exe_kg_lib.classes.tasks</code> package.<ul> <li>The corresponding file depends on the KG schema that was extended in Section A of this guide. \u270d\ufe0f For example, if the Machine Learning schema was extended, then the corresponding file is <code>ml_tasks.py</code>.</li> <li>The relevant sub-class depends on the task to which the new method was linked in Step 3.b or Step 5 of Section A of this guide. \u270d\ufe0f For example, if the new method is linked to the <code>ml:BinaryClassification</code> task which belongs under the <code>ml:Train</code> task, then the relevant sub-class is <code>exe_kg_lib.classes.tasks.ml_tasks.Train</code>. [\ud83d\uddd2\ufe0f Note: If \u2733\ufe0fCase 2 from Step 3 applies, then the relevant sub-class refers to a new Python class that needs to be created in a similar way like existing classes in <code>exe_kg_lib.classes.tasks</code> package.]</li> </ul> </li> <li>Modify the code of <code>run_method()</code> in the relevant sub-class to call the Python module that implements the new method (see Step 4 in Section A of this guide).</li> </ol>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#tldr-10-steps-to-your-first-pull-request","title":"TL;DR: 10 Steps To Your First Pull Request","text":"<p>Ok, this is a long document so let's TL;DR this. The following recipe quickly outlines ten steps to your first successful contribution in the form of a pull request.</p> <ol> <li>First, create an issue in our issue tracker and describe the contribution you intend to make.</li> <li>Before you start coding, create a fork and a local branch, on which you will make    your changes.</li> <li>Make the changes in your local git repository and commit.</li> <li>When you'd like to share your code and/or start a pull request to get feedback, push your commits to the repository.</li> <li>Open the Branches view in GitHub. Your newly pushed branch should show up there. Usually, all repositories have an    associated build job which will pick up your new branch and build it once you open a PR.</li> <li>If the build fails and you know how to fix it, please do. If you don't, go ahead and contact us via the pull request    to allow us to help you make the build green.</li> <li>Enter a meaningful title, prefixed with the issue number and possibly a slightly longer version of your branch name.    Here is an example: <code>#1 - Add missing documentation</code></li> <li>Briefly describe the changes you are submitting in the Description field. The goal here is to make the life of the    reviewers as easy as possible by explaining what you did and why. The description can be formatted as markdown, so    feel free to format, add code examples, link to specific lines of code or even add sketches or diagrams. You can also    @-mention anyone on GitHub to inform them of the PR (usually we do that by prefixing the @-mention with <code>/CC</code> or <code>/FYI</code>).</li> <li>Every pull request will be reviewed and approved by at least one maintainer (see <code>README.md</code>) before it is merged.</li> <li>Add at least one of the maintainers as reviewer.</li> </ol> <p>This is, in a nutshell, how you make contributions to this community. It may sound complicated at first, but you'll quickly internalize the steps and will be able to create a pull request in mere minutes or less. Please find a detailed description in the How to Contribute section.</p>"},{"location":"contributing/#whom-to-contact-in-case-of-questions","title":"Whom to Contact in Case of Questions?","text":"<p>Communication is usually done via Issues and PRs. If, for some reason, you prefer kicking off the collaboration in a personal conversation, please contact the maintainers of this repository, which are listed in this repository's <code>README.md</code>.</p>"},{"location":"contributing/#how-to-submit-a-bug-report","title":"How to Submit a Bug Report?","text":"<p>Found a bug? Great! A core task in improving our product is to identify any flaws that may be present. The best place to report a bug is to create an issue in our issue tracker.</p>"},{"location":"contributing/#how-to-submit-a-feature-request","title":"How to Submit a Feature Request?","text":"<p>If you have suggestions for us on how to improve our code or our documentation or have a new feature in mind, please by all means do let us know. The same rules apply as for bug reports: add a new issue outlining your suggestion in our issue tracker.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute?","text":"<p>If you have fixed a bug or have developed that new feature you would like to make available to your fellow users, or even if you have fixed whitespace or formatting issues, we'd like to encourage you to contribute that to our codebase. In this repository, we use pull requests to facilitate all contributions. Every pull request will be peer-reviewed by at least one community member, which is a great way to get in touch with each other.</p>"},{"location":"contributing/#clean-code","title":"Clean Code","text":"<p>More important than writing code that adheres to our styleguide is writing Clean Code. We consider code to be clean, if it</p> <ul> <li>works,</li> <li>is easy to understand,</li> <li>is easy to modify and</li> <li>is easy to test.</li> </ul> <p>Any code contribution will be reviewed by us with respect to these criteria. We are more than happy and indeed consider it a core part of being BIOS to invest time mentoring junior developers to help them create cleaner code and to improve future contributions.</p> <p>In addition to these principles of clean code, we also try to design our architectures for participation. That, to us, means to avoid unnecessary complexity, tight coupling or complex dependency relationships.</p>"},{"location":"contributing/#testing-conventions","title":"Testing Conventions","text":"<p>We are convinced that writing testable code and writing tests is a precondition for any software to be maintainable. Even though we do not prescribe fixed coverage thresholds for our tests, we encourage (and often will require) you to write tests for code that needs to be maintainable where the effort is not excessive. This means, that we</p> <ul> <li>aim to write code with testability in mind (following the test first principle)</li> <li>write tests for everything we can test</li> <li>expose a submitted bug with a test first, before we implement a fix.</li> </ul> <p>We also aim to write our tests such that they can be read as a specification (because we usually don't spend time writing those). In practice, this means that we use long, verbose and expressive names for tests which convey the condition being tested.</p> <p>In our experience, writing tests can actually be a lot of fun. As a programmer, you have more leeway to experiment and try new programming approaches when writing tests. That is why we often try out new language features in our test code, first. And if you're following the test first principle, it's always quite rewarding to see those red test cases continue to turn green, once the implementation is complete. Finally, only adequate tests will empower you to continuously improve your codebase with refactoring, as this provides the reassurance that you didn't break anything accidentally.</p>"},{"location":"contributing/#writing-documentation","title":"Writing Documentation","text":"<p>We follow these principles when documenting code:</p> <ul> <li>We aim at keeping documentation as close the the asset being documented as possible. That is, where sensible, we use   inline code documentation.</li> <li>We use Mermaid for specifying diagrams in the code in order to be tool agnostic and allow everybody to adapt and   improve it.</li> <li>We favor Markdown or other text based means of generating documentation and try not to use proprietary   tools, such as Word or PowerPoint for that.</li> <li>We aim at providing our users with easy to understand instructions on how to use our code in each repositories <code>README.md</code>.</li> <li>We favor code examples over analytical descriptions of our codebase.</li> </ul>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<p>Pull requests are our main vehicle for submitting, reviewing and merging new code into our codebase. A pull request is more than just an easy interface to git: it is a powerful collaboration and communication tool. They are especially well suited to share knowledge and onboard new contributors. So if you are new to te community, submitting pull requests is an excellent way for you to engage with us and for us to help you get started. Discussions and the Q&amp;A that often accompanies pull requests are archived and linkable and we thus use them to disseminate knowledge about our codebase.</p>"},{"location":"contributing/#general-tips","title":"General Tips","text":"<ul> <li>Keep your PRs as small as possible. The smaller the PR the higher the velocity of review and acceptance.</li> <li>Avoid conflating multiple issues in one PR.</li> <li>Aside from that usually leading to huge PRs and it making the job of a reviewer unnecessarily harder, it will also   confuse the automated T&amp;R issue state transition feature we use.</li> <li>Write a good description to allow the reviewer to quickly get an overview of your changes.</li> <li>Don't add more than two reviewers if you expect all of them to review. This will most likely block you.</li> </ul>"},{"location":"contributing/#other-contributions","title":"Other Contributions","text":"<p>You don't have to be a coder to make a valuable contribution to this community! There are many contributions that you can make as a non-coder that will be very valuable to the community, such as</p> <ul> <li>giving feedback of any kind,</li> <li>reporting bugs,</li> <li>requesting features,</li> <li>adding new or improvements existing documentation,</li> <li>helping other users to use our software,</li> <li>asking and/or answering questions in our forums,</li> <li>promoting BIOS, Social Coding, our community and our software within Bosch or</li> <li>designing artwork for both our software, our wiki or our Bosch connect presence.</li> </ul> <p>May the source be with you!</p>"},{"location":"extending/","title":"Extending","text":"<p>The library can be extended by adding a new task and method to support new ML-related operations.</p> <p>For detailed guidelines, refer to the relevant page of ExeKGLib's website.</p> <p>In summary, these are the steps:</p> <ol> <li>Selecting a bottom-level KG schema (Statistics, ML, or Visualization) based on the type of the new task and method.</li> <li>Adding new semantic components (entities, properties, etc.) to the selected KG schema and the corresponding SHACL shapes graph.</li> <li>Modifying the Python code in the corresponding file of <code>exe_kg_lib.classes.tasks</code> package.</li> </ol>"},{"location":"external-resources/","title":"External resources","text":""},{"location":"external-resources/#kg-schemata","title":"\ud83d\udcdc KG schemata","text":"<ul> <li>Top-level: Data Science</li> <li>Bottom-level: Visualization | Statistics | Machine Learning</li> </ul> <p>The above KG schemata are included in the ExeKGOntology repository.</p>"},{"location":"external-resources/#dataset-used-in-code-examples","title":"\ud83d\udcca Dataset used in code examples","text":"<p>The dataset was generated using the <code>sklearn.datasets.make_classification()</code> function of the scikit-learn Python library.</p>"},{"location":"getting-started/","title":"Getting started","text":"<p>We provide example Python and JSON files that can be used to create the following pipelines:</p> <ol> <li>\ud83e\udde0 ML pipeline:<ol> <li>MLPipelineSimple: Loads a CSV dataset, concatenates selected features, splits the data into training and testing sets, trains a Support Vector Classifier (SVC) model, tests the model, calculates performance metrics (accuracy, F1 score, precision, and recall), and visualizes the results in bar plots.</li> <li>MLPipelineCrossValidation: An extended version of MLPipelineSimple that adds a data splitting step for Stratified K-Fold Cross-Validation. Then, it trains and tests the model using the cross-validation technique and visualizes the validation and test F1 scores in bar plots.</li> <li>MLPipelineModelSelection: A modified version of MLPipelineSimple that replaces the training step with a model selection step. Rather than using a fixed model, this pipeline involves training and cross-validating a Support Vector Classifier (SVC) model with various hyperparameters to optimize performance.</li> </ol> </li> <li>\ud83d\udcca Statistics pipeline:<ul> <li>StatsPipeline: Loads a specific feature from a CSV dataset, calculates its mean and standard deviation, and visualizes the feature's values using a line plot and the calculated statistics using a bar plot.</li> </ul> </li> <li>\ud83d\udcc8 Visualization pipeline:<ul> <li>VisuPipeline: The pipeline loads two numerical features from a CSV dataset and visualizes each feature's values using separate line plots.</li> </ul> </li> </ol> <p>\ud83d\udca1 Tip: To fetch the examples into your working directory for easy access, run <code>typer exe_kg_lib.cli.main run get-examples</code>.</p> <p>\ud83d\uddd2\ufe0f Note: The naming convention for output names (used as inputs for subsequent tasks) in <code>.json</code> files can be found in <code>exe_kg_lib/utils/string_utils.py</code>. Look for <code>TASK_OUTPUT_NAME_REGEX</code>.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#installing-with-pip","title":"Installing with pip","text":"<p>To install, run <code>pip install exe-kg-lib</code>.</p>"},{"location":"installation/#installing-from-source-code","title":"Installing from source code","text":""},{"location":"installation/#step-0-poetry","title":"Step 0: <code>poetry</code>","text":"<p>This project is managed by <code>poetry</code>, a Python packaging and dependency management tool. This means, however, that <code>poetry</code> needs to be installed before you can install this project. To be honest, the official <code>poetry</code> installation docs are great and provide different ways to install <code>poetry</code> on different platforms and under different conditions.</p> <p>However, as some people are lazy, below you can find a few ways to install <code>poetry</code>. As mentioned above:</p> <p>If your required / desired way of installation is not listed, go to the official installation docs before ranting! </p> Linuxconda (not recommended) <p>Run</p> <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre> <p>and follow the instructions. Finally, consider adding <code>poetry</code>'s installation path to your environment <code>PATH</code> (or similar), e.g. via</p> <pre><code>export PATH=$PATH:$HOME/.local/bin\n</code></pre> <p>for <code>poetry</code>'s default installation path.</p> <p>If you really need to go through conda (I know in some cases that's the only option), try this:</p> <pre><code>conda activate some-environment\nconda install pip\npip install pipx\npipx install poetry\nconda deactivate\n</code></pre>"},{"location":"installation/#step-1-dependency-installation","title":"Step 1: Dependency Installation","text":"<p>The installation of the project's dependencies should be piece of  in most cases by running</p> <pre><code>poetry install\n</code></pre> <p>from within the project directory.</p> <p>No project development intended?</p> <p>If you don't need any development setup, you can pass the <code>--no-dev</code> flag to skip the development dependencies.</p> Computer says no\u2026 <p>In some cases, this does not work right away. Please find a collection of failure cases below (thanks for the feedback! )</p> What? Hint \"I get a <code>ConnectionError</code>\" Maybe you have proxy issues. \"I destroyed my poetry environment\" Delete the <code>.venv</code> folder and create a new env."},{"location":"installation/#step-2-pre-commit-git-hooks-installation","title":"Step 2: Pre-commit Git Hooks Installation","text":"<p>To ensure compatibility of each future commit with the project's conventions (e.g. code format), some predefined git hooks should be installed by running the following commands.</p> <pre><code>poetry shell  # use the created poetry environment\npre-commit install\n</code></pre>"},{"location":"license/","title":"License","text":""},{"location":"license/#gnu-affero-general-public-license","title":"GNU AFFERO GENERAL PUBLIC LICENSE","text":"<p>Version 3, 19 November 2007</p> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"license/#preamble","title":"Preamble","text":"<p>The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users.</p> <p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software.</p> <p>A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public.</p> <p>The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version.</p> <p>An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"license/#terms-and-conditions","title":"TERMS AND CONDITIONS","text":""},{"location":"license/#0-definitions","title":"0. Definitions.","text":"<p>\"This License\" refers to version 3 of the GNU Affero General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>"},{"location":"license/#1-source-code","title":"1. Source Code.","text":"<p>The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p>"},{"location":"license/#2-basic-permissions","title":"2. Basic Permissions.","text":"<p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.</p>"},{"location":"license/#3-protecting-users-legal-rights-from-anti-circumvention-law","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law.","text":"<p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p>"},{"location":"license/#4-conveying-verbatim-copies","title":"4. Conveying Verbatim Copies.","text":"<p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p>"},{"location":"license/#5-conveying-modified-source-versions","title":"5. Conveying Modified Source Versions.","text":"<p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <ul> <li>a) The work must carry prominent notices stating that you modified     it, and giving a relevant date.</li> <li>b) The work must carry prominent notices stating that it is     released under this License and any conditions added under     section 7. This requirement modifies the requirement in section 4     to \"keep intact all notices\".</li> <li>c) You must license the entire work, as a whole, under this     License to anyone who comes into possession of a copy. This     License will therefore apply, along with any applicable section 7     additional terms, to the whole of the work, and all its parts,     regardless of how they are packaged. This License gives no     permission to license the work in any other way, but it does not     invalidate such permission if you have separately received it.</li> <li>d) If the work has interactive user interfaces, each must display     Appropriate Legal Notices; however, if the Program has interactive     interfaces that do not display Appropriate Legal Notices, your     work need not make them do so.</li> </ul> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>"},{"location":"license/#6-conveying-non-source-forms","title":"6. Conveying Non-Source Forms.","text":"<p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <ul> <li>a) Convey the object code in, or embodied in, a physical product     (including a physical distribution medium), accompanied by the     Corresponding Source fixed on a durable physical medium     customarily used for software interchange.</li> <li>b) Convey the object code in, or embodied in, a physical product     (including a physical distribution medium), accompanied by a     written offer, valid for at least three years and valid for as     long as you offer spare parts or customer support for that product     model, to give anyone who possesses the object code either (1) a     copy of the Corresponding Source for all the software in the     product that is covered by this License, on a durable physical     medium customarily used for software interchange, for a price no     more than your reasonable cost of physically performing this     conveying of source, or (2) access to copy the Corresponding     Source from a network server at no charge.</li> <li>c) Convey individual copies of the object code with a copy of the     written offer to provide the Corresponding Source. This     alternative is allowed only occasionally and noncommercially, and     only if you received the object code with such an offer, in accord     with subsection 6b.</li> <li>d) Convey the object code by offering access from a designated     place (gratis or for a charge), and offer equivalent access to the     Corresponding Source in the same way through the same place at no     further charge. You need not require recipients to copy the     Corresponding Source along with the object code. If the place to     copy the object code is a network server, the Corresponding Source     may be on a different server (operated by you or a third party)     that supports equivalent copying facilities, provided you maintain     clear directions next to the object code saying where to find the     Corresponding Source. Regardless of what server hosts the     Corresponding Source, you remain obligated to ensure that it is     available for as long as needed to satisfy these requirements.</li> <li>e) Convey the object code using peer-to-peer transmission,     provided you inform other peers where the object code and     Corresponding Source of the work are being offered to the general     public at no charge under subsection 6d.</li> </ul> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p>"},{"location":"license/#7-additional-terms","title":"7. Additional Terms.","text":"<p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <ul> <li>a) Disclaiming warranty or limiting liability differently from the     terms of sections 15 and 16 of this License; or</li> <li>b) Requiring preservation of specified reasonable legal notices or     author attributions in that material or in the Appropriate Legal     Notices displayed by works containing it; or</li> <li>c) Prohibiting misrepresentation of the origin of that material,     or requiring that modified versions of such material be marked in     reasonable ways as different from the original version; or</li> <li>d) Limiting the use for publicity purposes of names of licensors     or authors of the material; or</li> <li>e) Declining to grant rights under trademark law for use of some     trade names, trademarks, or service marks; or</li> <li>f) Requiring indemnification of licensors and authors of that     material by anyone who conveys the material (or modified versions     of it) with contractual assumptions of liability to the recipient,     for any liability that these contractual assumptions directly     impose on those licensors and authors.</li> </ul> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p>"},{"location":"license/#8-termination","title":"8. Termination.","text":"<p>You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p>"},{"location":"license/#9-acceptance-not-required-for-having-copies","title":"9. Acceptance Not Required for Having Copies.","text":"<p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>"},{"location":"license/#10-automatic-licensing-of-downstream-recipients","title":"10. Automatic Licensing of Downstream Recipients.","text":"<p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p>"},{"location":"license/#11-patents","title":"11. Patents.","text":"<p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p>"},{"location":"license/#12-no-surrender-of-others-freedom","title":"12. No Surrender of Others' Freedom.","text":"<p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p>"},{"location":"license/#13-remote-network-interaction-use-with-the-gnu-general-public-license","title":"13. Remote Network Interaction; Use with the GNU General Public License.","text":"<p>Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph.</p> <p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.</p>"},{"location":"license/#14-revised-versions-of-this-license","title":"14. Revised Versions of this License.","text":"<p>The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p>"},{"location":"license/#15-disclaimer-of-warranty","title":"15. Disclaimer of Warranty.","text":"<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"license/#16-limitation-of-liability","title":"16. Limitation of Liability.","text":"<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"license/#17-interpretation-of-sections-15-and-16","title":"17. Interpretation of Sections 15 and 16.","text":"<p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"license/#how-to-apply-these-terms-to-your-new-programs","title":"How to Apply These Terms to Your New Programs","text":"<p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements.</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/.</p>"},{"location":"supported-tasks-and-methods/","title":"Supported tasks and methods","text":"<p>\ud83d\uddd2\ufe0f Note: Parent tasks are marked with \ud83d\udcdc. Only bottom-level tasks (marked with \u2611\ufe0f) can be used while creating a pipeline.</p> Train \ud83d\udcdc \ud83d\uddd2\ufe0f belongs to KG schema with abbr. <code>ml</code> <ul> Regression \ud83d\udcdc <ul> BayesianRegression \u2611\ufe0f <ul> Inputs <ul> <li>DataInTrainX</li> <li>DataInTrainY</li> <li>InputModelAsMethod</li> </ul> Outputs <ul> <li>DataOutTrainModel</li> </ul> Methods <ul> ARDRegressionMethod <ul> <li>hasParamAlpha1 (float, int)</li> <li>hasParamAlpha2 (float, int)</li> <li>hasParamComputeScore (boolean)</li> <li>hasParamCopyX (boolean)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamLambda1 (float, int)</li> <li>hasParamLambda2 (float, int)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNIter (int)</li> <li>hasParamThresholdLambda (float, int)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> BayesianRidgeMethod <ul> <li>hasParamAlpha1 (float, int)</li> <li>hasParamAlpha2 (float, int)</li> <li>hasParamAlphaInit (float, int)</li> <li>hasParamComputeScore (boolean)</li> <li>hasParamCopyX (boolean)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamLambda1 (float, int)</li> <li>hasParamLambda2 (float, int)</li> <li>hasParamLambdaInit (float, int)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNIter (int)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> </ul> </ul> BoostingRegression \u2611\ufe0f <ul> Inputs <ul> <li>DataInTrainX</li> <li>DataInTrainY</li> <li>InputModelAsMethod</li> </ul> Outputs <ul> <li>DataOutTrainModel</li> </ul> Methods <ul> AdaBoostRegressorMethod <ul> <li>hasParamEstimator (string)</li> <li>hasParamLearningRate (float, int, string)</li> <li>hasParamLoss (string)</li> <li>hasParamNEstimators (int)</li> <li>hasParamRandomState (int, string)</li> </ul> GradientBoostingRegressorMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamCcpAlpha (float, int)</li> <li>hasParamCriterion (string)</li> <li>hasParamInit (string)</li> <li>hasParamLearningRate (float, int, string)</li> <li>hasParamLoss (string)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMinImpurityDecrease (float, int)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMinSamplesSplit (float, int)</li> <li>hasParamMinWeightFractionLeaf (float, int)</li> <li>hasParamNEstimators (int)</li> <li>hasParamNIterNoChange (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSubsample (float, int, string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamValidationFraction (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> HistGradientBoostingRegressorMethod <ul> <li>hasParamCategoricalFeatures (string)</li> <li>hasParamEarlyStopping (boolean)</li> <li>hasParamInteractionCst (int, string)</li> <li>hasParamL2Regularization (float, int)</li> <li>hasParamLearningRate (float, int, string)</li> <li>hasParamLoss (string)</li> <li>hasParamMaxBins (int)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMonotonicCst (string)</li> <li>hasParamNIterNoChange (int)</li> <li>hasParamQuantile (float, int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamScoring (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamValidationFraction (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> </ul> </ul> DecisionTreeRegression \u2611\ufe0f <ul> Inputs <ul> <li>DataInTrainX</li> <li>DataInTrainY</li> <li>InputModelAsMethod</li> </ul> Outputs <ul> <li>DataOutTrainModel</li> </ul> Methods <ul> DecisionTreeRegressorMethod <ul> <li>hasParamCcpAlpha (float, int)</li> <li>hasParamCriterion (string)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMinImpurityDecrease (float, int)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMinSamplesSplit (float, int)</li> <li>hasParamMinWeightFractionLeaf (float, int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSplitter (string)</li> </ul> ExtraTreeRegressorMethod <ul> <li>hasParamCcpAlpha (float, int)</li> <li>hasParamCriterion (string)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMinImpurityDecrease (float, int)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMinSamplesSplit (float, int)</li> <li>hasParamMinWeightFractionLeaf (float, int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSplitter (string)</li> </ul> </ul> </ul> InstanceBasedRegression \u2611\ufe0f <ul> Inputs <ul> <li>DataInTrainX</li> <li>DataInTrainY</li> <li>InputModelAsMethod</li> </ul> Outputs <ul> <li>DataOutTrainModel</li> </ul> Methods <ul> KNeighborsRegressorMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamLeafSize (int)</li> <li>hasParamMetric (string)</li> <li>hasParamMetricParams (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamNNeighbors (int)</li> <li>hasParamP (float, int)</li> <li>hasParamWeights (string)</li> </ul> RadiusNeighborsRegressorMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamLeafSize (int)</li> <li>hasParamMetric (string)</li> <li>hasParamMetricParams (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamP (float, int)</li> <li>hasParamRadius (float, int)</li> <li>hasParamWeights (string)</li> </ul> </ul> </ul> LeastAngleRegression \u2611\ufe0f <ul> Inputs <ul> <li>DataInTrainX</li> <li>DataInTrainY</li> <li>InputModelAsMethod</li> </ul> Outputs <ul> <li>DataOutTrainModel</li> </ul> Methods <ul> LarsMethod <ul> <li>hasParamCopyX (boolean)</li> <li>hasParamEps (float, int)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamFitPath (boolean)</li> <li>hasParamJitter (float, int)</li> <li>hasParamNNonzeroCoefs (int)</li> <li>hasParamPrecompute (boolean, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> LassoLarsMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamCopyX (boolean)</li> <li>hasParamEps (float, int)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamFitPath (boolean)</li> <li>hasParamJitter (float, int)</li> <li>hasParamMaxIter (int)</li> <li>hasParamPositive (boolean)</li> <li>hasParamPrecompute (boolean, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> </ul> </ul> RandomForestRegression \u2611\ufe0f <ul> Inputs <ul> <li>DataInTrainX</li> <li>DataInTrainY</li> <li>InputModelAsMethod</li> </ul> Outputs <ul> <li>DataOutTrainModel</li> </ul> Methods <ul> ExtraTreesRegressorMethod <ul> <li>hasParamBootstrap (boolean)</li> <li>hasParamCcpAlpha (float, int)</li> <li>hasParamCriterion (string)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMaxSamples (float, int)</li> <li>hasParamMinImpurityDecrease (float, int)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMinSamplesSplit (float, int)</li> <li>hasParamMinWeightFractionLeaf (float, int)</li> <li>hasParamNEstimators (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamOobScore (boolean, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> RandomForestRegressorMethod <ul> <li>hasParamBootstrap (boolean)</li> <li>hasParamCcpAlpha (float, int)</li> <li>hasParamCriterion (string)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMaxSamples (float, int)</li> <li>hasParamMinImpurityDecrease (float, int)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMinSamplesSplit (float, int)</li> <li>hasParamMinWeightFractionLeaf (float, int)</li> <li>hasParamNEstimators (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamOobScore (boolean, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> </ul> </ul> RegularizedRegression \u2611\ufe0f <ul> Inputs <ul> <li>DataInTrainX</li> <li>DataInTrainY</li> <li>InputModelAsMethod</li> </ul> Outputs <ul> <li>DataOutTrainModel</li> </ul> Methods <ul> BaggingRegressorMethod <ul> <li>hasParamBootstrap (boolean)</li> <li>hasParamBootstrapFeatures (boolean)</li> <li>hasParamEstimator (string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxSamples (float, int)</li> <li>hasParamNEstimators (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamOobScore (boolean, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> ElasticNetCVMethod <ul> <li>hasParamAlphas (string)</li> <li>hasParamCopyX (boolean)</li> <li>hasParamCv (int, string)</li> <li>hasParamEps (float, int)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamL1Ratio (float, int)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNAlphas (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamPositive (boolean)</li> <li>hasParamPrecompute (boolean, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSelection (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> ElasticNetMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamCopyX (boolean)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamL1Ratio (float, int)</li> <li>hasParamMaxIter (int)</li> <li>hasParamPositive (boolean)</li> <li>hasParamPrecompute (boolean, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSelection (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamWarmStart (boolean)</li> </ul> GammaRegressorMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamMaxIter (int)</li> <li>hasParamSolver (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> HuberRegressorMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamEpsilon (float, int)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamMaxIter (int)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamWarmStart (boolean)</li> </ul> LarsCVMethod <ul> <li>hasParamCopyX (boolean)</li> <li>hasParamCv (int, string)</li> <li>hasParamEps (float, int)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMaxNAlphas (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamPrecompute (boolean, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> LassoCVMethod <ul> <li>hasParamAlphas (string)</li> <li>hasParamCopyX (boolean)</li> <li>hasParamCv (int, string)</li> <li>hasParamEps (float, int)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNAlphas (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamPositive (boolean)</li> <li>hasParamPrecompute (boolean, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSelection (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> LassoLarsCVMethod <ul> <li>hasParamCopyX (boolean)</li> <li>hasParamCv (int, string)</li> <li>hasParamEps (float, int)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMaxNAlphas (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamPositive (boolean)</li> <li>hasParamPrecompute (boolean, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> LassoLarsICMethod <ul> <li>hasParamCopyX (boolean)</li> <li>hasParamCriterion (string)</li> <li>hasParamEps (float, int)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNoiseVariance (float, int)</li> <li>hasParamPositive (boolean)</li> <li>hasParamPrecompute (boolean, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> LassoMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamCopyX (boolean)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamMaxIter (int)</li> <li>hasParamPositive (boolean)</li> <li>hasParamPrecompute (boolean, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSelection (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamWarmStart (boolean)</li> </ul> MLPRegressorMethod <ul> <li>hasParamActivation (string)</li> <li>hasParamAlpha (float, int, string)</li> <li>hasParamBatchSize (int)</li> <li>hasParamBeta1 (float, int)</li> <li>hasParamBeta2 (float, int)</li> <li>hasParamEarlyStopping (boolean)</li> <li>hasParamEpsilon (float, int)</li> <li>hasParamLearningRate (float, int, string)</li> <li>hasParamLearningRateInit (float, int)</li> <li>hasParamMaxFun (int)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMomentum (float, int)</li> <li>hasParamNIterNoChange (int)</li> <li>hasParamNesterovsMomentum (boolean)</li> <li>hasParamPowerT (float, int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamShuffle (boolean)</li> <li>hasParamSolver (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamValidationFraction (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> MultiTaskElasticNetCVMethod <ul> <li>hasParamAlphas (string)</li> <li>hasParamCopyX (boolean)</li> <li>hasParamCv (int, string)</li> <li>hasParamEps (float, int)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamL1Ratio (float, int)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNAlphas (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSelection (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> MultiTaskElasticNetMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamCopyX (boolean)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamL1Ratio (float, int)</li> <li>hasParamMaxIter (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSelection (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamWarmStart (boolean)</li> </ul> MultiTaskLassoCVMethod <ul> <li>hasParamAlphas (string)</li> <li>hasParamCopyX (boolean)</li> <li>hasParamCv (int, string)</li> <li>hasParamEps (float, int)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNAlphas (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSelection (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> MultiTaskLassoMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamCopyX (boolean)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamMaxIter (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSelection (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamWarmStart (boolean)</li> </ul> OneClassSVMMethod <ul> <li>hasParamCacheSize (float, int)</li> <li>hasParamCoef0 (float, int)</li> <li>hasParamDegree (float, int, string)</li> <li>hasParamGamma (float, int, string)</li> <li>hasParamKernel (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNu (float, int)</li> <li>hasParamShrinking (boolean)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> OrthogonalMatchingPursuitCVMethod <ul> <li>hasParamCopy (boolean)</li> <li>hasParamCv (int, string)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> OrthogonalMatchingPursuitMethod <ul> <li>hasParamFitIntercept (boolean)</li> <li>hasParamNNonzeroCoefs (int)</li> <li>hasParamPrecompute (boolean, string)</li> <li>hasParamTol (float, int, string)</li> </ul> PassiveAggressiveRegressorMethod <ul> <li>hasParamAverage (boolean, int, string)</li> <li>hasParamC (float, int)</li> <li>hasParamEarlyStopping (boolean)</li> <li>hasParamEpsilon (float, int)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamLoss (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNIterNoChange (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamShuffle (boolean)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamValidationFraction (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> PoissonRegressorMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamMaxIter (int)</li> <li>hasParamSolver (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> QuantileRegressorMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamQuantile (float, int)</li> <li>hasParamSolver (string)</li> <li>hasParamSolverOptions (string)</li> </ul> RANSACRegressorMethod <ul> <li>hasParamEstimator (string)</li> <li>hasParamIsDataValid (string)</li> <li>hasParamIsModelValid (string)</li> <li>hasParamLoss (string)</li> <li>hasParamMaxSkips (int)</li> <li>hasParamMaxTrials (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamResidualThreshold (float, int)</li> <li>hasParamStopNInliers (int)</li> <li>hasParamStopScore (float, int)</li> </ul> RidgeCVMethod <ul> <li>hasParamAlphaPerTarget (boolean)</li> <li>hasParamCv (int, string)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamGcvMode (string)</li> <li>hasParamScoring (string)</li> <li>hasParamStoreCvValues (boolean)</li> </ul> RidgeMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamCopyX (boolean)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamMaxIter (int)</li> <li>hasParamPositive (boolean)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSolver (string)</li> <li>hasParamTol (float, int, string)</li> </ul> SGDOneClassSVMMethod <ul> <li>hasParamAverage (boolean, int, string)</li> <li>hasParamEta0 (float, int)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamLearningRate (float, int, string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNu (float, int)</li> <li>hasParamPowerT (float, int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamShuffle (boolean)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> SGDRegressorMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamAverage (boolean, int, string)</li> <li>hasParamEarlyStopping (boolean)</li> <li>hasParamEpsilon (float, int)</li> <li>hasParamEta0 (float, int)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamL1Ratio (float, int)</li> <li>hasParamLearningRate (float, int, string)</li> <li>hasParamLoss (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNIterNoChange (int)</li> <li>hasParamPenalty (string)</li> <li>hasParamPowerT (float, int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamShuffle (boolean)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamValidationFraction (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> StackingRegressorMethod <ul> <li>hasParamCv (int, string)</li> <li>hasParamEstimators (string)</li> <li>hasParamFinalEstimator (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamPassthrough (boolean)</li> <li>hasParamVerbose (boolean, int)</li> </ul> TheilSenRegressorMethod <ul> <li>hasParamCopyX (boolean)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMaxSubpopulation (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamNSubsamples (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> TweedieRegressorMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamLink (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamPower (float, int)</li> <li>hasParamSolver (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> VotingRegressorMethod <ul> <li>hasParamEstimators (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> </ul> </ul> SimpleRegression \u2611\ufe0f <ul> Inputs <ul> <li>DataInTrainX</li> <li>DataInTrainY</li> <li>InputModelAsMethod</li> </ul> Outputs <ul> <li>DataOutTrainModel</li> </ul> Methods <ul> LinearRegressionMethod <ul> <li>hasParamCopyX (boolean)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamPositive (boolean)</li> </ul> </ul> </ul> SupportVectorRegression \u2611\ufe0f <ul> Inputs <ul> <li>DataInTrainX</li> <li>DataInTrainY</li> <li>InputModelAsMethod</li> </ul> Outputs <ul> <li>DataOutTrainModel</li> </ul> Methods <ul> LinearSVRMethod <ul> <li>hasParamC (float, int)</li> <li>hasParamDual (boolean)</li> <li>hasParamEpsilon (float, int)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamInterceptScaling (float, int)</li> <li>hasParamLoss (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> NuSVRMethod <ul> <li>hasParamC (float, int)</li> <li>hasParamCacheSize (float, int)</li> <li>hasParamCoef0 (float, int)</li> <li>hasParamDegree (float, int, string)</li> <li>hasParamGamma (float, int, string)</li> <li>hasParamKernel (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNu (float, int)</li> <li>hasParamShrinking (boolean)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> SVRMethod <ul> <li>hasParamC (float, int)</li> <li>hasParamCacheSize (float, int)</li> <li>hasParamCoef0 (float, int)</li> <li>hasParamDegree (float, int, string)</li> <li>hasParamEpsilon (float, int)</li> <li>hasParamGamma (float, int, string)</li> <li>hasParamKernel (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamShrinking (boolean)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> </ul> </ul> </ul> Classification \ud83d\udcdc <ul> BinaryClassification \u2611\ufe0f <ul> Inputs <ul> <li>DataInTrainX</li> <li>DataInTrainY</li> <li>InputModelAsMethod</li> </ul> Outputs <ul> <li>DataOutTrainModel</li> </ul> Methods <ul> AdaBoostClassifierMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamEstimator (string)</li> <li>hasParamLearningRate (float, int, string)</li> <li>hasParamNEstimators (int)</li> <li>hasParamRandomState (int, string)</li> </ul> BaggingClassifierMethod <ul> <li>hasParamBootstrap (boolean)</li> <li>hasParamBootstrapFeatures (boolean)</li> <li>hasParamEstimator (string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxSamples (float, int)</li> <li>hasParamNEstimators (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamOobScore (boolean, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> BernoulliNBMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamBinarize (float, int, string)</li> <li>hasParamFitPrior (boolean)</li> <li>hasParamForceAlpha (boolean)</li> </ul> BernoulliRBMMethod <ul> <li>hasParamBatchSize (int)</li> <li>hasParamLearningRate (float, int, string)</li> <li>hasParamNComponents (float, int, string)</li> <li>hasParamNIter (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> CategoricalNBMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamFitPrior (boolean)</li> <li>hasParamForceAlpha (boolean)</li> <li>hasParamMinCategories (int)</li> </ul> ComplementNBMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamFitPrior (boolean)</li> <li>hasParamForceAlpha (boolean)</li> <li>hasParamNorm (boolean, string)</li> </ul> DecisionTreeClassifierMethod <ul> <li>hasParamCcpAlpha (float, int)</li> <li>hasParamClassWeight (string)</li> <li>hasParamCriterion (string)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMinImpurityDecrease (float, int)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMinSamplesSplit (float, int)</li> <li>hasParamMinWeightFractionLeaf (float, int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSplitter (string)</li> </ul> ExtraTreeClassifierMethod <ul> <li>hasParamCcpAlpha (float, int)</li> <li>hasParamClassWeight (string)</li> <li>hasParamCriterion (string)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMinImpurityDecrease (float, int)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMinSamplesSplit (float, int)</li> <li>hasParamMinWeightFractionLeaf (float, int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSplitter (string)</li> </ul> ExtraTreesClassifierMethod <ul> <li>hasParamBootstrap (boolean)</li> <li>hasParamCcpAlpha (float, int)</li> <li>hasParamClassWeight (string)</li> <li>hasParamCriterion (string)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMaxSamples (float, int)</li> <li>hasParamMinImpurityDecrease (float, int)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMinSamplesSplit (float, int)</li> <li>hasParamMinWeightFractionLeaf (float, int)</li> <li>hasParamNEstimators (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamOobScore (boolean, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> GaussianNBMethod <ul> <li>hasParamVarSmoothing (float, int)</li> </ul> GradientBoostingClassifierMethod <ul> <li>hasParamCcpAlpha (float, int)</li> <li>hasParamCriterion (string)</li> <li>hasParamInit (string)</li> <li>hasParamLearningRate (float, int, string)</li> <li>hasParamLoss (string)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMinImpurityDecrease (float, int)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMinSamplesSplit (float, int)</li> <li>hasParamMinWeightFractionLeaf (float, int)</li> <li>hasParamNEstimators (int)</li> <li>hasParamNIterNoChange (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSubsample (float, int, string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamValidationFraction (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> HistGradientBoostingClassifierMethod <ul> <li>hasParamCategoricalFeatures (string)</li> <li>hasParamClassWeight (string)</li> <li>hasParamEarlyStopping (boolean)</li> <li>hasParamInteractionCst (int, string)</li> <li>hasParamL2Regularization (float, int)</li> <li>hasParamLearningRate (float, int, string)</li> <li>hasParamLoss (string)</li> <li>hasParamMaxBins (int)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMonotonicCst (string)</li> <li>hasParamNIterNoChange (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamScoring (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamValidationFraction (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> KNeighborsClassifierMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamLeafSize (int)</li> <li>hasParamMetric (string)</li> <li>hasParamMetricParams (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamNNeighbors (int)</li> <li>hasParamP (float, int)</li> <li>hasParamWeights (string)</li> </ul> LinearSVCMethod <ul> <li>hasParamC (float, int)</li> <li>hasParamClassWeight (string)</li> <li>hasParamDual (boolean)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamInterceptScaling (float, int)</li> <li>hasParamLoss (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMultiClass (string)</li> <li>hasParamPenalty (string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> LogisticRegressionCVMethod <ul> <li>hasParamClassWeight (string)</li> <li>hasParamCs (int, string)</li> <li>hasParamCv (int, string)</li> <li>hasParamDual (boolean)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamInterceptScaling (float, int)</li> <li>hasParamL1Ratios (float, int)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMultiClass (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamPenalty (string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamRefit (boolean, string)</li> <li>hasParamScoring (string)</li> <li>hasParamSolver (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> LogisticRegressionMethod <ul> <li>hasParamC (float, int)</li> <li>hasParamClassWeight (string)</li> <li>hasParamDual (boolean)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamInterceptScaling (float, int)</li> <li>hasParamL1Ratio (float, int)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMultiClass (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamPenalty (string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSolver (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> MLPClassifierMethod <ul> <li>hasParamActivation (string)</li> <li>hasParamAlpha (float, int, string)</li> <li>hasParamBatchSize (int)</li> <li>hasParamBeta1 (float, int)</li> <li>hasParamBeta2 (float, int)</li> <li>hasParamEarlyStopping (boolean)</li> <li>hasParamEpsilon (float, int)</li> <li>hasParamLearningRate (float, int, string)</li> <li>hasParamLearningRateInit (float, int)</li> <li>hasParamMaxFun (int)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMomentum (float, int)</li> <li>hasParamNIterNoChange (int)</li> <li>hasParamNesterovsMomentum (boolean)</li> <li>hasParamPowerT (float, int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamShuffle (boolean)</li> <li>hasParamSolver (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamValidationFraction (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> MultinomialNBMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamFitPrior (boolean)</li> <li>hasParamForceAlpha (boolean)</li> </ul> NearestCentroidMethod <ul> <li>hasParamMetric (string)</li> <li>hasParamShrinkThreshold (float, int)</li> </ul> NuSVCMethod <ul> <li>hasParamBreakTies (boolean)</li> <li>hasParamCacheSize (float, int)</li> <li>hasParamClassWeight (string)</li> <li>hasParamCoef0 (float, int)</li> <li>hasParamDecisionFunctionShape (string)</li> <li>hasParamDegree (float, int, string)</li> <li>hasParamGamma (float, int, string)</li> <li>hasParamKernel (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNu (float, int)</li> <li>hasParamProbability (boolean)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamShrinking (boolean)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> OneVsOneClassifierMethod <ul> <li>hasParamEstimator (string)</li> <li>hasParamNJobs (int, string)</li> </ul> OneVsRestClassifierMethod <ul> <li>hasParamEstimator (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> OutputCodeClassifierMethod <ul> <li>hasParamCodeSize (float, int)</li> <li>hasParamEstimator (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamRandomState (int, string)</li> </ul> PassiveAggressiveClassifierMethod <ul> <li>hasParamAverage (boolean, int, string)</li> <li>hasParamC (float, int)</li> <li>hasParamClassWeight (string)</li> <li>hasParamEarlyStopping (boolean)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamLoss (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNIterNoChange (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamShuffle (boolean)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamValidationFraction (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> PerceptronMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamClassWeight (string)</li> <li>hasParamEarlyStopping (boolean)</li> <li>hasParamEta0 (float, int)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamL1Ratio (float, int)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNIterNoChange (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamPenalty (string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamShuffle (boolean)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamValidationFraction (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> RadiusNeighborsClassifierMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamLeafSize (int)</li> <li>hasParamMetric (string)</li> <li>hasParamMetricParams (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamOutlierLabel (string)</li> <li>hasParamP (float, int)</li> <li>hasParamRadius (float, int)</li> <li>hasParamWeights (string)</li> </ul> RandomForestClassifierMethod <ul> <li>hasParamBootstrap (boolean)</li> <li>hasParamCcpAlpha (float, int)</li> <li>hasParamClassWeight (string)</li> <li>hasParamCriterion (string)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMaxSamples (float, int)</li> <li>hasParamMinImpurityDecrease (float, int)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMinSamplesSplit (float, int)</li> <li>hasParamMinWeightFractionLeaf (float, int)</li> <li>hasParamNEstimators (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamOobScore (boolean, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> RidgeClassifierCVMethod <ul> <li>hasParamClassWeight (string)</li> <li>hasParamCv (int, string)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamScoring (string)</li> <li>hasParamStoreCvValues (boolean)</li> </ul> RidgeClassifierMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamClassWeight (string)</li> <li>hasParamCopyX (boolean)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamMaxIter (int)</li> <li>hasParamPositive (boolean)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSolver (string)</li> <li>hasParamTol (float, int, string)</li> </ul> SGDClassifierMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamAverage (boolean, int, string)</li> <li>hasParamClassWeight (string)</li> <li>hasParamEarlyStopping (boolean)</li> <li>hasParamEpsilon (float, int)</li> <li>hasParamEta0 (float, int)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamL1Ratio (float, int)</li> <li>hasParamLearningRate (float, int, string)</li> <li>hasParamLoss (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNIterNoChange (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamPenalty (string)</li> <li>hasParamPowerT (float, int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamShuffle (boolean)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamValidationFraction (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> SVCMethod <ul> <li>hasParamBreakTies (boolean)</li> <li>hasParamC (float, int)</li> <li>hasParamCacheSize (float, int)</li> <li>hasParamClassWeight (string)</li> <li>hasParamCoef0 (float, int)</li> <li>hasParamDecisionFunctionShape (string)</li> <li>hasParamDegree (float, int, string)</li> <li>hasParamGamma (float, int, string)</li> <li>hasParamKernel (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamProbability (boolean)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamShrinking (boolean)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> StackingClassifierMethod <ul> <li>hasParamCv (int, string)</li> <li>hasParamEstimators (string)</li> <li>hasParamFinalEstimator (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamPassthrough (boolean)</li> <li>hasParamStackMethod (string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> VotingClassifierMethod <ul> <li>hasParamEstimators (string)</li> <li>hasParamFlattenTransform (boolean)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamVoting (string)</li> </ul> </ul> </ul> MulticlassClassification \u2611\ufe0f <ul> Inputs <ul> <li>DataInTrainX</li> <li>DataInTrainY</li> <li>InputModelAsMethod</li> </ul> Outputs <ul> <li>DataOutTrainModel</li> </ul> Methods <ul> AdaBoostClassifierMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamEstimator (string)</li> <li>hasParamLearningRate (float, int, string)</li> <li>hasParamNEstimators (int)</li> <li>hasParamRandomState (int, string)</li> </ul> BernoulliNBMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamBinarize (float, int, string)</li> <li>hasParamFitPrior (boolean)</li> <li>hasParamForceAlpha (boolean)</li> </ul> DecisionTreeClassifierMethod <ul> <li>hasParamCcpAlpha (float, int)</li> <li>hasParamClassWeight (string)</li> <li>hasParamCriterion (string)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMinImpurityDecrease (float, int)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMinSamplesSplit (float, int)</li> <li>hasParamMinWeightFractionLeaf (float, int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSplitter (string)</li> </ul> ExtraTreeClassifierMethod <ul> <li>hasParamCcpAlpha (float, int)</li> <li>hasParamClassWeight (string)</li> <li>hasParamCriterion (string)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMinImpurityDecrease (float, int)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMinSamplesSplit (float, int)</li> <li>hasParamMinWeightFractionLeaf (float, int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSplitter (string)</li> </ul> ExtraTreesClassifierMethod <ul> <li>hasParamBootstrap (boolean)</li> <li>hasParamCcpAlpha (float, int)</li> <li>hasParamClassWeight (string)</li> <li>hasParamCriterion (string)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMaxSamples (float, int)</li> <li>hasParamMinImpurityDecrease (float, int)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMinSamplesSplit (float, int)</li> <li>hasParamMinWeightFractionLeaf (float, int)</li> <li>hasParamNEstimators (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamOobScore (boolean, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> GaussianNBMethod <ul> <li>hasParamVarSmoothing (float, int)</li> </ul> GradientBoostingClassifierMethod <ul> <li>hasParamCcpAlpha (float, int)</li> <li>hasParamCriterion (string)</li> <li>hasParamInit (string)</li> <li>hasParamLearningRate (float, int, string)</li> <li>hasParamLoss (string)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMinImpurityDecrease (float, int)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMinSamplesSplit (float, int)</li> <li>hasParamMinWeightFractionLeaf (float, int)</li> <li>hasParamNEstimators (int)</li> <li>hasParamNIterNoChange (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSubsample (float, int, string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamValidationFraction (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> HistGradientBoostingClassifierMethod <ul> <li>hasParamCategoricalFeatures (string)</li> <li>hasParamClassWeight (string)</li> <li>hasParamEarlyStopping (boolean)</li> <li>hasParamInteractionCst (int, string)</li> <li>hasParamL2Regularization (float, int)</li> <li>hasParamLearningRate (float, int, string)</li> <li>hasParamLoss (string)</li> <li>hasParamMaxBins (int)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMonotonicCst (string)</li> <li>hasParamNIterNoChange (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamScoring (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamValidationFraction (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> KNeighborsClassifierMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamLeafSize (int)</li> <li>hasParamMetric (string)</li> <li>hasParamMetricParams (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamNNeighbors (int)</li> <li>hasParamP (float, int)</li> <li>hasParamWeights (string)</li> </ul> LinearSVCMethod <ul> <li>hasParamC (float, int)</li> <li>hasParamClassWeight (string)</li> <li>hasParamDual (boolean)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamInterceptScaling (float, int)</li> <li>hasParamLoss (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMultiClass (string)</li> <li>hasParamPenalty (string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> LogisticRegressionCVMethod <ul> <li>hasParamClassWeight (string)</li> <li>hasParamCs (int, string)</li> <li>hasParamCv (int, string)</li> <li>hasParamDual (boolean)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamInterceptScaling (float, int)</li> <li>hasParamL1Ratios (float, int)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMultiClass (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamPenalty (string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamRefit (boolean, string)</li> <li>hasParamScoring (string)</li> <li>hasParamSolver (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> LogisticRegressionMethod <ul> <li>hasParamC (float, int)</li> <li>hasParamClassWeight (string)</li> <li>hasParamDual (boolean)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamInterceptScaling (float, int)</li> <li>hasParamL1Ratio (float, int)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMultiClass (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamPenalty (string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSolver (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> MLPClassifierMethod <ul> <li>hasParamActivation (string)</li> <li>hasParamAlpha (float, int, string)</li> <li>hasParamBatchSize (int)</li> <li>hasParamBeta1 (float, int)</li> <li>hasParamBeta2 (float, int)</li> <li>hasParamEarlyStopping (boolean)</li> <li>hasParamEpsilon (float, int)</li> <li>hasParamLearningRate (float, int, string)</li> <li>hasParamLearningRateInit (float, int)</li> <li>hasParamMaxFun (int)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMomentum (float, int)</li> <li>hasParamNIterNoChange (int)</li> <li>hasParamNesterovsMomentum (boolean)</li> <li>hasParamPowerT (float, int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamShuffle (boolean)</li> <li>hasParamSolver (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamValidationFraction (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> NearestCentroidMethod <ul> <li>hasParamMetric (string)</li> <li>hasParamShrinkThreshold (float, int)</li> </ul> NuSVCMethod <ul> <li>hasParamBreakTies (boolean)</li> <li>hasParamCacheSize (float, int)</li> <li>hasParamClassWeight (string)</li> <li>hasParamCoef0 (float, int)</li> <li>hasParamDecisionFunctionShape (string)</li> <li>hasParamDegree (float, int, string)</li> <li>hasParamGamma (float, int, string)</li> <li>hasParamKernel (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNu (float, int)</li> <li>hasParamProbability (boolean)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamShrinking (boolean)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> OneVsOneClassifierMethod <ul> <li>hasParamEstimator (string)</li> <li>hasParamNJobs (int, string)</li> </ul> OneVsRestClassifierMethod <ul> <li>hasParamEstimator (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> OutputCodeClassifierMethod <ul> <li>hasParamCodeSize (float, int)</li> <li>hasParamEstimator (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamRandomState (int, string)</li> </ul> PassiveAggressiveClassifierMethod <ul> <li>hasParamAverage (boolean, int, string)</li> <li>hasParamC (float, int)</li> <li>hasParamClassWeight (string)</li> <li>hasParamEarlyStopping (boolean)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamLoss (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNIterNoChange (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamShuffle (boolean)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamValidationFraction (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> PerceptronMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamClassWeight (string)</li> <li>hasParamEarlyStopping (boolean)</li> <li>hasParamEta0 (float, int)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamL1Ratio (float, int)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNIterNoChange (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamPenalty (string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamShuffle (boolean)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamValidationFraction (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> RadiusNeighborsClassifierMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamLeafSize (int)</li> <li>hasParamMetric (string)</li> <li>hasParamMetricParams (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamOutlierLabel (string)</li> <li>hasParamP (float, int)</li> <li>hasParamRadius (float, int)</li> <li>hasParamWeights (string)</li> </ul> RandomForestClassifierMethod <ul> <li>hasParamBootstrap (boolean)</li> <li>hasParamCcpAlpha (float, int)</li> <li>hasParamClassWeight (string)</li> <li>hasParamCriterion (string)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMaxSamples (float, int)</li> <li>hasParamMinImpurityDecrease (float, int)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMinSamplesSplit (float, int)</li> <li>hasParamMinWeightFractionLeaf (float, int)</li> <li>hasParamNEstimators (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamOobScore (boolean, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> RidgeClassifierCVMethod <ul> <li>hasParamClassWeight (string)</li> <li>hasParamCv (int, string)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamScoring (string)</li> <li>hasParamStoreCvValues (boolean)</li> </ul> RidgeClassifierMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamClassWeight (string)</li> <li>hasParamCopyX (boolean)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamMaxIter (int)</li> <li>hasParamPositive (boolean)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSolver (string)</li> <li>hasParamTol (float, int, string)</li> </ul> SGDClassifierMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamAverage (boolean, int, string)</li> <li>hasParamClassWeight (string)</li> <li>hasParamEarlyStopping (boolean)</li> <li>hasParamEpsilon (float, int)</li> <li>hasParamEta0 (float, int)</li> <li>hasParamFitIntercept (boolean)</li> <li>hasParamL1Ratio (float, int)</li> <li>hasParamLearningRate (float, int, string)</li> <li>hasParamLoss (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNIterNoChange (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamPenalty (string)</li> <li>hasParamPowerT (float, int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamShuffle (boolean)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamValidationFraction (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> SVCMethod <ul> <li>hasParamBreakTies (boolean)</li> <li>hasParamC (float, int)</li> <li>hasParamCacheSize (float, int)</li> <li>hasParamClassWeight (string)</li> <li>hasParamCoef0 (float, int)</li> <li>hasParamDecisionFunctionShape (string)</li> <li>hasParamDegree (float, int, string)</li> <li>hasParamGamma (float, int, string)</li> <li>hasParamKernel (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamProbability (boolean)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamShrinking (boolean)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> </ul> </ul> MultilabelClassification \u2611\ufe0f <ul> Inputs <ul> <li>DataInTrainX</li> <li>DataInTrainY</li> <li>InputModelAsMethod</li> </ul> Outputs <ul> <li>DataOutTrainModel</li> </ul> Methods <ul> AdaBoostClassifierMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamEstimator (string)</li> <li>hasParamLearningRate (float, int, string)</li> <li>hasParamNEstimators (int)</li> <li>hasParamRandomState (int, string)</li> </ul> DecisionTreeClassifierMethod <ul> <li>hasParamCcpAlpha (float, int)</li> <li>hasParamClassWeight (string)</li> <li>hasParamCriterion (string)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMinImpurityDecrease (float, int)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMinSamplesSplit (float, int)</li> <li>hasParamMinWeightFractionLeaf (float, int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSplitter (string)</li> </ul> ExtraTreeClassifierMethod <ul> <li>hasParamCcpAlpha (float, int)</li> <li>hasParamClassWeight (string)</li> <li>hasParamCriterion (string)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMinImpurityDecrease (float, int)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMinSamplesSplit (float, int)</li> <li>hasParamMinWeightFractionLeaf (float, int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSplitter (string)</li> </ul> ExtraTreesClassifierMethod <ul> <li>hasParamBootstrap (boolean)</li> <li>hasParamCcpAlpha (float, int)</li> <li>hasParamClassWeight (string)</li> <li>hasParamCriterion (string)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMaxSamples (float, int)</li> <li>hasParamMinImpurityDecrease (float, int)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMinSamplesSplit (float, int)</li> <li>hasParamMinWeightFractionLeaf (float, int)</li> <li>hasParamNEstimators (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamOobScore (boolean, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> GradientBoostingClassifierMethod <ul> <li>hasParamCcpAlpha (float, int)</li> <li>hasParamCriterion (string)</li> <li>hasParamInit (string)</li> <li>hasParamLearningRate (float, int, string)</li> <li>hasParamLoss (string)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMinImpurityDecrease (float, int)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMinSamplesSplit (float, int)</li> <li>hasParamMinWeightFractionLeaf (float, int)</li> <li>hasParamNEstimators (int)</li> <li>hasParamNIterNoChange (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSubsample (float, int, string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamValidationFraction (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> HistGradientBoostingClassifierMethod <ul> <li>hasParamCategoricalFeatures (string)</li> <li>hasParamClassWeight (string)</li> <li>hasParamEarlyStopping (boolean)</li> <li>hasParamInteractionCst (int, string)</li> <li>hasParamL2Regularization (float, int)</li> <li>hasParamLearningRate (float, int, string)</li> <li>hasParamLoss (string)</li> <li>hasParamMaxBins (int)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMonotonicCst (string)</li> <li>hasParamNIterNoChange (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamScoring (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamValidationFraction (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> KNeighborsClassifierMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamLeafSize (int)</li> <li>hasParamMetric (string)</li> <li>hasParamMetricParams (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamNNeighbors (int)</li> <li>hasParamP (float, int)</li> <li>hasParamWeights (string)</li> </ul> OneVsOneClassifierMethod <ul> <li>hasParamEstimator (string)</li> <li>hasParamNJobs (int, string)</li> </ul> OneVsRestClassifierMethod <ul> <li>hasParamEstimator (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> OutputCodeClassifierMethod <ul> <li>hasParamCodeSize (float, int)</li> <li>hasParamEstimator (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamRandomState (int, string)</li> </ul> RadiusNeighborsClassifierMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamLeafSize (int)</li> <li>hasParamMetric (string)</li> <li>hasParamMetricParams (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamOutlierLabel (string)</li> <li>hasParamP (float, int)</li> <li>hasParamRadius (float, int)</li> <li>hasParamWeights (string)</li> </ul> RandomForestClassifierMethod <ul> <li>hasParamBootstrap (boolean)</li> <li>hasParamCcpAlpha (float, int)</li> <li>hasParamClassWeight (string)</li> <li>hasParamCriterion (string)</li> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMaxSamples (float, int)</li> <li>hasParamMinImpurityDecrease (float, int)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMinSamplesSplit (float, int)</li> <li>hasParamMinWeightFractionLeaf (float, int)</li> <li>hasParamNEstimators (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamOobScore (boolean, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> </ul> </ul> </ul> Clustering \u2611\ufe0f <ul> Inputs <ul> <li>DataInTrainX</li> <li>DataInTrainY</li> <li>InputModelAsMethod</li> </ul> Outputs <ul> <li>DataOutTrainModel</li> </ul> Methods <ul> AffinityPropagationMethod <ul> <li>hasParamAffinity (string)</li> <li>hasParamConvergenceIter (int)</li> <li>hasParamCopy (boolean)</li> <li>hasParamDamping (float, int)</li> <li>hasParamMaxIter (int)</li> <li>hasParamPreference (float, int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> AgglomerativeClusteringMethod <ul> <li>hasParamComputeDistances (boolean)</li> <li>hasParamComputeFullTree (boolean)</li> <li>hasParamConnectivity (string)</li> <li>hasParamDistanceThreshold (float, int)</li> <li>hasParamLinkage (string)</li> <li>hasParamMemory (string)</li> <li>hasParamMetric (string)</li> <li>hasParamNClusters (int, string)</li> </ul> BirchMethod <ul> <li>hasParamBranchingFactor (int)</li> <li>hasParamComputeLabels (boolean)</li> <li>hasParamCopy (boolean)</li> <li>hasParamNClusters (int, string)</li> <li>hasParamThreshold (float, int, string)</li> </ul> BisectingKMeansMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamBisectingStrategy (string)</li> <li>hasParamCopyX (boolean)</li> <li>hasParamInit (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNClusters (int, string)</li> <li>hasParamNInit (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> DBSCANMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamEps (float, int)</li> <li>hasParamLeafSize (int)</li> <li>hasParamMetric (string)</li> <li>hasParamMetricParams (string)</li> <li>hasParamMinSamples (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamP (float, int)</li> </ul> HDBSCANMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamAllowSingleCluster (boolean)</li> <li>hasParamAlpha (float, int, string)</li> <li>hasParamClusterSelectionEpsilon (float, int)</li> <li>hasParamClusterSelectionMethod (string)</li> <li>hasParamCopy (boolean)</li> <li>hasParamLeafSize (int)</li> <li>hasParamMaxClusterSize (int)</li> <li>hasParamMetric (string)</li> <li>hasParamMetricParams (string)</li> <li>hasParamMinClusterSize (int)</li> <li>hasParamMinSamples (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamStoreCenters (string)</li> </ul> IsolationForestMethod <ul> <li>hasParamBootstrap (boolean)</li> <li>hasParamContamination (float, int)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamMaxSamples (float, int)</li> <li>hasParamNEstimators (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> KMeansMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamCopyX (boolean)</li> <li>hasParamInit (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNClusters (int, string)</li> <li>hasParamNInit (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> KNeighborsTransformerMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamLeafSize (int)</li> <li>hasParamMetric (string)</li> <li>hasParamMetricParams (string)</li> <li>hasParamMode (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamNNeighbors (int)</li> <li>hasParamP (float, int)</li> </ul> KernelDensityMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamAtol (float, int)</li> <li>hasParamBandwidth (float, int, string)</li> <li>hasParamBreadthFirst (boolean)</li> <li>hasParamKernel (string)</li> <li>hasParamLeafSize (int)</li> <li>hasParamMetric (string)</li> <li>hasParamMetricParams (string)</li> <li>hasParamRtol (float, int)</li> </ul> LocalOutlierFactorMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamContamination (float, int)</li> <li>hasParamLeafSize (int)</li> <li>hasParamMetric (string)</li> <li>hasParamMetricParams (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamNNeighbors (int)</li> <li>hasParamNovelty (boolean)</li> <li>hasParamP (float, int)</li> </ul> MeanShiftMethod <ul> <li>hasParamBandwidth (float, int, string)</li> <li>hasParamBinSeeding (boolean)</li> <li>hasParamClusterAll (boolean)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMinBinFreq (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamSeeds (string)</li> </ul> MiniBatchKMeansMethod <ul> <li>hasParamBatchSize (int)</li> <li>hasParamComputeLabels (boolean)</li> <li>hasParamInit (string)</li> <li>hasParamInitSize (int)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMaxNoImprovement (int, string)</li> <li>hasParamNClusters (int, string)</li> <li>hasParamNInit (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamReassignmentRatio (float, int)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> NearestNeighborsMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamLeafSize (int)</li> <li>hasParamMetric (string)</li> <li>hasParamMetricParams (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamNNeighbors (int)</li> <li>hasParamRadius (float, int)</li> </ul> OPTICSMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamClusterMethod (string)</li> <li>hasParamEps (float, int)</li> <li>hasParamLeafSize (int)</li> <li>hasParamMaxEps (float, int)</li> <li>hasParamMemory (string)</li> <li>hasParamMetric (string)</li> <li>hasParamMetricParams (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamP (float, int)</li> <li>hasParamPredecessorCorrection (boolean)</li> </ul> RadiusNeighborsTransformerMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamLeafSize (int)</li> <li>hasParamMetric (string)</li> <li>hasParamMetricParams (string)</li> <li>hasParamMode (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamP (float, int)</li> <li>hasParamRadius (float, int)</li> </ul> SpectralBiclusteringMethod <ul> <li>hasParamInit (string)</li> <li>hasParamMethod (string)</li> <li>hasParamMiniBatch (boolean)</li> <li>hasParamNBest (int)</li> <li>hasParamNClusters (int, string)</li> <li>hasParamNComponents (float, int, string)</li> <li>hasParamNInit (int)</li> <li>hasParamNSvdVecs (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSvdMethod (string)</li> </ul> SpectralClusteringMethod <ul> <li>hasParamAffinity (string)</li> <li>hasParamAssignLabels (string)</li> <li>hasParamCoef0 (float, int)</li> <li>hasParamDegree (float, int, string)</li> <li>hasParamEigenSolver (string)</li> <li>hasParamEigenTol (float, int)</li> <li>hasParamGamma (float, int, string)</li> <li>hasParamKernelParams (string)</li> <li>hasParamNClusters (int, string)</li> <li>hasParamNComponents (float, int, string)</li> <li>hasParamNInit (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamNNeighbors (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> SpectralCoclusteringMethod <ul> <li>hasParamInit (string)</li> <li>hasParamMiniBatch (boolean)</li> <li>hasParamNClusters (int, string)</li> <li>hasParamNInit (int)</li> <li>hasParamNSvdVecs (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSvdMethod (string)</li> </ul> </ul> </ul> ModelSelection \u2611\ufe0f <ul> Inputs <ul> <li>DataInTrainX</li> <li>DataInTrainY</li> <li>InputModelAsMethod</li> </ul> Outputs <ul> <li>DataOutTrainModel</li> </ul> Methods <ul> GridSearchCVMethod <ul> <li>hasParamCv (int, string)</li> <li>hasParamErrorScore (string)</li> <li>hasParamEstimator (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamParamGrid (string)</li> <li>hasParamPreDispatch (int, string)</li> <li>hasParamRefit (boolean, string)</li> <li>hasParamReturnTrainScore (boolean)</li> <li>hasParamScoring (string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> HalvingGridSearchCVMethod <ul> <li>hasParamAggressiveElimination (boolean)</li> <li>hasParamCv (int, string)</li> <li>hasParamErrorScore (string)</li> <li>hasParamEstimator (string)</li> <li>hasParamFactor (float, int)</li> <li>hasParamMaxResources (int)</li> <li>hasParamMinResources (int, string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamParamGrid (string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamRefit (boolean, string)</li> <li>hasParamResource (string)</li> <li>hasParamReturnTrainScore (boolean)</li> <li>hasParamScoring (string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> HalvingRandomSearchCVMethod <ul> <li>hasParamAggressiveElimination (boolean)</li> <li>hasParamCv (int, string)</li> <li>hasParamErrorScore (string)</li> <li>hasParamEstimator (string)</li> <li>hasParamFactor (float, int)</li> <li>hasParamMaxResources (int)</li> <li>hasParamMinResources (int, string)</li> <li>hasParamNCandidates (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamParamDistributions (string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamRefit (boolean, string)</li> <li>hasParamResource (string)</li> <li>hasParamReturnTrainScore (boolean)</li> <li>hasParamScoring (string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> RandomizedSearchCVMethod <ul> <li>hasParamCv (int, string)</li> <li>hasParamErrorScore (string)</li> <li>hasParamEstimator (string)</li> <li>hasParamNIter (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamParamDistributions (string)</li> <li>hasParamPreDispatch (int, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamRefit (boolean, string)</li> <li>hasParamReturnTrainScore (boolean)</li> <li>hasParamScoring (string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> </ul> </ul> </ul> Concatenation \u2611\ufe0f \ud83d\uddd2\ufe0f belongs to KG schema with abbr. <code>ml</code> <ul> Inputs <ul> <li>DataInConcatenation</li> </ul> Outputs <ul> <li>DataOutConcatenatedData</li> </ul> Methods <ul> ConcatenationMethod <ul>No parameters</ul> </ul> </ul> PrepareTransformer \ud83d\udcdc \ud83d\uddd2\ufe0f belongs to KG schema with abbr. <code>ml</code> <ul> DataProcessing \u2611\ufe0f <ul> Inputs <ul> <li>DataInToPrepareTransformer</li> </ul> Outputs <ul> <li>DataOutTransformer</li> </ul> Methods <ul> BinarizerMethod <ul> <li>hasParamCopy (boolean)</li> <li>hasParamThreshold (float, int, string)</li> </ul> DictVectorizerMethod <ul> <li>hasParamDtype (string)</li> <li>hasParamSeparator (string)</li> <li>hasParamSort (boolean)</li> <li>hasParamSparse (boolean)</li> </ul> FeatureHasherMethod <ul> <li>hasParamAlternateSign (boolean)</li> <li>hasParamDtype (string)</li> <li>hasParamInputType (string)</li> <li>hasParamNFeatures (int)</li> </ul> FunctionTransformerMethod <ul> <li>hasParamAcceptSparse (boolean)</li> <li>hasParamCheckInverse (boolean)</li> <li>hasParamFeatureNamesOut (string)</li> <li>hasParamFunc (string)</li> <li>hasParamInvKwArgs (string)</li> <li>hasParamInverseFunc (string)</li> <li>hasParamKwArgs (string)</li> <li>hasParamValidate (boolean)</li> </ul> KBinsDiscretizerMethod <ul> <li>hasParamDtype (string)</li> <li>hasParamEncode (string)</li> <li>hasParamNBins (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamStrategy (string)</li> <li>hasParamSubsample (float, int, string)</li> </ul> KNNImputerMethod <ul> <li>hasParamAddIndicator (boolean)</li> <li>hasParamCopy (boolean)</li> <li>hasParamKeepEmptyFeatures (boolean)</li> <li>hasParamMetric (string)</li> <li>hasParamMissingValues (float, int, string)</li> <li>hasParamNNeighbors (int)</li> <li>hasParamWeights (string)</li> </ul> KernelCentererMethod <ul>No parameters</ul> LabelBinarizerMethod <ul> <li>hasParamNegLabel (int)</li> <li>hasParamPosLabel (boolean, float, int, string)</li> <li>hasParamSparseOutput (boolean)</li> </ul> MaxAbsScalerMethod <ul> <li>hasParamCopy (boolean)</li> </ul> MinMaxScalerMethod <ul> <li>hasParamClip (boolean)</li> <li>hasParamCopy (boolean)</li> <li>hasParamFeatureRange (string)</li> </ul> MissingIndicatorMethod <ul> <li>hasParamErrorOnNew (boolean)</li> <li>hasParamFeatures (string)</li> <li>hasParamMissingValues (float, int, string)</li> <li>hasParamSparse (boolean)</li> </ul> MultiLabelBinarizerMethod <ul> <li>hasParamSparseOutput (boolean)</li> </ul> NormalizerMethod <ul> <li>hasParamCopy (boolean)</li> <li>hasParamNorm (boolean, string)</li> </ul> OneHotEncoderMethod <ul> <li>hasParamCategories (string)</li> <li>hasParamDrop (string)</li> <li>hasParamDtype (string)</li> <li>hasParamFeatureNameCombiner (string)</li> <li>hasParamHandleUnknown (string)</li> <li>hasParamMaxCategories (int)</li> <li>hasParamMinFrequency (float, int)</li> <li>hasParamSparseOutput (boolean)</li> </ul> OrdinalEncoderMethod <ul> <li>hasParamCategories (string)</li> <li>hasParamDtype (string)</li> <li>hasParamEncodedMissingValue (int, string)</li> <li>hasParamHandleUnknown (string)</li> <li>hasParamMaxCategories (int)</li> <li>hasParamMinFrequency (float, int)</li> <li>hasParamUnknownValue (int, string)</li> </ul> PolynomialFeaturesMethod <ul> <li>hasParamDegree (float, int, string)</li> <li>hasParamIncludeBias (boolean)</li> <li>hasParamInteractionOnly (boolean)</li> <li>hasParamOrder (string)</li> </ul> PowerTransformerMethod <ul> <li>hasParamCopy (boolean)</li> <li>hasParamMethod (string)</li> <li>hasParamStandardize (boolean)</li> </ul> QuantileTransformerMethod <ul> <li>hasParamCopy (boolean)</li> <li>hasParamIgnoreImplicitZeros (boolean)</li> <li>hasParamNQuantiles (int)</li> <li>hasParamOutputDistribution (string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSubsample (float, int, string)</li> </ul> RandomTreesEmbeddingMethod <ul> <li>hasParamMaxDepth (int, string)</li> <li>hasParamMaxLeafNodes (int, string)</li> <li>hasParamMinImpurityDecrease (float, int)</li> <li>hasParamMinSamplesLeaf (float, int)</li> <li>hasParamMinSamplesSplit (float, int)</li> <li>hasParamMinWeightFractionLeaf (float, int)</li> <li>hasParamNEstimators (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSparseOutput (boolean)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> RobustScalerMethod <ul> <li>hasParamCopy (boolean)</li> <li>hasParamQuantileRange (string)</li> <li>hasParamUnitVariance (boolean)</li> <li>hasParamWithCentering (boolean)</li> <li>hasParamWithScaling (boolean)</li> </ul> SimpleImputerMethod <ul> <li>hasParamAddIndicator (boolean)</li> <li>hasParamCopy (boolean)</li> <li>hasParamFillValue (string)</li> <li>hasParamKeepEmptyFeatures (boolean)</li> <li>hasParamMissingValues (float, int, string)</li> <li>hasParamStrategy (string)</li> </ul> SplineTransformerMethod <ul> <li>hasParamDegree (float, int, string)</li> <li>hasParamExtrapolation (string)</li> <li>hasParamIncludeBias (boolean)</li> <li>hasParamKnots (string)</li> <li>hasParamNKnots (int)</li> <li>hasParamOrder (string)</li> <li>hasParamSparseOutput (boolean)</li> </ul> StandardScalerMethod <ul> <li>hasParamCopy (boolean)</li> <li>hasParamWithMean (boolean)</li> <li>hasParamWithStd (boolean)</li> </ul> TargetEncoderMethod <ul> <li>hasParamCategories (string)</li> <li>hasParamCv (int, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamShuffle (boolean)</li> <li>hasParamSmooth (float, int)</li> <li>hasParamTargetType (string)</li> </ul> </ul> </ul> Decomposition \u2611\ufe0f <ul> Inputs <ul> <li>DataInToPrepareTransformer</li> </ul> Outputs <ul> <li>DataOutTransformer</li> </ul> Methods <ul> DictionaryLearningMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamCallback (string)</li> <li>hasParamCodeInit (string)</li> <li>hasParamDictInit (string)</li> <li>hasParamFitAlgorithm (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNComponents (float, int, string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamPositiveCode (boolean)</li> <li>hasParamPositiveDict (boolean)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSplitSign (boolean)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamTransformAlgorithm (string)</li> <li>hasParamTransformAlpha (float, int)</li> <li>hasParamTransformMaxIter (int)</li> <li>hasParamTransformNNonzeroCoefs (int)</li> <li>hasParamVerbose (boolean, int)</li> </ul> FactorAnalysisMethod <ul> <li>hasParamCopy (boolean)</li> <li>hasParamIteratedPower (int)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNComponents (float, int, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamRotation (string)</li> <li>hasParamSvdMethod (string)</li> <li>hasParamTol (float, int, string)</li> </ul> FastICAMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamFun (string)</li> <li>hasParamFunArgs (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNComponents (float, int, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamWInit (string)</li> <li>hasParamWhiten (boolean, string)</li> <li>hasParamWhitenSolver (string)</li> </ul> FeatureAgglomerationMethod <ul> <li>hasParamComputeDistances (boolean)</li> <li>hasParamComputeFullTree (boolean)</li> <li>hasParamConnectivity (string)</li> <li>hasParamDistanceThreshold (float, int)</li> <li>hasParamLinkage (string)</li> <li>hasParamMemory (string)</li> <li>hasParamMetric (string)</li> <li>hasParamNClusters (int, string)</li> <li>hasParamPoolingFunc (string)</li> </ul> IncrementalPCAMethod <ul> <li>hasParamBatchSize (int)</li> <li>hasParamCopy (boolean)</li> <li>hasParamNComponents (float, int, string)</li> <li>hasParamWhiten (boolean, string)</li> </ul> KernelPCAMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamCoef0 (float, int)</li> <li>hasParamCopyX (boolean)</li> <li>hasParamDegree (float, int, string)</li> <li>hasParamEigenSolver (string)</li> <li>hasParamFitInverseTransform (boolean)</li> <li>hasParamGamma (float, int, string)</li> <li>hasParamKernel (string)</li> <li>hasParamKernelParams (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNComponents (float, int, string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamRemoveZeroEig (boolean)</li> <li>hasParamTol (float, int, string)</li> </ul> LatentDirichletAllocationMethod <ul> <li>hasParamBatchSize (int)</li> <li>hasParamDocTopicPrior (float, int)</li> <li>hasParamEvaluateEvery (int)</li> <li>hasParamLearningDecay (float, int)</li> <li>hasParamLearningMethod (string)</li> <li>hasParamLearningOffset (float, int)</li> <li>hasParamMaxDocUpdateIter (int)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMeanChangeTol (float, int)</li> <li>hasParamNComponents (float, int, string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamPerpTol (float, int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamTopicWordPrior (float, int)</li> <li>hasParamTotalSamples (int)</li> <li>hasParamVerbose (boolean, int)</li> </ul> MiniBatchDictionaryLearningMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamBatchSize (int)</li> <li>hasParamCallback (string)</li> <li>hasParamDictInit (string)</li> <li>hasParamFitAlgorithm (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMaxNoImprovement (int, string)</li> <li>hasParamNComponents (float, int, string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamPositiveCode (boolean)</li> <li>hasParamPositiveDict (boolean)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamShuffle (boolean)</li> <li>hasParamSplitSign (boolean)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamTransformAlgorithm (string)</li> <li>hasParamTransformAlpha (float, int)</li> <li>hasParamTransformMaxIter (int)</li> <li>hasParamTransformNNonzeroCoefs (int)</li> <li>hasParamVerbose (boolean, int)</li> </ul> MiniBatchNMFMethod <ul> <li>hasParamAlphaH (float, int)</li> <li>hasParamAlphaW (float, int)</li> <li>hasParamBatchSize (int)</li> <li>hasParamBetaLoss (float, int, string)</li> <li>hasParamForgetFactor (float, int)</li> <li>hasParamFreshRestarts (boolean)</li> <li>hasParamFreshRestartsMaxIter (int)</li> <li>hasParamInit (string)</li> <li>hasParamL1Ratio (float, int)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMaxNoImprovement (int, string)</li> <li>hasParamNComponents (float, int, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamTransformMaxIter (int)</li> <li>hasParamVerbose (boolean, int)</li> </ul> MiniBatchSparsePCAMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamBatchSize (int)</li> <li>hasParamCallback (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMaxNoImprovement (int, string)</li> <li>hasParamMethod (string)</li> <li>hasParamNComponents (float, int, string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamRidgeAlpha (float, int)</li> <li>hasParamShuffle (boolean)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> NMFMethod <ul> <li>hasParamAlphaH (float, int)</li> <li>hasParamAlphaW (float, int)</li> <li>hasParamBetaLoss (float, int, string)</li> <li>hasParamInit (string)</li> <li>hasParamL1Ratio (float, int)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNComponents (float, int, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamShuffle (boolean)</li> <li>hasParamSolver (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> NeighborhoodComponentsAnalysisMethod <ul> <li>hasParamCallback (string)</li> <li>hasParamInit (string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamNComponents (float, int, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamVerbose (boolean, int)</li> <li>hasParamWarmStart (boolean)</li> </ul> PCAMethod <ul> <li>hasParamCopy (boolean)</li> <li>hasParamIteratedPower (int)</li> <li>hasParamNComponents (float, int, string)</li> <li>hasParamNOversamples (int)</li> <li>hasParamPowerIterationNormalizer (string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSvdSolver (string)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamWhiten (boolean, string)</li> </ul> SparseCoderMethod <ul> <li>hasParamDictionary (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamPositiveCode (boolean)</li> <li>hasParamSplitSign (boolean)</li> <li>hasParamTransformAlgorithm (string)</li> <li>hasParamTransformAlpha (float, int)</li> <li>hasParamTransformMaxIter (int)</li> <li>hasParamTransformNNonzeroCoefs (int)</li> </ul> SparsePCAMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamMaxIter (int)</li> <li>hasParamMethod (string)</li> <li>hasParamNComponents (float, int, string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamRidgeAlpha (float, int)</li> <li>hasParamTol (float, int, string)</li> <li>hasParamUInit (string)</li> <li>hasParamVInit (string)</li> <li>hasParamVerbose (boolean, int)</li> </ul> TruncatedSVDMethod <ul> <li>hasParamAlgorithm (string)</li> <li>hasParamNComponents (float, int, string)</li> <li>hasParamNIter (int)</li> <li>hasParamNOversamples (int)</li> <li>hasParamPowerIterationNormalizer (string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamTol (float, int, string)</li> </ul> </ul> </ul> FeatureSelection \u2611\ufe0f <ul> Inputs <ul> <li>DataInToPrepareTransformer</li> </ul> Outputs <ul> <li>DataOutTransformer</li> </ul> Methods <ul> Chi2Method <ul>No parameters</ul> FClassifMethod <ul>No parameters</ul> FRegressionMethod <ul> <li>hasParamCenter (boolean)</li> <li>hasParamForceFinite (boolean)</li> </ul> GenericUnivariateSelectMethod <ul> <li>hasParamMode (string)</li> <li>hasParamParam (float, int)</li> <li>hasParamScoreFunc (string)</li> </ul> MutualInfoClassifMethod <ul> <li>hasParamCopy (boolean)</li> <li>hasParamDiscreteFeatures (boolean, string)</li> <li>hasParamNNeighbors (int)</li> <li>hasParamRandomState (int, string)</li> </ul> MutualInfoRegressionMethod <ul> <li>hasParamCopy (boolean)</li> <li>hasParamDiscreteFeatures (boolean, string)</li> <li>hasParamNNeighbors (int)</li> <li>hasParamRandomState (int, string)</li> </ul> RFECVMethod <ul> <li>hasParamCv (int, string)</li> <li>hasParamEstimator (string)</li> <li>hasParamImportanceGetter (string)</li> <li>hasParamMinFeaturesToSelect (int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamScoring (string)</li> <li>hasParamStep (float, int)</li> <li>hasParamVerbose (boolean, int)</li> </ul> RFEMethod <ul> <li>hasParamEstimator (string)</li> <li>hasParamImportanceGetter (string)</li> <li>hasParamNFeaturesToSelect (float, int)</li> <li>hasParamStep (float, int)</li> <li>hasParamVerbose (boolean, int)</li> </ul> SelectFdrMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamScoreFunc (string)</li> </ul> SelectFprMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamScoreFunc (string)</li> </ul> SelectFromModelMethod <ul> <li>hasParamEstimator (string)</li> <li>hasParamImportanceGetter (string)</li> <li>hasParamMaxFeatures (float, int, string)</li> <li>hasParamNormOrder (int, string)</li> <li>hasParamPrefit (boolean)</li> <li>hasParamThreshold (float, int, string)</li> </ul> SelectFweMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamScoreFunc (string)</li> </ul> SelectKBestMethod <ul> <li>hasParamK (int)</li> <li>hasParamScoreFunc (string)</li> </ul> SelectPercentileMethod <ul> <li>hasParamPercentile (int)</li> <li>hasParamScoreFunc (string)</li> </ul> SequentialFeatureSelectorMethod <ul> <li>hasParamCv (int, string)</li> <li>hasParamDirection (string)</li> <li>hasParamEstimator (string)</li> <li>hasParamNFeaturesToSelect (float, int)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamScoring (string)</li> <li>hasParamTol (float, int, string)</li> </ul> VarianceThresholdMethod <ul> <li>hasParamThreshold (float, int, string)</li> </ul> </ul> </ul> </ul> DataSplitting \u2611\ufe0f \ud83d\uddd2\ufe0f belongs to KG schema with abbr. <code>ml</code> <ul> Inputs <ul> <li>DataInDataSplittingX</li> <li>DataInDataSplittingY</li> </ul> Outputs <ul> <li>DataOutSplittedTestDataX</li> <li>DataOutSplittedTestDataY</li> <li>DataOutSplittedTrainDataX</li> <li>DataOutSplittedTrainDataY</li> </ul> Methods <ul> DataSplittingMethod <ul>No parameters</ul> GroupKFoldMethod <ul> <li>hasParamNSplits (int)</li> </ul> GroupShuffleSplitMethod <ul> <li>hasParamNSplits (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamTestSize (float, int)</li> <li>hasParamTrainSize (float, int)</li> </ul> KFoldMethod <ul> <li>hasParamNSplits (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamShuffle (boolean)</li> </ul> LearningCurveDisplayMethod <ul> <li>hasParamScoreName (string)</li> <li>hasParamTestScores (string)</li> <li>hasParamTrainScores (string)</li> </ul> LeavePGroupsOutMethod <ul> <li>hasParamNGroups (int)</li> </ul> LeavePOutMethod <ul> <li>hasParamP (float, int)</li> </ul> PredefinedSplitMethod <ul>No parameters</ul> RepeatedKFoldMethod <ul> <li>hasParamNRepeats (int)</li> <li>hasParamNSplits (int)</li> <li>hasParamRandomState (int, string)</li> </ul> RepeatedStratifiedKFoldMethod <ul> <li>hasParamNRepeats (int)</li> <li>hasParamNSplits (int)</li> <li>hasParamRandomState (int, string)</li> </ul> ShuffleSplitMethod <ul> <li>hasParamNSplits (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamTestSize (float, int)</li> <li>hasParamTrainSize (float, int)</li> </ul> StratifiedGroupKFoldMethod <ul> <li>hasParamNSplits (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamShuffle (boolean)</li> </ul> StratifiedKFoldMethod <ul> <li>hasParamNSplits (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamShuffle (boolean)</li> </ul> StratifiedShuffleSplitMethod <ul> <li>hasParamNSplits (int)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamTestSize (float, int)</li> <li>hasParamTrainSize (float, int)</li> </ul> TimeSeriesSplitMethod <ul> <li>hasParamGap (int)</li> <li>hasParamMaxTrainSize (int)</li> <li>hasParamNSplits (int)</li> <li>hasParamTestSize (float, int)</li> </ul> TrainTestSplitMethod <ul> <li>hasParamRandomState (int, string)</li> <li>hasParamShuffle (boolean)</li> <li>hasParamStratify (string)</li> <li>hasParamTestSize (float, int)</li> <li>hasParamTrainSize (float, int)</li> </ul> ValidationCurveDisplayMethod <ul> <li>hasParamParamName (string)</li> <li>hasParamScoreName (string)</li> <li>hasParamTestScores (string)</li> <li>hasParamTrainScores (string)</li> </ul> </ul> </ul> PerformanceCalculation \u2611\ufe0f \ud83d\uddd2\ufe0f belongs to KG schema with abbr. <code>ml</code> <ul> Inputs <ul> <li>DataInPredictedY</li> <li>DataInRealY</li> </ul> Outputs <ul> <li>DataOutScore</li> </ul> Methods <ul> AccuracyScoreMethod <ul> <li>hasParamNormalize (boolean, string)</li> </ul> AdjustedMutualInfoScoreMethod <ul> <li>hasParamAverageMethod (string)</li> </ul> AdjustedRandScoreMethod <ul>No parameters</ul> AucMethod <ul>No parameters</ul> AveragePrecisionScoreMethod <ul> <li>hasParamAverage (boolean, int, string)</li> <li>hasParamPosLabel (boolean, float, int, string)</li> </ul> BalancedAccuracyScoreMethod <ul> <li>hasParamAdjusted (boolean)</li> </ul> BrierScoreLossMethod <ul> <li>hasParamPosLabel (boolean, float, int, string)</li> </ul> CalinskiHarabaszScoreMethod <ul>No parameters</ul> CheckScoringMethod <ul> <li>hasParamAllowNone (boolean)</li> <li>hasParamScoring (string)</li> </ul> ClassLikelihoodRatiosMethod <ul> <li>hasParamRaiseWarning (boolean)</li> </ul> ClassificationReportMethod <ul> <li>hasParamDigits (int)</li> <li>hasParamOutputDict (boolean)</li> <li>hasParamZeroDivision (string)</li> </ul> CohenKappaScoreMethod <ul> <li>hasParamWeights (string)</li> </ul> CompletenessScoreMethod <ul>No parameters</ul> ConfusionMatrixMethod <ul> <li>hasParamNormalize (boolean, string)</li> </ul> ConsensusScoreMethod <ul> <li>hasParamA (string)</li> <li>hasParamB (string)</li> <li>hasParamSimilarity (string)</li> </ul> CoverageErrorMethod <ul>No parameters</ul> D2AbsoluteErrorScoreMethod <ul> <li>hasParamMultioutput (string)</li> </ul> D2PinballScoreMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamMultioutput (string)</li> </ul> D2TweedieScoreMethod <ul> <li>hasParamPower (float, int)</li> </ul> DaviesBouldinScoreMethod <ul>No parameters</ul> DcgScoreMethod <ul> <li>hasParamIgnoreTies (boolean)</li> <li>hasParamK (int)</li> <li>hasParamLogBase (float, int)</li> </ul> DetCurveMethod <ul> <li>hasParamPosLabel (boolean, float, int, string)</li> </ul> EuclideanDistancesMethod <ul> <li>hasParamSquared (boolean)</li> </ul> ExplainedVarianceScoreMethod <ul> <li>hasParamForceFinite (boolean)</li> <li>hasParamMultioutput (string)</li> </ul> F1ScoreMethod <ul> <li>hasParamAverage (boolean, int, string)</li> <li>hasParamPosLabel (boolean, float, int, string)</li> <li>hasParamZeroDivision (string)</li> </ul> FbetaScoreMethod <ul> <li>hasParamAverage (boolean, int, string)</li> <li>hasParamBeta (float, int)</li> <li>hasParamPosLabel (boolean, float, int, string)</li> <li>hasParamZeroDivision (string)</li> </ul> FowlkesMallowsScoreMethod <ul> <li>hasParamSparse (boolean)</li> </ul> GetScorerMethod <ul> <li>hasParamScoring (string)</li> </ul> GetScorerNamesMethod <ul>No parameters</ul> HammingLossMethod <ul>No parameters</ul> HingeLossMethod <ul> <li>hasParamPredDecision (string)</li> </ul> HomogeneityCompletenessVMeasureMethod <ul> <li>hasParamBeta (float, int)</li> </ul> HomogeneityScoreMethod <ul>No parameters</ul> JaccardScoreMethod <ul> <li>hasParamAverage (boolean, int, string)</li> <li>hasParamPosLabel (boolean, float, int, string)</li> <li>hasParamZeroDivision (string)</li> </ul> LabelRankingAveragePrecisionScoreMethod <ul>No parameters</ul> LabelRankingLossMethod <ul>No parameters</ul> LogLossMethod <ul> <li>hasParamEps (float, int)</li> <li>hasParamNormalize (boolean, string)</li> </ul> MakeScorerMethod <ul> <li>hasParamGreaterIsBetter (boolean)</li> <li>hasParamNeedsProba (boolean)</li> <li>hasParamNeedsThreshold (boolean)</li> <li>hasParamResponseMethod (string)</li> <li>hasParamScoreFunc (string)</li> </ul> MatthewsCorrcoefMethod <ul>No parameters</ul> MaxErrorMethod <ul>No parameters</ul> MeanAbsoluteErrorMethod <ul> <li>hasParamMultioutput (string)</li> </ul> MeanAbsolutePercentageErrorMethod <ul> <li>hasParamMultioutput (string)</li> </ul> MeanGammaDevianceMethod <ul>No parameters</ul> MeanPinballLossMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamMultioutput (string)</li> </ul> MeanPoissonDevianceMethod <ul>No parameters</ul> MeanSquaredErrorMethod <ul> <li>hasParamMultioutput (string)</li> <li>hasParamSquared (boolean)</li> </ul> MeanSquaredLogErrorMethod <ul> <li>hasParamMultioutput (string)</li> <li>hasParamSquared (boolean)</li> </ul> MeanTweedieDevianceMethod <ul> <li>hasParamPower (float, int)</li> </ul> MedianAbsoluteErrorMethod <ul> <li>hasParamMultioutput (string)</li> </ul> MultilabelConfusionMatrixMethod <ul> <li>hasParamSamplewise (boolean)</li> </ul> MutualInfoScoreMethod <ul> <li>hasParamContingency (string)</li> </ul> NanEuclideanDistancesMethod <ul> <li>hasParamCopy (boolean)</li> <li>hasParamMissingValues (float, int, string)</li> <li>hasParamSquared (boolean)</li> </ul> NdcgScoreMethod <ul> <li>hasParamIgnoreTies (boolean)</li> <li>hasParamK (int)</li> </ul> NormalizedMutualInfoScoreMethod <ul> <li>hasParamAverageMethod (string)</li> </ul> PairConfusionMatrixMethod <ul>No parameters</ul> PairwiseDistancesArgminMethod <ul> <li>hasParamAxis (int)</li> <li>hasParamMetric (string)</li> <li>hasParamMetricKwargs (string)</li> </ul> PairwiseDistancesArgminMinMethod <ul> <li>hasParamAxis (int)</li> <li>hasParamMetric (string)</li> <li>hasParamMetricKwargs (string)</li> </ul> PairwiseDistancesChunkedMethod <ul> <li>hasParamMetric (string)</li> <li>hasParamNJobs (int, string)</li> <li>hasParamReduceFunc (string)</li> <li>hasParamWorkingMemory (float, int)</li> </ul> PairwiseDistancesMethod <ul> <li>hasParamForceAllFinite (boolean)</li> <li>hasParamMetric (string)</li> <li>hasParamNJobs (int, string)</li> </ul> PairwiseKernelsMethod <ul> <li>hasParamFilterParams (boolean)</li> <li>hasParamMetric (string)</li> <li>hasParamNJobs (int, string)</li> </ul> PerformanceCalculationMethod <ul>No parameters</ul> PrecisionRecallCurveMethod <ul> <li>hasParamDropIntermediate (boolean)</li> <li>hasParamPosLabel (boolean, float, int, string)</li> </ul> PrecisionRecallFscoreSupportMethod <ul> <li>hasParamAverage (boolean, int, string)</li> <li>hasParamBeta (float, int)</li> <li>hasParamPosLabel (boolean, float, int, string)</li> <li>hasParamWarnFor (string)</li> <li>hasParamZeroDivision (string)</li> </ul> PrecisionScoreMethod <ul> <li>hasParamAverage (boolean, int, string)</li> <li>hasParamPosLabel (boolean, float, int, string)</li> <li>hasParamZeroDivision (string)</li> </ul> R2ScoreMethod <ul> <li>hasParamForceFinite (boolean)</li> <li>hasParamMultioutput (string)</li> </ul> RandScoreMethod <ul>No parameters</ul> RecallScoreMethod <ul> <li>hasParamAverage (boolean, int, string)</li> <li>hasParamPosLabel (boolean, float, int, string)</li> <li>hasParamZeroDivision (string)</li> </ul> RocAucScoreMethod <ul> <li>hasParamAverage (boolean, int, string)</li> <li>hasParamMultiClass (string)</li> </ul> RocCurveMethod <ul> <li>hasParamDropIntermediate (boolean)</li> <li>hasParamPosLabel (boolean, float, int, string)</li> </ul> RootMeanSquaredErrorMethod <ul> <li>hasParamMultioutput (string)</li> </ul> RootMeanSquaredLogErrorMethod <ul> <li>hasParamMultioutput (string)</li> </ul> SilhouetteSamplesMethod <ul> <li>hasParamMetric (string)</li> </ul> SilhouetteScoreMethod <ul> <li>hasParamMetric (string)</li> <li>hasParamRandomState (int, string)</li> <li>hasParamSampleSize (int)</li> </ul> TopKAccuracyScoreMethod <ul> <li>hasParamK (int)</li> <li>hasParamNormalize (boolean, string)</li> </ul> VMeasureScoreMethod <ul> <li>hasParamBeta (float, int)</li> </ul> ZeroOneLossMethod <ul> <li>hasParamNormalize (boolean, string)</li> </ul> </ul> </ul> Test \u2611\ufe0f \ud83d\uddd2\ufe0f belongs to KG schema with abbr. <code>ml</code> <ul> Inputs <ul> <li>DataInTestModel</li> <li>DataInTestX</li> </ul> Outputs <ul> <li>DataOutPredictedValueTest</li> </ul> Methods <ul> TestMethod <ul>No parameters</ul> </ul> </ul> Transform \u2611\ufe0f \ud83d\uddd2\ufe0f belongs to KG schema with abbr. <code>ml</code> <ul> Inputs <ul> <li>DataInToTransform</li> <li>DataInTransformer</li> </ul> Outputs <ul> <li>DataOutTransformed</li> </ul> Methods <ul> TransformMethod <ul>No parameters</ul> </ul> </ul> StatisticCalculation \ud83d\udcdc \ud83d\uddd2\ufe0f belongs to KG schema with abbr. <code>stats</code> <ul> CentralTendencyMeasure \u2611\ufe0f <ul> Inputs <ul> <li>DataInStatisticCalculation</li> </ul> Outputs <ul> <li>DataOutStatisticCalculation</li> </ul> Methods <ul> AverageMethod <ul> <li>hasParamAxis (int, string)</li> <li>hasParamKeepdims (boolean)</li> <li>hasParamReturned (boolean)</li> <li>hasParamWeights (string)</li> </ul> MeanMethod <ul> <li>hasParamAxis (int, string)</li> <li>hasParamDtype (string)</li> <li>hasParamKeepdims (boolean)</li> <li>hasParamWhere (boolean)</li> </ul> MedianMethod <ul> <li>hasParamAxis (int, string)</li> <li>hasParamKeepdims (boolean)</li> <li>hasParamOverwriteInput (boolean)</li> </ul> </ul> </ul> DependencyMeasure \u2611\ufe0f <ul> Inputs <ul> <li>DataInStatisticCalculation</li> </ul> Outputs <ul> <li>DataOutStatisticCalculation</li> </ul> Methods <ul> CorrcoefMethod <ul> <li>hasParamBias (boolean, string)</li> <li>hasParamDdof (int, string)</li> <li>hasParamDtype (string)</li> <li>hasParamRowvar (boolean)</li> <li>hasParamX (string)</li> <li>hasParamY (string)</li> </ul> CovMethod <ul> <li>hasParamAweights (string)</li> <li>hasParamBias (boolean, string)</li> <li>hasParamDdof (int, string)</li> <li>hasParamDtype (string)</li> <li>hasParamFweights (int, string)</li> <li>hasParamM (string)</li> <li>hasParamRowvar (boolean)</li> <li>hasParamY (string)</li> </ul> </ul> </ul> DispersionMeasure \u2611\ufe0f <ul> Inputs <ul> <li>DataInStatisticCalculation</li> </ul> Outputs <ul> <li>DataOutStatisticCalculation</li> </ul> Methods <ul> StdMethod <ul> <li>hasParamAxis (int, string)</li> <li>hasParamDdof (int, string)</li> <li>hasParamDtype (string)</li> <li>hasParamKeepdims (boolean)</li> <li>hasParamWhere (boolean)</li> </ul> VarMethod <ul> <li>hasParamAxis (int, string)</li> <li>hasParamDdof (int, string)</li> <li>hasParamDtype (string)</li> <li>hasParamKeepdims (boolean)</li> <li>hasParamWhere (boolean)</li> </ul> </ul> </ul> PositionMeasure \u2611\ufe0f <ul> Inputs <ul> <li>DataInStatisticCalculation</li> </ul> Outputs <ul> <li>DataOutStatisticCalculation</li> </ul> Methods <ul> PercentileMethod <ul> <li>hasParamAxis (int, string)</li> <li>hasParamInterpolation (string)</li> <li>hasParamKeepdims (boolean)</li> <li>hasParamMethod (string)</li> <li>hasParamOverwriteInput (boolean)</li> <li>hasParamQ (float, int)</li> </ul> QuantileMethod <ul> <li>hasParamAxis (int, string)</li> <li>hasParamInterpolation (string)</li> <li>hasParamKeepdims (boolean)</li> <li>hasParamMethod (string)</li> <li>hasParamOverwriteInput (boolean)</li> <li>hasParamQ (float, int)</li> </ul> </ul> </ul> ShapeMeasure \u2611\ufe0f <ul> Inputs <ul> <li>DataInStatisticCalculation</li> </ul> Outputs <ul> <li>DataOutStatisticCalculation</li> </ul> Methods <ul> KurtosisMethod <ul> <li>hasParamAxis (int, string)</li> <li>hasParamBias (boolean, string)</li> <li>hasParamFisher (boolean)</li> <li>hasParamKeepdims (boolean)</li> <li>hasParamNanPolicy (string)</li> </ul> PtpMethod <ul> <li>hasParamAxis (int, string)</li> <li>hasParamKeepdims (boolean)</li> </ul> SkewMethod <ul> <li>hasParamAxis (int, string)</li> <li>hasParamBias (boolean, string)</li> <li>hasParamKeepdims (boolean)</li> <li>hasParamNanPolicy (string)</li> </ul> </ul> </ul> </ul> Plotting \ud83d\udcdc \ud83d\uddd2\ufe0f belongs to KG schema with abbr. <code>visu</code> <ul> AreaPlotting \u2611\ufe0f <ul> Inputs <ul> <li>DataInToPlot</li> </ul> Outputs Methods <ul> FillBetweenMethod <ul> <li>hasParamInterpolate (boolean)</li> <li>hasParamStep (string)</li> <li>hasParamWhere (string)</li> <li>hasParamX (float, int, string)</li> <li>hasParamY1 (float, int, string)</li> <li>hasParamY2 (float, int, string)</li> </ul> FillMethod <ul>No parameters</ul> </ul> </ul> BarPlotting \u2611\ufe0f <ul> Inputs <ul> <li>DataInToPlot</li> </ul> Outputs Methods <ul> BarMethod <ul> <li>hasParamAlign (string)</li> <li>hasParamBottom (float, int, string)</li> <li>hasParamHeight (float, int, string)</li> <li>hasParamWidth (float, int, string)</li> <li>hasParamX (float, int, string)</li> </ul> BarhMethod <ul> <li>hasParamAlign (string)</li> <li>hasParamHeight (float, int, string)</li> <li>hasParamLeft (float, int, string)</li> <li>hasParamWidth (float, int, string)</li> <li>hasParamY (float, int, string)</li> </ul> </ul> </ul> BoxPlotting \u2611\ufe0f <ul> Inputs <ul> <li>DataInToPlot</li> </ul> Outputs Methods <ul> BoxplotMethod <ul> <li>hasParamAutorange (boolean)</li> <li>hasParamBootstrap (int, string)</li> <li>hasParamBoxprops (string)</li> <li>hasParamCapprops (string)</li> <li>hasParamCapwidths (float, int, string)</li> <li>hasParamConfIntervals (string)</li> <li>hasParamFlierprops (string)</li> <li>hasParamLabels (string)</li> <li>hasParamManageTicks (boolean)</li> <li>hasParamMeanline (boolean, string)</li> <li>hasParamMeanprops (string)</li> <li>hasParamMedianprops (string)</li> <li>hasParamNotch (boolean, string)</li> <li>hasParamPatchArtist (boolean, string)</li> <li>hasParamPositions (string)</li> <li>hasParamShowbox (boolean, string)</li> <li>hasParamShowcaps (boolean, string)</li> <li>hasParamShowfliers (boolean, string)</li> <li>hasParamShowmeans (boolean, string)</li> <li>hasParamSym (string)</li> <li>hasParamUsermedians (string)</li> <li>hasParamVert (boolean, string)</li> <li>hasParamWhis (float, int, string)</li> <li>hasParamWhiskerprops (string)</li> <li>hasParamWidths (float, int, string)</li> <li>hasParamX (float, int, string)</li> <li>hasParamZorder (float, int, string)</li> </ul> </ul> </ul> ContourPlotting \u2611\ufe0f <ul> Inputs <ul> <li>DataInToPlot</li> </ul> Outputs Methods <ul> ContourMethod <ul>No parameters</ul> ContourfMethod <ul>No parameters</ul> </ul> </ul> ErrorBarPlotting \u2611\ufe0f <ul> Inputs <ul> <li>DataInToPlot</li> </ul> Outputs Methods <ul> ErrorbarMethod <ul> <li>hasParamBarsabove (boolean)</li> <li>hasParamCapsize (float, int, string)</li> <li>hasParamCapthick (float, int, string)</li> <li>hasParamEcolor (string)</li> <li>hasParamElinewidth (float, int, string)</li> <li>hasParamErrorevery (int, string)</li> <li>hasParamFmt (string)</li> <li>hasParamLolims (boolean, string)</li> <li>hasParamUplims (boolean, string)</li> <li>hasParamX (float, int, string)</li> <li>hasParamXerr (float, int, string)</li> <li>hasParamXlolims (boolean, string)</li> <li>hasParamXuplims (boolean, string)</li> <li>hasParamY (float, int, string)</li> <li>hasParamYerr (float, int, string)</li> </ul> </ul> </ul> Histogram \u2611\ufe0f <ul> Inputs <ul> <li>DataInToPlot</li> </ul> Outputs Methods <ul> HexbinMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamBins (int, string)</li> <li>hasParamC (string)</li> <li>hasParamCmap (string)</li> <li>hasParamEdgecolors (string)</li> <li>hasParamExtent (string)</li> <li>hasParamGridsize (int, string)</li> <li>hasParamLinewidths (float, int, string)</li> <li>hasParamMarginals (boolean)</li> <li>hasParamMincnt (int, string)</li> <li>hasParamNorm (string)</li> <li>hasParamReduceCFunction (string)</li> <li>hasParamVmax (float, int, string)</li> <li>hasParamVmin (float, int, string)</li> <li>hasParamX (float, int, string)</li> <li>hasParamXscale (string)</li> <li>hasParamY (float, int, string)</li> <li>hasParamYscale (string)</li> </ul> Hist2dMethod <ul> <li>hasParamBins (int, string)</li> <li>hasParamCmax (float, int, string)</li> <li>hasParamCmin (float, int, string)</li> <li>hasParamDensity (boolean, float, int)</li> <li>hasParamRange (string)</li> <li>hasParamWeights (string)</li> <li>hasParamX (float, int, string)</li> <li>hasParamY (float, int, string)</li> </ul> HistMethod <ul> <li>hasParamAlign (string)</li> <li>hasParamBins (int, string)</li> <li>hasParamBottom (float, int, string)</li> <li>hasParamColor (string)</li> <li>hasParamCumulative (boolean, float, int)</li> <li>hasParamDensity (boolean, float, int)</li> <li>hasParamHisttype (string)</li> <li>hasParamLabel (string)</li> <li>hasParamLog (boolean)</li> <li>hasParamOrientation (string)</li> <li>hasParamRange (string)</li> <li>hasParamRwidth (float, int, string)</li> <li>hasParamStacked (boolean)</li> <li>hasParamWeights (string)</li> <li>hasParamX (float, int, string)</li> </ul> </ul> </ul> ImagePlotting \u2611\ufe0f <ul> Inputs <ul> <li>DataInToPlot</li> </ul> Outputs Methods <ul> ImshowMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamAspect (float, int, string)</li> <li>hasParamCmap (string)</li> <li>hasParamExtent (string)</li> <li>hasParamFilternorm (boolean)</li> <li>hasParamFilterrad (float, int)</li> <li>hasParamInterpolation (string)</li> <li>hasParamInterpolationStage (string)</li> <li>hasParamNorm (string)</li> <li>hasParamOrigin (string)</li> <li>hasParamResample (boolean, string)</li> <li>hasParamUrl (string)</li> <li>hasParamVmax (float, int, string)</li> <li>hasParamVmin (float, int, string)</li> <li>hasParamX (float, int, string)</li> </ul> PcolorMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamArgs (float, int, string)</li> <li>hasParamCmap (string)</li> <li>hasParamNorm (string)</li> <li>hasParamShading (string)</li> <li>hasParamVmax (float, int, string)</li> <li>hasParamVmin (float, int, string)</li> </ul> PcolormeshMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamAntialiased (boolean)</li> <li>hasParamArgs (float, int, string)</li> <li>hasParamCmap (string)</li> <li>hasParamNorm (string)</li> <li>hasParamShading (string)</li> <li>hasParamVmax (float, int, string)</li> <li>hasParamVmin (float, int, string)</li> </ul> </ul> </ul> LinePlotting \u2611\ufe0f <ul> Inputs <ul> <li>DataInToPlot</li> </ul> Outputs Methods <ul> AcorrMethod <ul> <li>hasParamX (float, int, string)</li> </ul> AngleSpectrumMethod <ul> <li>hasParamFc (int, string)</li> <li>hasParamFs (float, int, string)</li> <li>hasParamPadTo (int, string)</li> <li>hasParamSides (string)</li> <li>hasParamWindow (string)</li> <li>hasParamX (float, int, string)</li> </ul> CohereMethod <ul> <li>hasParamDetrend (string)</li> <li>hasParamFc (int, string)</li> <li>hasParamFs (float, int, string)</li> <li>hasParamNfft (int)</li> <li>hasParamNoverlap (int)</li> <li>hasParamPadTo (int, string)</li> <li>hasParamScaleByFreq (boolean, string)</li> <li>hasParamSides (string)</li> <li>hasParamWindow (string)</li> <li>hasParamX (float, int, string)</li> <li>hasParamY (float, int, string)</li> </ul> LoglogMethod <ul>No parameters</ul> MagnitudeSpectrumMethod <ul> <li>hasParamFc (int, string)</li> <li>hasParamFs (float, int, string)</li> <li>hasParamPadTo (int, string)</li> <li>hasParamScale (string)</li> <li>hasParamSides (string)</li> <li>hasParamWindow (string)</li> <li>hasParamX (float, int, string)</li> </ul> PhaseSpectrumMethod <ul> <li>hasParamFc (int, string)</li> <li>hasParamFs (float, int, string)</li> <li>hasParamPadTo (int, string)</li> <li>hasParamSides (string)</li> <li>hasParamWindow (string)</li> <li>hasParamX (float, int, string)</li> </ul> PlotMethod <ul> <li>hasParamArgs (float, int, string)</li> <li>hasParamScalex (boolean)</li> <li>hasParamScaley (boolean)</li> </ul> SemilogxMethod <ul>No parameters</ul> SemilogyMethod <ul>No parameters</ul> StackplotMethod <ul> <li>hasParamBaseline (string)</li> <li>hasParamColors (string)</li> <li>hasParamLabels (string)</li> <li>hasParamX (float, int, string)</li> </ul> StemMethod <ul> <li>hasParamArgs (float, int, string)</li> <li>hasParamBasefmt (string)</li> <li>hasParamBottom (float, int, string)</li> <li>hasParamLabel (string)</li> <li>hasParamLinefmt (string)</li> <li>hasParamMarkerfmt (string)</li> <li>hasParamOrientation (string)</li> </ul> StepMethod <ul> <li>hasParamWhere (string)</li> <li>hasParamX (float, int, string)</li> <li>hasParamY (float, int, string)</li> </ul> XcorrMethod <ul> <li>hasParamDetrend (string)</li> <li>hasParamMaxlags (int)</li> <li>hasParamNormed (boolean)</li> <li>hasParamUsevlines (boolean)</li> <li>hasParamX (float, int, string)</li> <li>hasParamY (float, int, string)</li> </ul> </ul> </ul> PieChart \u2611\ufe0f <ul> Inputs <ul> <li>DataInToPlot</li> </ul> Outputs Methods <ul> PieMethod <ul> <li>hasParamAutopct (string)</li> <li>hasParamCenter (string)</li> <li>hasParamColors (string)</li> <li>hasParamCounterclock (boolean)</li> <li>hasParamExplode (string)</li> <li>hasParamFrame (boolean)</li> <li>hasParamHatch (string)</li> <li>hasParamLabeldistance (float, int, string)</li> <li>hasParamLabels (string)</li> <li>hasParamNormalize (boolean)</li> <li>hasParamPctdistance (float, int)</li> <li>hasParamRadius (float, int)</li> <li>hasParamRotatelabels (boolean)</li> <li>hasParamShadow (boolean)</li> <li>hasParamStartangle (float, int)</li> <li>hasParamTextprops (string)</li> <li>hasParamWedgeprops (string)</li> <li>hasParamX (float, int, string)</li> </ul> </ul> </ul> PolarPlotting \u2611\ufe0f <ul> Inputs <ul> <li>DataInToPlot</li> </ul> Outputs Methods <ul> PolarMethod <ul>No parameters</ul> </ul> </ul> ScatterPlotting \u2611\ufe0f <ul> Inputs <ul> <li>DataInToPlot</li> </ul> Outputs Methods <ul> ScatterMethod <ul> <li>hasParamAlpha (float, int, string)</li> <li>hasParamC (string)</li> <li>hasParamCmap (string)</li> <li>hasParamEdgecolors (string)</li> <li>hasParamLinewidths (float, int, string)</li> <li>hasParamMarker (string)</li> <li>hasParamNorm (string)</li> <li>hasParamPlotnonfinite (boolean)</li> <li>hasParamS (float, int, string)</li> <li>hasParamVmax (float, int, string)</li> <li>hasParamVmin (float, int, string)</li> <li>hasParamX (float, int, string)</li> <li>hasParamY (float, int, string)</li> </ul> </ul> </ul> VectorField \u2611\ufe0f <ul> Inputs <ul> <li>DataInToPlot</li> </ul> Outputs Methods <ul> QuiverMethod <ul>No parameters</ul> StreamplotMethod <ul> <li>hasParamArrowsize (float, int)</li> <li>hasParamArrowstyle (string)</li> <li>hasParamBrokenStreamlines (string)</li> <li>hasParamColor (string)</li> <li>hasParamDensity (boolean, float, int)</li> <li>hasParamIntegrationDirection (string)</li> <li>hasParamLinewidth (float, int, string)</li> <li>hasParamMaxlength (float, int)</li> <li>hasParamMinlength (float, int)</li> <li>hasParamStartPoints (string)</li> <li>hasParamZorder (float, int, string)</li> </ul> </ul> </ul> ViolinPlotting \u2611\ufe0f <ul> Inputs <ul> <li>DataInToPlot</li> </ul> Outputs Methods <ul> ViolinplotMethod <ul> <li>hasParamBwMethod (float, int, string)</li> <li>hasParamDataset (string)</li> <li>hasParamPoints (int)</li> <li>hasParamPositions (string)</li> <li>hasParamQuantiles (string)</li> <li>hasParamShowextrema (boolean)</li> <li>hasParamShowmeans (boolean, string)</li> <li>hasParamShowmedians (boolean)</li> <li>hasParamVert (boolean, string)</li> <li>hasParamWidths (float, int, string)</li> </ul> </ul> </ul> </ul> CanvasCreation \u2611\ufe0f \ud83d\uddd2\ufe0f belongs to KG schema with abbr. <code>visu</code> <ul> Inputs Outputs Methods <ul> CanvasMethod <ul> <li>hasParamFigureSize (string)</li> <li>hasParamLayout (string)</li> </ul> </ul> </ul>"},{"location":"tasks-package-documentation/","title":"Documentation of exe_kg_lib.classes.tasks package","text":""},{"location":"tasks-package-documentation/#overview","title":"Overview","text":"<p>This package contains classes that correspond to entities of type <code>owl:class</code> that are either <code>rdfs:subClassOf ds:Task</code> or <code>rdfs:subClassOf ds:AtomicTask</code> in the KG. In either case, these entities are in the top-level of the Task hierarchy for each of the three KG schemata: ML, Statistics and Visualization.</p> <p>This package's classes implement the abstract <code>run_method()</code> to perform the following steps:</p> <ol> <li>The input data are taken:<ul> <li>Either from outputs of previous Tasks (parameter: <code>other_task_output_dict</code>) of the ExeKG</li> <li>Or a given dataframe (parameter: <code>input_data</code>) that holds the input data for the ExeKG</li> </ul> </li> <li>An algorithm is executed. The algorithm can be related to ML, Statistics or Visualization, depending on the Python file's prefix (i.e. <code>ml</code>, <code>statistic</code>, <code>visual</code>). The algorithm can:<ul> <li>Either be implemented as part of this library</li> <li>Or belong to an external module. In this case, the module is determined using <code>classes.tasks.task.Task.resolve_module()</code> based on the Task's <code>method_module_chain</code>. See section Naming conventions for more info on <code>method_module_chain</code>.</li> </ul> </li> <li>The output of the algorithm is returned as a dictionary with pairs of output name and value</li> </ol>"},{"location":"tasks-package-documentation/#naming-conventions","title":"Naming conventions","text":"<p>The below naming conventions are necessary for automatically mapping KG's tasks (with methods and properties) to Python objects while parsing the ExeKG.</p> <ul> <li>Each class name in this package is the name of an <code>owl:class</code> that is either <code>rdfs:subClassOf ds:Task</code> or <code>rdfs:subClassOf ds:AtomicTask</code>.</li> <li>The <code>method_params_dict</code> and <code>method_inherited_params_dict</code> fields inherited from <code>classes.tasks.task.Task</code> contain parameters for the algorithm to be executed.<ul> <li>Their keys are produced by applying <code>utils.string_utils.property_iri_to_field_name()</code> to the datatype property names of the Task's linked <code>ds:AtomicMethod</code> instance in the ExeKG. E.g. a key named <code>split_ratio</code> corresponds to <code>hasParamSplitRatio</code> property in the KG.</li> <li>Their values are produced by applying <code>classes.exe_kg_mixins.exe_kg_execution_mixin.ExeKGExecutionMixin._literal_to_field_value()</code> to the literal values of the datatype properties in the ExeKG. E.g. a value of <code>0.6</code> corresponds to <code>\"0.2\"^^xsd:float</code> literal value in the KG.</li> </ul> </li> <li> <p>The <code>method_module_chain</code> field inherited from <code>classes.tasks.task.Task</code> contains a hierarchy list of Python module names from top to bottom.</p> <ul> <li>The module hierarchy is determined by <code>utils.query_utils.get_module_hierarchy_chain()</code> starting from the Task's linked <code>ds:AtomicMethod</code> instance in the ExeKG, and proceeding via the <code>rdfs:subClassOf+ ds:Module</code> property path.</li> <li>Each item in the hierarchy list (except for the last one) comes from the name of a <code>owl:class</code> that is a <code>rdfs:subClassOf+ ds:Module</code>, after conversion by <code>utils.string_utils.class_name_to_module_name()</code>.</li> <li>The last item of the list comes from the type of the Task's linked <code>ds:AtomicMethod</code> instance, after conversion by <code>utils.string_utils.class_name_to_method_name()</code>.</li> </ul> <p>The below example shows the module chain <code>SVCMethod -&gt; SvmModule -&gt; SklearnModule</code> which leads to <code>method_module_chain = [\"sklearn\", \"svm\", \"SVC\"]</code>. <pre><code>#############################\n### START: ExeKG fragment ###\n#############################\nml:BinaryClassification1 a ml:BinaryClassification ;\n                          ds:hasNextTask ml:Test1 ;\n                          ml:hasBinaryClassificationMethod ml:SVCMethod1 ;\n                          ml:hasTrainInput ml:DataInTrainX_BinaryClassification1_1,\n                                          ml:DataInTrainY_BinaryClassification1_1 ;\n                                          ml:hasTrainOutput ml:DataOutTrainModelSVCMethod .\n###########################\n### END: ExeKG fragment ###\n###########################\n\n#################################\n### START: KG schema fragment ###\n#################################\nml:SVCMethod a owl:Class ;\n              rdfs:subClassOf ds:AtomicMethod,\n                              ml:SvmModule,\n                              ml:TrainMethod .\n\nml:SvmModule a owl:Class ;\n              rdfs:subClassOf ml:SklearnModule .\n\nml:SklearnModule a owl:Class ;\n                  rdfs:subClassOf ds:Module .\n###############################\n### END: KG schema fragment ###\n###############################\n</code></pre></p> </li> <li> <p>The <code>inputs</code> and <code>outputs</code> fields inherited from <code>classes.tasks.task.Task</code> contain a list of <code>classes.data_entity.DataEntity</code> objects. In the case of <code>inputs</code>, the objects can also be of type <code>classes.method.Method</code>. The objects are generated by invoking the method <code>_property_value_to_field_value()</code> from the <code>ExeKGExecutionMixin</code> class. This method is applied to instances that are linked through a subclass of either <code>ds:hasInput</code> or <code>ds:hasOutput</code> to the Task in the ExeKG.</p> <ul> <li>The field names of <code>DataEntity</code> and <code>Method</code> objects are filled by applying <code>utils.string_utils.property_iri_to_field_name()</code> to the properties of the Task's linked <code>ds:DataEntity</code> or <code>ds:Method</code> instances.</li> <li>In the case of input DataEntities, the object's fields are filled using the properties of the <code>ds:DataEntity</code> instances that are referenced by the Task's linked <code>ds:DataEntity</code> instances.</li> </ul> <p>The below example shows a <code>LinePlotting1</code> task instance that has <code>DataInToPlot_LinePlotting1_1</code> as input. <code>DataInToPlot_LinePlotting1_1</code> references <code>ds:feature_1</code>. So, in this case, the <code>inputs</code> field of the corresponding Task Python object will contain a DataEntity object with fields: <code>source = \"feature_1\"</code>, <code>reference = IRI(ds:feature_1)</code>. The fields <code>data_semantics</code> and <code>data_structure</code> are mainly used during pipeline construction. <pre><code>######################\n### ExeKG fragment ###\n######################\n\nvisu:LinePlotting1\n    a                          visu:LinePlotting ;\n    ds:hasNextTask             visu:LinePlotting2 ;\n    visu:hasLinePlottingMethod visu:PlotMethod1 ;\n    visu:hasPlottingInput      visu:DataInToPlot_LinePlotting1_1 .\n\nvisu:DataInToPlot_LinePlotting1_1\n    a               visu:DataInToPlot ;\n    ds:hasReference ds:feature_1 .\n\nds:feature_1\n    a            ds:DataEntity, ds:Numerical, ds:Vector ;\n    ds:hasSource \"feature_1\"^^xsd:string .\n</code></pre></p> </li> </ul>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#creating-an-ml-pipeline","title":"\ud83d\ude80 Creating an ML pipeline","text":""},{"location":"usage/#via-code","title":"\ud83d\udcbb Via code","text":"<p>See the Python files in the provided examples.</p>"},{"location":"usage/#using-json","title":"\ud83d\udcc4 Using JSON","text":"<p>Run <code>typer exe_kg_lib.cli.main run create-pipeline &lt;json_path&gt;</code> after replacing <code>&lt;json_path&gt;</code> to point to a pipeline's JSON file. See the provided example JSONs</p> <p>\ud83d\uddd2\ufe0f Note: Replace <code>input_data_path</code> with the path to a dataset and <code>output_plots_dir</code> with the directory path where the plots will be saved.</p>"},{"location":"usage/#step-by-step-via-cli","title":"\ud83d\udda5\ufe0f Step-by-step via CLI","text":"<p>Run <code>typer exe_kg_lib.cli.main run create-pipeline</code>.</p>"},{"location":"usage/#editing-an-ml-pipeline","title":"\ud83d\ude80 Editing an ML pipeline","text":""},{"location":"usage/#via-code_1","title":"\ud83d\udcbb Via code","text":"<p>See the provided sample script.</p>"},{"location":"usage/#executing-an-ml-pipeline","title":"\ud83d\ude80 Executing an ML pipeline","text":""},{"location":"usage/#via-code_2","title":"\ud83d\udcbb Via code","text":"<p>See example code.</p>"},{"location":"usage/#via-cli","title":"\ud83d\udda5\ufe0f Via CLI","text":"<p>Run <code>typer exe_kg_lib.cli.main run run-pipeline &lt;pipeline_path&gt;</code>. The <code>pipeline_path</code> can either be a <code>.ttl</code> or <code>.json</code> file.</p>"},{"location":"reference/","title":"Code Reference","text":"<p>The structure of this reference (see navigation tree on the left) mimics the structure of the project's code base.</p>"},{"location":"reference/code-nav/","title":"Code nav","text":"<ul> <li>exe_kg_lib</li> <li>classes<ul> <li>data_entity</li> <li>entity</li> <li>exe_kg</li> <li>exe_kg_actors</li> <li>exe_kg_base</li> <li>exe_kg_mixins<ul> <li>exe_kg_construction_cli_mixin</li> <li>exe_kg_construction_mixin</li> <li>exe_kg_edit_mixin</li> <li>exe_kg_execution_mixin</li> </ul> </li> <li>exe_kg_serialization<ul> <li>data_entity</li> <li>method</li> <li>pipeline</li> <li>task</li> </ul> </li> <li>kg_schema</li> <li>method</li> <li>task</li> <li>tasks<ul> <li>ml_tasks</li> <li>statistic_tasks</li> <li>visual_tasks</li> </ul> </li> </ul> </li> <li>cli<ul> <li>main</li> </ul> </li> <li>config</li> <li>scripts<ul> <li>create_task_hierarchy_md</li> </ul> </li> <li>shacl<ul> <li>base_shape_graph_generator</li> </ul> </li> <li>utils<ul> <li>cli_utils</li> <li>kg_creation_utils</li> <li>kg_edit_utils</li> <li>kg_validation_utils</li> <li>query_utils</li> <li>string_utils</li> </ul> </li> </ul>"},{"location":"reference/config/","title":"config","text":""},{"location":"reference/classes/data_entity/","title":"data_entity","text":""},{"location":"reference/classes/data_entity/#exe_kg_lib.classes.data_entity.DataEntity","title":"<code>DataEntity</code>","text":"<p>               Bases: <code>Entity</code></p> <p>Abstraction of owl:class ds:DataEntity.</p> <p>\u2757 Important for contributors: See Section \"Naming conventions\" in README.md of \"classes.tasks\" package before extending the code's functionality.</p> Source code in <code>exe_kg_lib/classes/data_entity.py</code> <pre><code>class DataEntity(Entity):\n    \"\"\"\n    Abstraction of owl:class ds:DataEntity.\n\n    \u2757 Important for contributors: See Section \"Naming conventions\" in README.md of \"classes.tasks\" package before extending the code's functionality.\n    \"\"\"\n\n    def __init__(\n        self,\n        iri: str,\n        parent_entity: Entity,\n        source_value: str = None,\n        data_semantics_iri: str = None,\n        data_structure_iri: str = None,\n        reference: str = None,\n    ):\n        super().__init__(iri, parent_entity)\n        self.source = source_value  # used as column name to retrieve data from the pipeline's input file\n        self.data_semantics = data_semantics_iri  # IRI of KG entity of type DataSemantics\n        self.data_structure = data_structure_iri  # IRI of KG entity of type DataStructure\n        self.reference = reference  # reference to another data entity in the KG, expecting an IRI\n</code></pre>"},{"location":"reference/classes/entity/","title":"entity","text":""},{"location":"reference/classes/entity/#exe_kg_lib.classes.entity.Entity","title":"<code>Entity</code>","text":"<p>Abstraction of a KG entity with basic RDF properties plus its parent_entity (connected in KG with rdf:type).</p> Source code in <code>exe_kg_lib/classes/entity.py</code> <pre><code>class Entity:\n    \"\"\"\n    Abstraction of a KG entity with basic RDF properties plus its parent_entity (connected in KG with rdf:type).\n    \"\"\"\n\n    def __init__(self, iri: str, parent_entity: Entity = None):\n        self.iri = URIRef(iri)\n        self.parent_entity = parent_entity\n        self.namespace = self.get_namespace(iri)\n        self.name = self.type = self.get_descriptor(iri)\n        if parent_entity:\n            self.type = parent_entity.name\n\n    @staticmethod\n    def get_namespace(iri: str) -&gt; str:\n        return iri.split(\"#\")[0] + \"#\"\n\n    @staticmethod\n    def get_descriptor(iri: str) -&gt; str:\n        return iri.split(\"#\")[1]\n</code></pre>"},{"location":"reference/classes/exe_kg/","title":"exe_kg","text":""},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG","title":"<code>ExeKG</code>","text":"Source code in <code>exe_kg_lib/classes/exe_kg.py</code> <pre><code>class ExeKG:\n    def __init__(self, input_exe_kg_path: str = None):\n        \"\"\"\n\n        Args:\n            input_exe_kg_path: path of KG to be executed\n                               acts as switch for KG execution mode (if filled, mode is on)\n        \"\"\"\n        self.top_level_schema = KGSchema.from_schema_info(KG_SCHEMAS[\"Data Science\"])  # top-level KG schema\n        self.bottom_level_schemata = {}\n\n        # top-level KG schema entities\n        self.atomic_task = Entity(self.top_level_schema.namespace.AtomicTask)\n        self.atomic_method = Entity(self.top_level_schema.namespace.AtomicMethod)\n        self.data_entity = Entity(self.top_level_schema.namespace.DataEntity)\n        self.pipeline = Entity(self.top_level_schema.namespace.Pipeline)\n        self.data = Entity(self.top_level_schema.namespace.Data)\n        self.data_semantics = Entity(self.top_level_schema.namespace.DataSemantics)\n        self.data_structure = Entity(self.top_level_schema.namespace.DataStructure)\n\n        # self.input_kg: KG eventually filled with 3 KG schemas and the input executable KG in case of KG execution\n        self.input_kg = Graph(bind_namespaces=\"rdflib\")\n        if input_exe_kg_path:  # KG execution mode\n            self.input_kg.parse(input_exe_kg_path, format=\"n3\")  # parse input executable KG\n            check_kg_executability(self.input_kg)\n            all_ns = [n for n in self.input_kg.namespace_manager.namespaces()]\n            bottom_level_schema_info_set = False  # flag indicating that a bottom-level schema was found\n            for schema_name, schema_info in KG_SCHEMAS.items():  # search for used bottom-level schema\n                if (\n                    schema_name == \"Data Science\"  # or schema_name == \"Visualization\"\n                ):  # skip top-level KG schema and Visualization schema that is always used\n                    continue\n\n                if (schema_info[\"namespace_prefix\"], URIRef(schema_info[\"namespace\"])) in all_ns:\n                    # bottom-level schema found\n                    self.bottom_level_schemata[schema_info[\"namespace_prefix\"]] = KGSchema.from_schema_info(schema_info)\n                    bottom_level_schema_info_set = True\n\n            if not bottom_level_schema_info_set:  # no bottom-level schema found, input executable KG is invalid\n                print(\"Input executable KG did not have any bottom level KG schemas\")\n                exit(1)\n        else:  # KG construction mode\n            for schema_name, schema_info in KG_SCHEMAS.items():  # search for used bottom-level schema\n                if (\n                    schema_name == \"Data Science\"  # or schema_name == \"Visualization\"\n                ):  # skip top-level KG schema and Visualization schema that is always used\n                    continue\n\n                self.bottom_level_schemata[schema_info[\"namespace_prefix\"]] = KGSchema.from_schema_info(schema_info)\n\n        bottom_level_schemata_kgs = [kg_schema.kg for kg_schema in self.bottom_level_schemata.values()]\n\n        self.input_kg += self.top_level_schema.kg  # + self.visu_schema.kg  # combine all KG schemas in input KG\n\n        for bottom_level_schema_kg in bottom_level_schemata_kgs:\n            self.input_kg += bottom_level_schema_kg\n\n        self.output_kg = Graph(bind_namespaces=\"rdflib\")  # KG to be filled while constructing executable KG\n\n        self._bind_used_namespaces([self.input_kg, self.output_kg])\n\n        # below variables are filled in self._parse_kgs()\n        self.task_type_dict = {}  # dict for uniquely naming each new pipeline task\n        self.method_type_dict = {}  # dict for uniquely naming each new pipeline method\n        self.atomic_task_list = []  # list for storing the available sub-classes of ds:AtomicTask\n        self.atomic_method_list = []  # list for storing the available sub-classes of ds:AtomicMethod\n        self.data_type_list = []  # list for storing the available sub-classes of ds:DataEntity\n        self.data_semantics_list = []  # list for storing the available sub-classes of ds:DataSemantics\n        self.data_structure_list = []  # list for storing the available sub-classes of ds:DataStructure\n\n        self.existing_data_entity_list = (\n            []\n        )  # contains existing data entities that are output entities of previous tasks during KG construction\n        self.last_created_task = (\n            None  # last created pipeline task, for connecting consecutive pipeline tasks during KG construction\n        )\n        self.canvas_task_created = False  # indicates if canvas task was created during KG construction, and used for hiding the other Visualization tasks in CLI\n\n        self._parse_kgs()\n\n    def _bind_used_namespaces(self, kgs: List[Graph]):\n        \"\"\"\n        Binds top-level, bottom-level and Visualization KG schemas' namespaces with their prefixes\n        Adds these bindings to the Graphs of kgs list\n        Args:\n            kgs: list of Graph objects to which the namespace bindings are added\n        \"\"\"\n        for kg in kgs:\n            kg.bind(self.top_level_schema.namespace_prefix, self.top_level_schema.namespace)\n            for bottom_level_kg_schema in self.bottom_level_schemata.values():\n                kg.bind(\n                    bottom_level_kg_schema.namespace_prefix,\n                    bottom_level_kg_schema.namespace,\n                )\n\n    def _parse_kgs(self) -&gt; None:\n        \"\"\"\n        Fills lists with subclasses of top-level KG schema classes and initializes dicts used for unique naming\n        \"\"\"\n        atomic_task_subclasses = get_subclasses_of(self.atomic_task.iri, self.input_kg)\n        for t in list(atomic_task_subclasses):\n            task = Entity(t[0], self.atomic_task)\n            self.atomic_task_list.append(task)\n            self.task_type_dict[task.name] = 1\n\n        atomic_method_subclasses = get_subclasses_of(self.atomic_method.iri, self.input_kg)\n        for m in list(atomic_method_subclasses):\n            method = Entity(m[0], self.atomic_method)\n            self.atomic_method_list.append(method)\n            self.method_type_dict[method.name] = 1\n\n        data_type_subclasses = get_subclasses_of(self.data_entity.iri, self.input_kg)\n        for d in list(data_type_subclasses):\n            data_type = Entity(d[0], self.data_entity)\n            self.data_type_list.append(data_type)\n\n        data_semantics_subclasses = get_subclasses_of(self.data_semantics.iri, self.top_level_schema.kg)\n        for d in list(data_semantics_subclasses):\n            if d[0] == self.data_entity.iri:\n                continue\n            data_semantics = Entity(d[0], self.data_semantics)\n            self.data_semantics_list.append(data_semantics)\n\n        data_structure_subclasses = get_subclasses_of(self.data_structure.iri, self.top_level_schema.kg)\n        for d in list(data_structure_subclasses):\n            if d[0] == self.data_entity.iri:\n                continue\n            data_structure = Entity(d[0], self.data_structure)\n            self.data_structure_list.append(data_structure)\n\n    def create_pipeline_task(self, pipeline_name: str, input_data_path: str) -&gt; Task:\n        \"\"\"\n        Instantiates and adds a new pipeline task entity to self.output_kg\n        Args:\n            pipeline_name: name for the pipeline\n            input_data_path: path for the input data to be used by the pipeline's tasks\n\n        Returns:\n            Task: created pipeline\n        \"\"\"\n        pipeline = create_pipeline_task(\n            self.top_level_schema.namespace,\n            self.pipeline,\n            self.output_kg,\n            pipeline_name,\n            input_data_path,\n        )\n        self.last_created_task = pipeline\n        return pipeline\n\n    def create_data_entity(\n        self,\n        name: str,\n        source_value: str,\n        data_semantics_name: str,\n        data_structure_name: str,\n    ) -&gt; DataEntity:\n        \"\"\"\n        Creates a DataEntity object\n        Args:\n            name: name of the data entity\n            source_value: name of the data source corresponding to a column of the data\n            data_semantics_name: name of the data semantics entity\n            data_structure_name: name of the data structure entity\n\n        Returns:\n            DataEntity: object initialized with the given parameter values\n        \"\"\"\n        return DataEntity(\n            self.top_level_schema.namespace + name,\n            self.data_entity,\n            source_value,\n            self.top_level_schema.namespace + data_semantics_name,\n            self.top_level_schema.namespace + data_structure_name,\n        )\n\n    def add_task(\n        self,\n        kg_schema_short: str,\n        task: str,\n        input_data_entity_dict: Dict[str, List[DataEntity]],\n        method: str,\n        properties_dict: Dict[str, Union[str, int, float]],\n    ) -&gt; Task:\n        \"\"\"\n        Instantiates and adds a new task entity to self.output_kg\n        Components attached to the task during creation: input and output data entities, and a method with properties\n        Args:\n            kg_schema_short: abbreviated name of the KG schema in which the task and method belong\n            task: task name\n            input_data_entity_dict: keys -&gt; input names of the specified task\n                                    values -&gt; lists of DataEntity objects to be added as input to the task\n            method: method name\n            properties_dict: keys -&gt; property names of the specified method\n                             values -&gt; values to be added as parameters to the method\n\n        Returns:\n            Task: object of the created task\n        \"\"\"\n        kg_schema_to_use = self.bottom_level_schemata[kg_schema_short]\n\n        relation_iri = (\n            self.top_level_schema.namespace.hasNextTask\n            if self.last_created_task.type != \"Pipeline\"\n            else self.top_level_schema.namespace.hasStartTask\n        )  # use relation depending on the previous task\n\n        # instantiate task and link it with the previous one\n        parent_task = Task(kg_schema_to_use.namespace + task, self.atomic_task)\n        added_entity = add_instance_from_parent_with_relation(\n            kg_schema_to_use.namespace,\n            self.output_kg,\n            parent_task,\n            relation_iri,\n            self.last_created_task,\n            name_instance(self.task_type_dict, self.method_type_dict, parent_task),\n        )\n        next_task = Task.from_entity(added_entity)  # create Task object from Entity object\n\n        # instantiate and add given input data entities to the task\n        self._add_inputs_to_task(kg_schema_to_use.namespace, next_task, input_data_entity_dict)\n        # instantiate and add output data entities to the task, as specified in the KG schema\n        self._add_outputs_to_task(next_task)\n\n        method_parent = Entity(kg_schema_to_use.namespace + method, self.atomic_method)\n\n        # fetch compatible methods and their properties from KG schema\n        results = list(\n            get_method_properties_and_methods(\n                self.input_kg,\n                self.top_level_schema.namespace_prefix,\n                next_task.parent_entity.iri,\n            )\n        )\n\n        chosen_property_method = next(\n            filter(lambda pair: pair[1].split(\"#\")[1] == method, results), None\n        )  # match given method_type with query result\n        if chosen_property_method is None:\n            print(f\"Property connecting task of type {task} with method of type {method} not found\")\n            exit(1)\n\n        # instantiate method and link it with the task using the appropriate chosen_property_method[0] relation\n        method_entity = add_instance_from_parent_with_relation(\n            kg_schema_to_use.namespace,\n            self.output_kg,\n            method_parent,\n            chosen_property_method[0],\n            next_task,\n            name_instance(self.task_type_dict, self.method_type_dict, method_parent),\n        )\n\n        # fetch compatible data properties from KG schema\n        property_list = get_data_properties_plus_inherited_by_class_iri(self.input_kg, method_parent.iri)\n\n        # add data properties to the task with given values\n        for pair in property_list:\n            property_iri = pair[0]\n            property_name = property_iri.split(\"#\")[1]\n            range_iri = pair[1]\n            input_property = Literal(\n                lexical_or_value=properties_dict[property_name],\n                datatype=range_iri,\n            )\n            add_literal(self.output_kg, method_entity, property_iri, input_property)\n\n        self.last_created_task = next_task  # store created task\n\n        return next_task\n\n    def _add_inputs_to_task(\n        self,\n        namespace: Namespace,\n        task_entity: Task,\n        input_data_entity_dict: Dict[str, List[DataEntity]] = None,\n    ) -&gt; None:\n        \"\"\"\n        Instantiates and adds given input data entities to the given task of self.output_kg\n        if input_data_entity_dict is None, user is asked to specify input data entities\n        Args:\n            task_entity: the task to add the input to\n            input_data_entity_dict: keys -&gt; input entity names corresponding to the given task as defined in the chosen bottom-level KG schema\n                                    values -&gt; list of corresponding data entities to be added as input to the task\n        \"\"\"\n\n        use_cli = input_data_entity_dict is None\n\n        # fetch compatible inputs from KG schema\n        results = list(\n            get_input_properties_and_inputs(\n                self.input_kg,\n                self.top_level_schema.namespace_prefix,\n                task_entity.parent_entity.iri,\n            )\n        )\n\n        # task_type_index was incremented when creating the task entity\n        # reset the index to match the currently created task's index\n        task_type_index = self.task_type_dict[task_entity.type] - 1\n        for _, input_entity_iri, data_structure_iri in results:\n            input_entity_name = input_entity_iri.split(\"#\")[1]\n            if not use_cli:\n                input_data_entity_list = input_data_entity_dict[input_entity_name]\n            else:\n                # use CLI\n                print(f\"Specify input corresponding to {input_entity_name}\")\n                input_data_entity_list = get_input_for_existing_data_entities(self.existing_data_entity_list)\n                input_data_entity_list += get_input_for_new_data_entities(\n                    self.data_semantics_list,\n                    self.data_structure_list,\n                    namespace,\n                    self.data_entity,\n                )\n\n            same_input_index = 1\n            for input_data_entity in input_data_entity_list:\n                # instantiate data entity corresponding to the found input_entity_name\n                data_entity_iri = input_entity_iri + str(task_type_index) + \"_\" + str(same_input_index)\n                # instantiate given data entity\n                add_data_entity_instance(\n                    self.output_kg,\n                    self.data,\n                    self.top_level_schema.kg,\n                    self.top_level_schema.namespace,\n                    input_data_entity,\n                )\n                # instantiate and attach data entity with reference to the given data entity\n                data_entity = DataEntity(\n                    data_entity_iri,\n                    DataEntity(input_entity_iri, self.data_entity),\n                    has_reference=input_data_entity.iri,\n                    has_data_structure_iri=data_structure_iri,\n                )\n                add_and_attach_data_entity(\n                    self.output_kg,\n                    self.data,\n                    self.top_level_schema.kg,\n                    self.top_level_schema.namespace,\n                    data_entity,\n                    self.top_level_schema.namespace.hasInput,\n                    task_entity,\n                )\n                task_entity.input_dict[input_entity_name] = data_entity\n                same_input_index += 1\n\n                if use_cli:\n                    check_kg_executability(self.output_kg)\n\n    def _add_outputs_to_task(self, task_entity: Task) -&gt; None:\n        \"\"\"\n        Instantiates and adds output data entities to the given task of self.output_kg, based on the task's definition in the KG schema\n        Args:\n            task_entity: the task to add the output to\n        \"\"\"\n        # fetch compatible outputs from KG schema\n        results = list(\n            get_output_properties_and_outputs(\n                self.input_kg,\n                self.top_level_schema.namespace_prefix,\n                task_entity.parent_entity.iri,\n            )\n        )\n\n        # task_type_index was incremented when creating the task entity\n        # reset the index to match the currently created task's index\n        task_type_index = self.task_type_dict[task_entity.type] - 1\n        for output_property, output_parent_entity_iri, data_structure_iri in results:\n            # instantiate and add data entity\n            output_data_entity_iri = output_parent_entity_iri + str(task_type_index)\n            output_data_entity = DataEntity(\n                output_data_entity_iri,\n                DataEntity(output_parent_entity_iri, self.data_entity),\n                has_data_structure_iri=data_structure_iri,\n            )\n            add_and_attach_data_entity(\n                self.output_kg,\n                self.data,\n                self.top_level_schema.kg,\n                self.top_level_schema.namespace,\n                output_data_entity,\n                self.top_level_schema.namespace.hasOutput,\n                task_entity,\n            )\n            task_entity.output_dict[output_parent_entity_iri.split(\"#\")[1]] = output_data_entity\n            self.existing_data_entity_list.append(output_data_entity)\n\n    def _create_next_task_cli(self) -&gt; Union[None, Task]:\n        \"\"\"\n        Instantiates and adds task (without method) based on user input to self.output_kg\n        Adds task's output data entities to self.existing_data_entity_list\n        Returns:\n            None: in case user wants to end the pipeline creation\n            Task: object of the created task\n        \"\"\"\n        print(\"Please choose the next task\")\n        for i, t in enumerate(self.atomic_task_list):\n            if not self.canvas_task_created and t.name == \"PlotTask\":\n                continue\n            if self.canvas_task_created and t.name == \"CanvasTask\":\n                continue\n            print(f\"\\t{str(i)}. {t.name}\")\n        print(f\"\\t{str(-1)}. End pipeline\")\n        next_task_id = int(input())\n        if next_task_id == -1:\n            return None\n\n        next_task_parent = self.atomic_task_list[next_task_id]\n        relation_iri = (\n            self.top_level_schema.namespace.hasNextTask\n            if self.last_created_task.type != \"Pipeline\"\n            else self.top_level_schema.namespace.hasStartTask\n        )  # use relation depending on the previous task\n\n        # instantiate task and link it with the previous one\n        task_entity = add_instance_from_parent_with_relation(\n            next_task_parent.namespace,\n            self.output_kg,\n            next_task_parent,\n            relation_iri,\n            self.last_created_task,\n            name_instance(self.task_type_dict, self.method_type_dict, next_task_parent),\n        )\n\n        task_entity = Task(task_entity.iri, task_entity.parent_entity)  # create Task object from Entity object's info\n\n        # instantiate and add input data entities to the task based on user input\n        self._add_inputs_to_task(next_task_parent.namespace, task_entity)\n        # instantiate and add output data entities to the task, as specified in the KG schema\n        self._add_outputs_to_task(task_entity)\n\n        self.last_created_task = task_entity\n        if task_entity.type == \"CanvasTask\":\n            self.canvas_task_created = True\n\n        return task_entity\n\n    def _create_method(self, task_to_attach_to: Entity) -&gt; None:\n        \"\"\"\n        Instantiate and attach method to task of self.output_kg\n        Args:\n            task_to_attach_to: the task to attach the created method to\n        \"\"\"\n        print(f\"Please choose a method for {task_to_attach_to.type}:\")\n\n        # fetch compatible methods and their properties from KG schema\n        results = list(\n            get_method_properties_and_methods(\n                self.input_kg,\n                self.top_level_schema.namespace_prefix,\n                task_to_attach_to.parent_entity.iri,\n            )\n        )\n        for i, pair in enumerate(results):\n            tmp_method = pair[1].split(\"#\")[1]\n            print(f\"\\t{str(i)}. {tmp_method}\")\n\n        method_id = int(input())\n        selected_property_and_method = results[method_id]\n        method_parent = next(\n            filter(\n                lambda m: m.iri == selected_property_and_method[1],\n                self.atomic_method_list,\n            ),\n            None,\n        )\n        # instantiate method and link it with the task using the appropriate selected_property_and_method[0] relation\n        add_instance_from_parent_with_relation(\n            task_to_attach_to.namespace,\n            self.output_kg,\n            method_parent,\n            selected_property_and_method[0],\n            task_to_attach_to,\n            name_instance(self.task_type_dict, self.method_type_dict, method_parent),\n        )\n\n        # fetch compatible data properties from KG schema\n        property_list = get_data_properties_plus_inherited_by_class_iri(self.input_kg, method_parent.iri)\n\n        if property_list:\n            print(f\"Please enter requested properties for {method_parent.name}:\")\n            # add data properties to the task with given values\n            for pair in property_list:\n                property_instance = URIRef(pair[0])\n                range = pair[1].split(\"#\")[1]\n                range_iri = pair[1]\n                input_property = Literal(\n                    lexical_or_value=input(\"\\t{} in range({}): \".format(pair[0].split(\"#\")[1], range)),\n                    datatype=range_iri,\n                )\n                add_literal(self.output_kg, task_to_attach_to, property_instance, input_property)\n\n        check_kg_executability(self.output_kg)\n\n    def start_pipeline_creation(self, pipeline_name: str, input_data_path: str) -&gt; None:\n        \"\"\"\n        Handles the pipeline creation through CLI\n        Args:\n            pipeline_name: name for the pipeline\n            input_data_path: path for the input data to be used by the pipeline's tasks\n        \"\"\"\n        pipeline = create_pipeline_task(\n            self.top_level_schema.namespace,\n            self.pipeline,\n            self.output_kg,\n            pipeline_name,\n            input_data_path,\n        )\n\n        self.last_created_task = pipeline\n\n        while True:\n            next_task = self._create_next_task_cli()\n            if next_task is None:\n                break\n\n            self._create_method(next_task)\n\n    def save_created_kg(self, file_path: str) -&gt; None:\n        \"\"\"\n        Saves self.output_kg to a file\n        Args:\n            file_path: path of the output file\n        \"\"\"\n        check_kg_executability(self.output_kg)\n\n        dir_path = os.path.dirname(file_path)\n        os.makedirs(dir_path, exist_ok=True)\n\n        self.output_kg.serialize(destination=file_path)\n        print(f\"Executable KG saved in {file_path}\")\n\n    def _property_value_to_field_value(self, property_value: str) -&gt; Union[str, DataEntity]:\n        \"\"\"\n        Converts property value to Python class field value\n        If property_value is not a data entity's IRI, it is returned as is\n        Else, its property values are converted recursively and stored in a DataEntity object\n        Args:\n            property_value: value of the property as found in KG\n\n        Returns:\n            str: property_value parameter as is\n            DataEntity: object containing parsed data entity properties\n        \"\"\"\n        if \"#\" in property_value:\n            data_entity = self._parse_data_entity_by_iri(property_value)\n            if data_entity is None:\n                return property_value\n            return data_entity\n\n        return property_value\n\n    def _parse_data_entity_by_iri(self, in_out_data_entity_iri: str) -&gt; Optional[DataEntity]:\n        \"\"\"\n        Parses an input or output data entity of self.input_kg and stores the parsed info in a Python object\n        Args:\n            in_out_data_entity_iri: IRI of the KG entity to parse\n\n        Returns:\n            None: if given IRI does not belong to an instance of a sub-class of self.top_level_schema.namespace.DataEntity\n            DataEntity: object with data entity's parsed properties\n        \"\"\"\n        # fetch type of entity with given IRI\n        query_result = get_first_query_result_if_exists(\n            query_entity_parent_iri,\n            self.input_kg,\n            in_out_data_entity_iri,\n            self.top_level_schema.namespace.DataEntity,\n        )\n        if query_result is None:\n            return None\n\n        data_entity_parent_iri = str(query_result[0])\n\n        # fetch IRI of data entity that is referenced by the given entity\n        query_result = get_first_query_result_if_exists(\n            query_data_entity_reference_iri,\n            self.input_kg,\n            self.top_level_schema.namespace_prefix,\n            in_out_data_entity_iri,\n        )\n\n        if query_result is None:  # no referenced data entity found\n            data_entity_ref_iri = in_out_data_entity_iri\n        else:\n            data_entity_ref_iri = str(query_result[0])\n\n        # create DataEntity object to store all the parsed properties\n        data_entity = DataEntity(in_out_data_entity_iri, Entity(data_entity_parent_iri))\n        data_entity.has_reference = data_entity_ref_iri.split(\"#\")[1]\n\n        for s, p, o in self.input_kg.triples((URIRef(data_entity_ref_iri), None, None)):\n            # parse property name and value\n            field_name = property_name_to_field_name(str(p))\n            if not hasattr(data_entity, field_name) or field_name == \"type\":\n                continue\n            field_value = self._property_value_to_field_value(str(o))\n            setattr(data_entity, field_name, field_value)  # set field value dynamically\n\n        return data_entity\n\n    def _parse_task_by_iri(self, task_iri: str, canvas_method: visual_tasks.CanvasTaskCanvasMethod = None) -&gt; Task:\n        \"\"\"\n        Parses a task of self.input_kg and stores the info in an object of a sub-class of Task\n        The sub-class name and the object's fields are mapped dynamically based on the found KG components\n        Args:\n            task_iri: IRI of the task to be parsed\n            canvas_method: optional object to pass as argument for task object initialization\n\n        Returns:\n            Task: object of a sub-class of Task, containing all the parsed info\n        \"\"\"\n        # fetch type of entity with given IRI\n        query_result = get_first_query_result_if_exists(\n            query_entity_parent_iri,\n            self.input_kg,\n            task_iri,\n            self.top_level_schema.namespace.AtomicTask,\n        )\n\n        if (\n            query_result is None\n        ):  # given IRI does not belong to an instance of a sub-class of self.top_level_schema.namespace.AtomicTask\n            print(f\"Cannot retrieve parent of task with iri {task_iri}. Exiting...\")\n            exit(1)\n\n        task_parent_iri = str(query_result[0])\n\n        task = Task(task_iri, Task(task_parent_iri))\n        method = get_method_by_task_iri(\n            self.input_kg,\n            self.top_level_schema.namespace_prefix,\n            self.top_level_schema.namespace,\n            task_iri,\n        )\n        if method is None:\n            print(f\"Cannot retrieve method for task with iri: {task_iri}\")\n\n        # perform automatic mapping of KG task class to Python sub-class\n        class_name = task.type + method.type\n        Class = getattr(visual_tasks, class_name, None)\n        if Class is None:\n            Class = getattr(statistic_tasks, class_name, None)\n        if Class is None:\n            Class = getattr(ml_tasks, class_name, None)\n\n        # create Task sub-class object\n        if canvas_method:\n            task = Class(task_iri, Task(task_parent_iri), canvas_method)\n        else:\n            task = Class(task_iri, Task(task_parent_iri))\n\n        task_related_triples = self.input_kg.triples((URIRef(task_iri), None, None))\n        method_related_triples = self.input_kg.triples((URIRef(method.iri), None, None))\n\n        for s, p, o in itertools.chain(task_related_triples, method_related_triples):\n            # parse property name and value\n            field_name = property_name_to_field_name(str(p))\n            if not hasattr(task, field_name) or field_name == \"type\":\n                continue\n            field_value = self._property_value_to_field_value(str(o))\n\n            # set field value dynamically\n            if field_name == \"has_input\" or field_name == \"has_output\":\n                getattr(task, field_name).append(field_value)\n            else:\n                setattr(task, field_name, field_value)\n\n        return task\n\n    def execute_pipeline(self):\n        \"\"\"\n        Retrieves and executes pipeline by parsing self.input_kg\n        \"\"\"\n        pipeline_iri, input_data_path, next_task_iri = get_pipeline_and_first_task_iri(\n            self.input_kg, self.top_level_schema.namespace_prefix\n        )\n        input_data = pd.read_csv(input_data_path, delimiter=\",\", encoding=\"ISO-8859-1\")\n        canvas_method = None  # stores Task object that corresponds to a task of type CanvasTask\n        task_output_dict = {}  # gradually filled with outputs of executed tasks\n        while next_task_iri is not None:\n            next_task = self._parse_task_by_iri(next_task_iri, canvas_method)\n            output = next_task.run_method(task_output_dict, input_data)\n            if output:\n                task_output_dict.update(output)\n\n            if next_task.type == \"CanvasTask\":\n                canvas_method = next_task\n\n            next_task_iri = next_task.has_next_task\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG.__init__","title":"<code>__init__(input_exe_kg_path=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>input_exe_kg_path</code> <code>str</code> <p>path of KG to be executed                acts as switch for KG execution mode (if filled, mode is on)</p> <code>None</code> Source code in <code>exe_kg_lib/classes/exe_kg.py</code> <pre><code>def __init__(self, input_exe_kg_path: str = None):\n    \"\"\"\n\n    Args:\n        input_exe_kg_path: path of KG to be executed\n                           acts as switch for KG execution mode (if filled, mode is on)\n    \"\"\"\n    self.top_level_schema = KGSchema.from_schema_info(KG_SCHEMAS[\"Data Science\"])  # top-level KG schema\n    self.bottom_level_schemata = {}\n\n    # top-level KG schema entities\n    self.atomic_task = Entity(self.top_level_schema.namespace.AtomicTask)\n    self.atomic_method = Entity(self.top_level_schema.namespace.AtomicMethod)\n    self.data_entity = Entity(self.top_level_schema.namespace.DataEntity)\n    self.pipeline = Entity(self.top_level_schema.namespace.Pipeline)\n    self.data = Entity(self.top_level_schema.namespace.Data)\n    self.data_semantics = Entity(self.top_level_schema.namespace.DataSemantics)\n    self.data_structure = Entity(self.top_level_schema.namespace.DataStructure)\n\n    # self.input_kg: KG eventually filled with 3 KG schemas and the input executable KG in case of KG execution\n    self.input_kg = Graph(bind_namespaces=\"rdflib\")\n    if input_exe_kg_path:  # KG execution mode\n        self.input_kg.parse(input_exe_kg_path, format=\"n3\")  # parse input executable KG\n        check_kg_executability(self.input_kg)\n        all_ns = [n for n in self.input_kg.namespace_manager.namespaces()]\n        bottom_level_schema_info_set = False  # flag indicating that a bottom-level schema was found\n        for schema_name, schema_info in KG_SCHEMAS.items():  # search for used bottom-level schema\n            if (\n                schema_name == \"Data Science\"  # or schema_name == \"Visualization\"\n            ):  # skip top-level KG schema and Visualization schema that is always used\n                continue\n\n            if (schema_info[\"namespace_prefix\"], URIRef(schema_info[\"namespace\"])) in all_ns:\n                # bottom-level schema found\n                self.bottom_level_schemata[schema_info[\"namespace_prefix\"]] = KGSchema.from_schema_info(schema_info)\n                bottom_level_schema_info_set = True\n\n        if not bottom_level_schema_info_set:  # no bottom-level schema found, input executable KG is invalid\n            print(\"Input executable KG did not have any bottom level KG schemas\")\n            exit(1)\n    else:  # KG construction mode\n        for schema_name, schema_info in KG_SCHEMAS.items():  # search for used bottom-level schema\n            if (\n                schema_name == \"Data Science\"  # or schema_name == \"Visualization\"\n            ):  # skip top-level KG schema and Visualization schema that is always used\n                continue\n\n            self.bottom_level_schemata[schema_info[\"namespace_prefix\"]] = KGSchema.from_schema_info(schema_info)\n\n    bottom_level_schemata_kgs = [kg_schema.kg for kg_schema in self.bottom_level_schemata.values()]\n\n    self.input_kg += self.top_level_schema.kg  # + self.visu_schema.kg  # combine all KG schemas in input KG\n\n    for bottom_level_schema_kg in bottom_level_schemata_kgs:\n        self.input_kg += bottom_level_schema_kg\n\n    self.output_kg = Graph(bind_namespaces=\"rdflib\")  # KG to be filled while constructing executable KG\n\n    self._bind_used_namespaces([self.input_kg, self.output_kg])\n\n    # below variables are filled in self._parse_kgs()\n    self.task_type_dict = {}  # dict for uniquely naming each new pipeline task\n    self.method_type_dict = {}  # dict for uniquely naming each new pipeline method\n    self.atomic_task_list = []  # list for storing the available sub-classes of ds:AtomicTask\n    self.atomic_method_list = []  # list for storing the available sub-classes of ds:AtomicMethod\n    self.data_type_list = []  # list for storing the available sub-classes of ds:DataEntity\n    self.data_semantics_list = []  # list for storing the available sub-classes of ds:DataSemantics\n    self.data_structure_list = []  # list for storing the available sub-classes of ds:DataStructure\n\n    self.existing_data_entity_list = (\n        []\n    )  # contains existing data entities that are output entities of previous tasks during KG construction\n    self.last_created_task = (\n        None  # last created pipeline task, for connecting consecutive pipeline tasks during KG construction\n    )\n    self.canvas_task_created = False  # indicates if canvas task was created during KG construction, and used for hiding the other Visualization tasks in CLI\n\n    self._parse_kgs()\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG.add_task","title":"<code>add_task(kg_schema_short, task, input_data_entity_dict, method, properties_dict)</code>","text":"<p>Instantiates and adds a new task entity to self.output_kg Components attached to the task during creation: input and output data entities, and a method with properties Args:     kg_schema_short: abbreviated name of the KG schema in which the task and method belong     task: task name     input_data_entity_dict: keys -&gt; input names of the specified task                             values -&gt; lists of DataEntity objects to be added as input to the task     method: method name     properties_dict: keys -&gt; property names of the specified method                      values -&gt; values to be added as parameters to the method</p> <p>Returns:</p> Name Type Description <code>Task</code> <code>Task</code> <p>object of the created task</p> Source code in <code>exe_kg_lib/classes/exe_kg.py</code> <pre><code>def add_task(\n    self,\n    kg_schema_short: str,\n    task: str,\n    input_data_entity_dict: Dict[str, List[DataEntity]],\n    method: str,\n    properties_dict: Dict[str, Union[str, int, float]],\n) -&gt; Task:\n    \"\"\"\n    Instantiates and adds a new task entity to self.output_kg\n    Components attached to the task during creation: input and output data entities, and a method with properties\n    Args:\n        kg_schema_short: abbreviated name of the KG schema in which the task and method belong\n        task: task name\n        input_data_entity_dict: keys -&gt; input names of the specified task\n                                values -&gt; lists of DataEntity objects to be added as input to the task\n        method: method name\n        properties_dict: keys -&gt; property names of the specified method\n                         values -&gt; values to be added as parameters to the method\n\n    Returns:\n        Task: object of the created task\n    \"\"\"\n    kg_schema_to_use = self.bottom_level_schemata[kg_schema_short]\n\n    relation_iri = (\n        self.top_level_schema.namespace.hasNextTask\n        if self.last_created_task.type != \"Pipeline\"\n        else self.top_level_schema.namespace.hasStartTask\n    )  # use relation depending on the previous task\n\n    # instantiate task and link it with the previous one\n    parent_task = Task(kg_schema_to_use.namespace + task, self.atomic_task)\n    added_entity = add_instance_from_parent_with_relation(\n        kg_schema_to_use.namespace,\n        self.output_kg,\n        parent_task,\n        relation_iri,\n        self.last_created_task,\n        name_instance(self.task_type_dict, self.method_type_dict, parent_task),\n    )\n    next_task = Task.from_entity(added_entity)  # create Task object from Entity object\n\n    # instantiate and add given input data entities to the task\n    self._add_inputs_to_task(kg_schema_to_use.namespace, next_task, input_data_entity_dict)\n    # instantiate and add output data entities to the task, as specified in the KG schema\n    self._add_outputs_to_task(next_task)\n\n    method_parent = Entity(kg_schema_to_use.namespace + method, self.atomic_method)\n\n    # fetch compatible methods and their properties from KG schema\n    results = list(\n        get_method_properties_and_methods(\n            self.input_kg,\n            self.top_level_schema.namespace_prefix,\n            next_task.parent_entity.iri,\n        )\n    )\n\n    chosen_property_method = next(\n        filter(lambda pair: pair[1].split(\"#\")[1] == method, results), None\n    )  # match given method_type with query result\n    if chosen_property_method is None:\n        print(f\"Property connecting task of type {task} with method of type {method} not found\")\n        exit(1)\n\n    # instantiate method and link it with the task using the appropriate chosen_property_method[0] relation\n    method_entity = add_instance_from_parent_with_relation(\n        kg_schema_to_use.namespace,\n        self.output_kg,\n        method_parent,\n        chosen_property_method[0],\n        next_task,\n        name_instance(self.task_type_dict, self.method_type_dict, method_parent),\n    )\n\n    # fetch compatible data properties from KG schema\n    property_list = get_data_properties_plus_inherited_by_class_iri(self.input_kg, method_parent.iri)\n\n    # add data properties to the task with given values\n    for pair in property_list:\n        property_iri = pair[0]\n        property_name = property_iri.split(\"#\")[1]\n        range_iri = pair[1]\n        input_property = Literal(\n            lexical_or_value=properties_dict[property_name],\n            datatype=range_iri,\n        )\n        add_literal(self.output_kg, method_entity, property_iri, input_property)\n\n    self.last_created_task = next_task  # store created task\n\n    return next_task\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG.create_data_entity","title":"<code>create_data_entity(name, source_value, data_semantics_name, data_structure_name)</code>","text":"<p>Creates a DataEntity object Args:     name: name of the data entity     source_value: name of the data source corresponding to a column of the data     data_semantics_name: name of the data semantics entity     data_structure_name: name of the data structure entity</p> <p>Returns:</p> Name Type Description <code>DataEntity</code> <code>DataEntity</code> <p>object initialized with the given parameter values</p> Source code in <code>exe_kg_lib/classes/exe_kg.py</code> <pre><code>def create_data_entity(\n    self,\n    name: str,\n    source_value: str,\n    data_semantics_name: str,\n    data_structure_name: str,\n) -&gt; DataEntity:\n    \"\"\"\n    Creates a DataEntity object\n    Args:\n        name: name of the data entity\n        source_value: name of the data source corresponding to a column of the data\n        data_semantics_name: name of the data semantics entity\n        data_structure_name: name of the data structure entity\n\n    Returns:\n        DataEntity: object initialized with the given parameter values\n    \"\"\"\n    return DataEntity(\n        self.top_level_schema.namespace + name,\n        self.data_entity,\n        source_value,\n        self.top_level_schema.namespace + data_semantics_name,\n        self.top_level_schema.namespace + data_structure_name,\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG.create_pipeline_task","title":"<code>create_pipeline_task(pipeline_name, input_data_path)</code>","text":"<p>Instantiates and adds a new pipeline task entity to self.output_kg Args:     pipeline_name: name for the pipeline     input_data_path: path for the input data to be used by the pipeline's tasks</p> <p>Returns:</p> Name Type Description <code>Task</code> <code>Task</code> <p>created pipeline</p> Source code in <code>exe_kg_lib/classes/exe_kg.py</code> <pre><code>def create_pipeline_task(self, pipeline_name: str, input_data_path: str) -&gt; Task:\n    \"\"\"\n    Instantiates and adds a new pipeline task entity to self.output_kg\n    Args:\n        pipeline_name: name for the pipeline\n        input_data_path: path for the input data to be used by the pipeline's tasks\n\n    Returns:\n        Task: created pipeline\n    \"\"\"\n    pipeline = create_pipeline_task(\n        self.top_level_schema.namespace,\n        self.pipeline,\n        self.output_kg,\n        pipeline_name,\n        input_data_path,\n    )\n    self.last_created_task = pipeline\n    return pipeline\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG.execute_pipeline","title":"<code>execute_pipeline()</code>","text":"<p>Retrieves and executes pipeline by parsing self.input_kg</p> Source code in <code>exe_kg_lib/classes/exe_kg.py</code> <pre><code>def execute_pipeline(self):\n    \"\"\"\n    Retrieves and executes pipeline by parsing self.input_kg\n    \"\"\"\n    pipeline_iri, input_data_path, next_task_iri = get_pipeline_and_first_task_iri(\n        self.input_kg, self.top_level_schema.namespace_prefix\n    )\n    input_data = pd.read_csv(input_data_path, delimiter=\",\", encoding=\"ISO-8859-1\")\n    canvas_method = None  # stores Task object that corresponds to a task of type CanvasTask\n    task_output_dict = {}  # gradually filled with outputs of executed tasks\n    while next_task_iri is not None:\n        next_task = self._parse_task_by_iri(next_task_iri, canvas_method)\n        output = next_task.run_method(task_output_dict, input_data)\n        if output:\n            task_output_dict.update(output)\n\n        if next_task.type == \"CanvasTask\":\n            canvas_method = next_task\n\n        next_task_iri = next_task.has_next_task\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG.save_created_kg","title":"<code>save_created_kg(file_path)</code>","text":"<p>Saves self.output_kg to a file Args:     file_path: path of the output file</p> Source code in <code>exe_kg_lib/classes/exe_kg.py</code> <pre><code>def save_created_kg(self, file_path: str) -&gt; None:\n    \"\"\"\n    Saves self.output_kg to a file\n    Args:\n        file_path: path of the output file\n    \"\"\"\n    check_kg_executability(self.output_kg)\n\n    dir_path = os.path.dirname(file_path)\n    os.makedirs(dir_path, exist_ok=True)\n\n    self.output_kg.serialize(destination=file_path)\n    print(f\"Executable KG saved in {file_path}\")\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG.start_pipeline_creation","title":"<code>start_pipeline_creation(pipeline_name, input_data_path)</code>","text":"<p>Handles the pipeline creation through CLI Args:     pipeline_name: name for the pipeline     input_data_path: path for the input data to be used by the pipeline's tasks</p> Source code in <code>exe_kg_lib/classes/exe_kg.py</code> <pre><code>def start_pipeline_creation(self, pipeline_name: str, input_data_path: str) -&gt; None:\n    \"\"\"\n    Handles the pipeline creation through CLI\n    Args:\n        pipeline_name: name for the pipeline\n        input_data_path: path for the input data to be used by the pipeline's tasks\n    \"\"\"\n    pipeline = create_pipeline_task(\n        self.top_level_schema.namespace,\n        self.pipeline,\n        self.output_kg,\n        pipeline_name,\n        input_data_path,\n    )\n\n    self.last_created_task = pipeline\n\n    while True:\n        next_task = self._create_next_task_cli()\n        if next_task is None:\n            break\n\n        self._create_method(next_task)\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.Method","title":"<code>Method</code>","text":"<p>               Bases: <code>Entity</code></p> <p>Abstraction of owl:class ds:AtomicMethod.</p> <p>\u2757 Important for contributors: See Section \"Naming conventions\" in README.md of \"classes.tasks\" package before extending the code's functionality.</p> Source code in <code>exe_kg_lib/classes/method.py</code> <pre><code>class Method(Entity):\n    \"\"\"\n    Abstraction of owl:class ds:AtomicMethod.\n\n    \u2757 Important for contributors: See Section \"Naming conventions\" in README.md of \"classes.tasks\" package before extending the code's functionality.\n    \"\"\"\n\n    def __init__(\n        self,\n        iri: str,\n        parent_entity: Entity,\n        module_chain: List[str] = None,\n        params_dict: Dict[str, Union[str, int, float]] = None,\n        inherited_params_dict: Dict[str, Union[str, int, float]] = None,\n    ):\n        super().__init__(iri, parent_entity)\n\n        if module_chain is None:\n            module_chain = []\n        self.module_chain = module_chain  # e.g. ['sklearn','model_selection', 'StratifiedShuffleSplit'] Used for resolving the Python module that contains the method to be executed\n\n        if params_dict is None:\n            params_dict = {}\n        self.params_dict = params_dict  # used for storing method parameters during KG execution\n\n        if inherited_params_dict is None:\n            inherited_params_dict = {}\n        self.inherited_params_dict = {}  # used for storing inherited method parameters during KG execution\n\n    def resolve_module(self, module_name_to_snakecase=False) -&gt; Any:\n        \"\"\"\n        Resolves and returns the Python module specified by the method module chain.\n\n        Args:\n            module_name_to_snakecase (bool, optional): Whether to convert the last module name to snake case.\n                                                      Defaults to False.\n\n        Returns:\n            Any: The resolved module.\n\n        Raises:\n            NotImplementedError: If the method module chain is not defined for the task.\n        \"\"\"\n        if not self.module_chain:\n            raise NotImplementedError(f\"Method module chain not defined for task {self.name}.\")\n\n        module_chain = self.module_chain\n        if module_name_to_snakecase:\n            module_chain = self.module_chain[:-1] + [camel_to_snake(self.module_chain[-1])]\n\n        module_chain_parents = \".\".join(module_chain[:-1])\n        module_chain_child = module_chain[-1]\n        module_container = importlib.import_module(module_chain_parents)\n        module = getattr(module_container, module_chain_child)\n        return module\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.Method.resolve_module","title":"<code>resolve_module(module_name_to_snakecase=False)</code>","text":"<p>Resolves and returns the Python module specified by the method module chain.</p> <p>Parameters:</p> Name Type Description Default <code>module_name_to_snakecase</code> <code>bool</code> <p>Whether to convert the last module name to snake case.                                       Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The resolved module.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If the method module chain is not defined for the task.</p> Source code in <code>exe_kg_lib/classes/method.py</code> <pre><code>def resolve_module(self, module_name_to_snakecase=False) -&gt; Any:\n    \"\"\"\n    Resolves and returns the Python module specified by the method module chain.\n\n    Args:\n        module_name_to_snakecase (bool, optional): Whether to convert the last module name to snake case.\n                                                  Defaults to False.\n\n    Returns:\n        Any: The resolved module.\n\n    Raises:\n        NotImplementedError: If the method module chain is not defined for the task.\n    \"\"\"\n    if not self.module_chain:\n        raise NotImplementedError(f\"Method module chain not defined for task {self.name}.\")\n\n    module_chain = self.module_chain\n    if module_name_to_snakecase:\n        module_chain = self.module_chain[:-1] + [camel_to_snake(self.module_chain[-1])]\n\n    module_chain_parents = \".\".join(module_chain[:-1])\n    module_chain_child = module_chain[-1]\n    module_container = importlib.import_module(module_chain_parents)\n    module = getattr(module_container, module_chain_child)\n    return module\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.camel_to_snake","title":"<code>camel_to_snake(text)</code>","text":"<p>Converts a camel case string to snake case.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The camel case string to be converted.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The snake case version of the input string.</p> Source code in <code>exe_kg_lib/utils/string_utils.py</code> <pre><code>def camel_to_snake(text: str) -&gt; str:\n    \"\"\"\n    Converts a camel case string to snake case.\n\n    Args:\n        text (str): The camel case string to be converted.\n\n    Returns:\n        str: The snake case version of the input string.\n    \"\"\"\n    text = re.sub(\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", text)\n    return re.sub(\"([a-z0-9])([A-Z])\", r\"\\1_\\2\", text).lower()\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.class_name_to_method_name","title":"<code>class_name_to_method_name(class_name)</code>","text":"<p>Converts a class name to a method name by removing the word \"Method\" from the end of the class name.</p> <p>Parameters:</p> Name Type Description Default <code>class_name</code> <code>str</code> <p>The class name to convert.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The converted method name.</p> Source code in <code>exe_kg_lib/utils/string_utils.py</code> <pre><code>def class_name_to_method_name(class_name: str) -&gt; str:\n    \"\"\"\n    Converts a class name to a method name by removing the word \"Method\" from the end of the class name.\n\n    Args:\n        class_name (str): The class name to convert.\n\n    Returns:\n        str: The converted method name.\n    \"\"\"\n    name = re.sub(\"Method$\", \"\", class_name)\n    return name\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.class_name_to_module_name","title":"<code>class_name_to_module_name(class_name)</code>","text":"<p>Converts a class name to a module name by removing the \"Module\" suffix and converting it to snake case.</p> <p>Parameters:</p> Name Type Description Default <code>class_name</code> <code>str</code> <p>The class name to convert.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The converted module name.</p> Source code in <code>exe_kg_lib/utils/string_utils.py</code> <pre><code>def class_name_to_module_name(class_name: str) -&gt; str:\n    \"\"\"\n    Converts a class name to a module name by removing the \"Module\" suffix and converting it to snake case.\n\n    Args:\n        class_name (str): The class name to convert.\n\n    Returns:\n        str: The converted module name.\n    \"\"\"\n    name = re.sub(\"Module$\", \"\", class_name)\n    return camel_to_snake(name)\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.get_converted_module_hierarchy_chain","title":"<code>get_converted_module_hierarchy_chain(kg, namespace_prefix, method_iri)</code>","text":"<p>Retrieves the module hierarchy chain for a given method IRI and converts it to a list of module names.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix to use in queries.</p> required <code>method_iri</code> <code>str</code> <p>The IRI of the method.</p> required <p>Returns:</p> Name Type Description <code>List</code> <code>List</code> <p>The list of module names in the module hierarchy chain, in the correct order.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def get_converted_module_hierarchy_chain(\n    kg: Graph,\n    namespace_prefix: str,\n    method_iri: str,\n) -&gt; List:\n    \"\"\"\n    Retrieves the module hierarchy chain for a given method IRI and converts it to a list of module names.\n\n    Args:\n        kg (Graph): The knowledge graph to query.\n        namespace_prefix (str): The namespace prefix to use in queries.\n        method_iri (str): The IRI of the method.\n\n    Returns:\n        List: The list of module names in the module hierarchy chain, in the correct order.\n    \"\"\"\n    module_chain_names = None\n    try:\n        module_chain_names = get_module_hierarchy_chain(kg, namespace_prefix, method_iri)\n    except NoResultsError:\n        print(f\"Cannot retrieve module chain for method class: {method_iri}. Proceeding without it...\")\n\n    if module_chain_names:\n        # convert KG class names to module names and reverse the module chain to store it in the correct order\n        module_chain_names = [class_name_to_module_name(name) for name in module_chain_names]\n        module_chain_names = [class_name_to_method_name(method_iri.split(\"#\")[-1])] + module_chain_names\n        module_chain_names.reverse()\n\n    return module_chain_names\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.get_first_query_result_if_exists","title":"<code>get_first_query_result_if_exists(query_method, *args)</code>","text":"<p>Executes the given query method with the provided arguments and returns the first result if it exists.</p> <p>Parameters:</p> Name Type Description Default <code>query_method</code> <code>Callable</code> <p>The query method to execute.</p> required <code>*args</code> <p>Variable number of arguments to pass to the query method.</p> <code>()</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: The first query result if it exists, otherwise None.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def get_first_query_result_if_exists(query_method: Callable, *args) -&gt; Optional[str]:\n    \"\"\"\n    Executes the given query method with the provided arguments and returns the first result if it exists.\n\n    Args:\n        query_method (Callable): The query method to execute.\n        *args: Variable number of arguments to pass to the query method.\n\n    Returns:\n        Optional[str]: The first query result if it exists, otherwise None.\n    \"\"\"\n    query_result = next(\n        iter(list(query_method(*args))),\n        None,\n    )\n\n    if query_result is None:\n        return None\n\n    return query_result\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.get_grouped_inherited_inputs","title":"<code>get_grouped_inherited_inputs(input_kg, namespace_prefix, entity_iri)</code>","text":"<p>Retrieves the inherited inputs for a given entity, grouped by data entity IRI.</p> <p>Parameters:</p> Name Type Description Default <code>input_kg</code> <code>Graph</code> <p>The input knowledge graph.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix for the entity.</p> required <code>entity_iri</code> <code>str</code> <p>The IRI of the entity.</p> required <p>Returns:</p> Type Description <code>List[Tuple[str, List[str]]]</code> <p>List[Tuple[str, List[str]]]: A list of tuples, where each tuple contains a property name and a list of input values.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def get_grouped_inherited_inputs(\n    input_kg: Graph, namespace_prefix: str, entity_iri: str\n) -&gt; List[Tuple[str, List[str]]]:\n    \"\"\"\n    Retrieves the inherited inputs for a given entity, grouped by data entity IRI.\n\n    Args:\n        input_kg (Graph): The input knowledge graph.\n        namespace_prefix (str): The namespace prefix for the entity.\n        entity_iri (str): The IRI of the entity.\n\n    Returns:\n        List[Tuple[str, List[str]]]: A list of tuples, where each tuple contains a property name and a list of input values.\n\n    \"\"\"\n    property_list = list(query_inherited_inputs(input_kg, namespace_prefix, entity_iri))\n    property_list = sorted(property_list, key=lambda elem: elem[0])  # prepare for grouping\n    property_list = [\n        (key, [(elem[1], elem[2]) for elem in group])\n        for key, group in itertools.groupby(property_list, key=lambda elem: elem[0])\n    ]\n\n    return property_list\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.get_grouped_inherited_outputs","title":"<code>get_grouped_inherited_outputs(input_kg, namespace_prefix, entity_iri)</code>","text":"<p>Retrieves the inherited outputs for a given entity, grouped by data entity IRI.</p> <p>Parameters:</p> Name Type Description Default <code>input_kg</code> <code>Graph</code> <p>The input knowledge graph.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix for the entity.</p> required <code>entity_iri</code> <code>str</code> <p>The IRI of the entity.</p> required <p>Returns:</p> Type Description <code>List[Tuple[str, List[str]]]</code> <p>List[Tuple[str, List[str]]]: A list of tuples, where each tuple contains a property name and a list of input values.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def get_grouped_inherited_outputs(\n    input_kg: Graph, namespace_prefix: str, entity_iri: str\n) -&gt; List[Tuple[str, List[str]]]:\n    \"\"\"\n    Retrieves the inherited outputs for a given entity, grouped by data entity IRI.\n\n    Args:\n        input_kg (Graph): The input knowledge graph.\n        namespace_prefix (str): The namespace prefix for the entity.\n        entity_iri (str): The IRI of the entity.\n\n    Returns:\n        List[Tuple[str, List[str]]]: A list of tuples, where each tuple contains a property name and a list of input values.\n    \"\"\"\n    property_list = list(query_inherited_outputs(input_kg, namespace_prefix, entity_iri))\n    property_list = sorted(property_list, key=lambda elem: elem[0])  # prepare for grouping\n    property_list = [\n        (key, [(elem[1], elem[2]) for elem in group])\n        for key, group in itertools.groupby(property_list, key=lambda elem: elem[0])\n    ]\n\n    return property_list\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.get_method_grouped_params","title":"<code>get_method_grouped_params(method_iri, namespace_prefix, kg, inherited=False)</code>","text":"<p>Retrieves the (inherited) parameters for a given method, grouped by property IRI.</p> <p>Parameters:</p> Name Type Description Default <code>method_iri</code> <code>str</code> <p>The IRI of the method.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix.</p> required <code>kg</code> <code>Graph</code> <p>The knowledge graph.</p> required <p>Returns:</p> Type Description <code>List[Tuple[str, List[str]]]</code> <p>List[Tuple[str, List[str]]]: A list of tuples, where each tuple contains a parameter name and a list of its values.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def get_method_grouped_params(\n    method_iri: str, namespace_prefix: str, kg: Graph, inherited: bool = False\n) -&gt; List[Tuple[str, List[str]]]:\n    \"\"\"\n    Retrieves the (inherited) parameters for a given method, grouped by property IRI.\n\n    Args:\n        method_iri (str): The IRI of the method.\n        namespace_prefix (str): The namespace prefix.\n        kg (Graph): The knowledge graph.\n\n    Returns:\n        List[Tuple[str, List[str]]]: A list of tuples, where each tuple contains a parameter name and a list of its values.\n    \"\"\"\n    property_list = list(query_method_params_plus_inherited(method_iri, namespace_prefix, kg, inherited))\n    property_list = sorted(property_list, key=lambda elem: elem[0])  # prepare for grouping\n    property_list = [\n        (key, [pair[1] for pair in group]) for key, group in itertools.groupby(property_list, lambda elem: elem[0])\n    ]\n\n    return property_list\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.get_module_hierarchy_chain","title":"<code>get_module_hierarchy_chain(kg, namespace_prefix, method_iri)</code>","text":"<p>Retrieves the hierarchy chain of the modules starting from the module connected to the given method IRI.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix of the module.</p> required <code>method_iri</code> <code>str</code> <p>The IRI of the method.</p> required <p>Returns:</p> Name Type Description <code>List</code> <code>List</code> <p>The hierarchy chain of the module, represented as a list of module names.</p> <p>Raises:</p> Type Description <code>NoResultsError</code> <p>If the method doesn't have a subclass that is a subclass of {namespace_prefix}:Module.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def get_module_hierarchy_chain(\n    kg: Graph,\n    namespace_prefix: str,\n    method_iri: str,\n) -&gt; List:\n    \"\"\"\n    Retrieves the hierarchy chain of the modules starting from the module connected to the given method IRI.\n\n    Args:\n        kg (Graph): The knowledge graph.\n        namespace_prefix (str): The namespace prefix of the module.\n        method_iri (str): The IRI of the method.\n\n    Returns:\n        List: The hierarchy chain of the module, represented as a list of module names.\n\n    Raises:\n        NoResultsError: If the method doesn't have a subclass that is a subclass of {namespace_prefix}:Module.\n    \"\"\"\n\n    query_result = get_first_query_result_if_exists(\n        query_module_iri_by_method_iri,\n        kg,\n        method_iri,\n        namespace_prefix,\n    )\n\n    if query_result is None:\n        raise NoResultsError(\n            f\"Method with IRI {method_iri} doesn't have a subclass that is subclass of {namespace_prefix}:Module\"\n        )\n\n    module_iri = str(query_result[0])\n    module_chain_query_res = list(query_hierarchy_chain(kg, module_iri))\n    module_chain_query_res = [str(x[0]) for x in module_chain_query_res]\n    module_chain_iris = [module_iri] + module_chain_query_res[:-1]\n    module_chain_names = [iri.split(\"#\")[-1] for iri in module_chain_iris]\n\n    return module_chain_names\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.query_data_entity_reference_iri","title":"<code>query_data_entity_reference_iri(kg, namespace_prefix, entity_iri)</code>","text":"<p>Queries the knowledge graph for the reference IRIs associated with a given entity.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the query.</p> required <code>entity_iri</code> <code>str</code> <p>The IRI of the entity to query.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_data_entity_reference_iri(kg: Graph, namespace_prefix, entity_iri: str) -&gt; query.Result:\n    \"\"\"\n    Queries the knowledge graph for the reference IRIs associated with a given entity.\n\n    Args:\n        kg (Graph): The knowledge graph to query.\n        namespace_prefix (str): The namespace prefix used in the query.\n        entity_iri (str): The IRI of the entity to query.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return kg.query(\n        f\"SELECT ?r WHERE {{ ?entity {namespace_prefix}:hasReference ?r . }}\",\n        initBindings={\n            \"entity\": URIRef(entity_iri),\n        },\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.query_hierarchy_chain","title":"<code>query_hierarchy_chain(kg, entity_iri)</code>","text":"<p>Queries the class hierarchy chain of a given entity in a knowledge graph.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <code>entity_iri</code> <code>str</code> <p>The IRI of the entity.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_hierarchy_chain(kg: Graph, entity_iri: str) -&gt; query.Result:\n    \"\"\"\n    Queries the class hierarchy chain of a given entity in a knowledge graph.\n\n    Args:\n        kg (Graph): The knowledge graph to query.\n        entity_iri (str): The IRI of the entity.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return kg.query(\n        f\"SELECT ?m2 WHERE {{ ?m1 rdfs:subClassOf+ ?m2 . }}\",\n        initBindings={\n            \"m1\": URIRef(entity_iri),\n        },\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.query_inherited_inputs","title":"<code>query_inherited_inputs(input_kg, namespace_prefix, entity_iri)</code>","text":"<p>Queries the input knowledge graph to find (inherited) inputs, their structure and the properties that connect them to the given entity.</p> <p>Parameters:</p> Name Type Description Default <code>input_kg</code> <code>Graph</code> <p>The input knowledge graph.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the SPARQL query.</p> required <code>entity_iri</code> <code>str</code> <p>The IRI of the entity for which inherited inputs are to be found.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the SPARQL query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_inherited_inputs(input_kg: Graph, namespace_prefix: str, entity_iri: str) -&gt; query.Result:\n    \"\"\"\n    Queries the input knowledge graph to find (inherited) inputs, their structure and the properties that connect them to the given entity.\n\n    Args:\n        input_kg (Graph): The input knowledge graph.\n        namespace_prefix (str): The namespace prefix used in the SPARQL query.\n        entity_iri (str): The IRI of the entity for which inherited inputs are to be found.\n\n    Returns:\n        query.Result: The result of the SPARQL query.\n\n    \"\"\"\n    return input_kg.query(\n        \"\\nSELECT ?m ?s ?p WHERE {?entity_iri rdfs:subClassOf* ?parent . \"\n        \"?p rdfs:domain ?parent .\"\n        \"?p rdfs:range ?m .\"\n        \"?p rdfs:subPropertyOf+ \" + namespace_prefix + \":hasInput .\"\n        \"OPTIONAL { ?m rdfs:subClassOf ?s . }\"\n        \"OPTIONAL { ?s rdfs:subClassOf+ \" + namespace_prefix + \":DataStructure . }\"\n        \"FILTER(?s != \" + namespace_prefix + \":DataEntity) . }\",\n        initBindings={\"entity_iri\": URIRef(entity_iri)},\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.query_inherited_outputs","title":"<code>query_inherited_outputs(input_kg, namespace_prefix, entity_iri)</code>","text":"<p>Queries the input knowledge graph to find (inherited) outputs, their structure and the properties that connect them to the given entity.</p> <p>Parameters:</p> Name Type Description Default <code>input_kg</code> <code>Graph</code> <p>The input knowledge graph.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the SPARQL query.</p> required <code>entity_iri</code> <code>str</code> <p>The IRI of the entity for which inherited inputs are to be found.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the SPARQL query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_inherited_outputs(input_kg: Graph, namespace_prefix: str, entity_iri: str) -&gt; query.Result:\n    \"\"\"\n    Queries the input knowledge graph to find (inherited) outputs, their structure and the properties that connect them to the given entity.\n\n    Args:\n        input_kg (Graph): The input knowledge graph.\n        namespace_prefix (str): The namespace prefix used in the SPARQL query.\n        entity_iri (str): The IRI of the entity for which inherited inputs are to be found.\n\n    Returns:\n        query.Result: The result of the SPARQL query.\n\n    \"\"\"\n    return input_kg.query(\n        \"\\nSELECT ?m ?s ?p WHERE {?entity_iri rdfs:subClassOf* ?parent . \"\n        \"?p rdfs:domain ?parent .\"\n        \"?p rdfs:range ?m .\"\n        \"?p rdfs:subPropertyOf+ \" + namespace_prefix + \":hasOutput .\"\n        \"?m rdfs:subClassOf ?s .\"\n        \"?s rdfs:subClassOf+ \" + namespace_prefix + \":DataStructure . \"\n        \"FILTER(?s != \" + namespace_prefix + \":DataEntity) . }\",\n        initBindings={\"entity_iri\": URIRef(entity_iri)},\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.query_input_triples","title":"<code>query_input_triples(kg, namespace_prefix, entity_iri)</code>","text":"<p>Queries the triples that connect the given entity with its inputs.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the query.</p> required <code>entity_iri</code> <code>str</code> <p>The IRI of the entity to query input triples for.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_input_triples(kg: Graph, namespace_prefix: str, entity_iri: str) -&gt; query.Result:\n    \"\"\"\n    Queries the triples that connect the given entity with its inputs.\n\n    Args:\n        kg (Graph): The knowledge graph to query.\n        namespace_prefix (str): The namespace prefix used in the query.\n        entity_iri (str): The IRI of the entity to query input triples for.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return kg.query(\n        f\"\"\"\n        SELECT DISTINCT ?s ?p ?o\n        WHERE {{\n            {{ ?s ?p ?o . FILTER(?p = {namespace_prefix}:hasInput) }}\n            UNION\n            {{ ?s ?p ?o . ?p rdfs:subPropertyOf* {namespace_prefix}:hasInput . }}\n        }}\n        \"\"\",\n        initBindings={\"s\": URIRef(entity_iri)},\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.query_instance_parent_iri","title":"<code>query_instance_parent_iri(kg, entity_iri, upper_class_uri_ref, negation_of_inheritance=False)</code>","text":"<p>Queries the knowledge graph to find the types of a given entity, that are subclasses of a given upper class.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <code>entity_iri</code> <code>str</code> <p>The IRI of the entity.</p> required <code>upper_class_uri_ref</code> <code>URIRef</code> <p>The URI reference of the upper class.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_instance_parent_iri(\n    kg: Graph, entity_iri: str, upper_class_uri_ref: URIRef, negation_of_inheritance: bool = False\n) -&gt; query.Result:\n    \"\"\"\n    Queries the knowledge graph to find the types of a given entity, that are subclasses of a given upper class.\n\n    Args:\n        kg (Graph): The knowledge graph to query.\n        entity_iri (str): The IRI of the entity.\n        upper_class_uri_ref (URIRef): The URI reference of the upper class.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    query_string = f\"SELECT ?t WHERE {{ ?entity rdf:type ?t .\"\n\n    if negation_of_inheritance:\n        query_string += f\"FILTER NOT EXISTS {{ ?t rdfs:subClassOf* ?upper_class . }} }}\"\n    else:\n        query_string += f\"?t rdfs:subClassOf* ?upper_class . }}\"\n\n    return kg.query(\n        query_string,\n        initBindings={\n            \"entity\": URIRef(entity_iri),\n            \"upper_class\": upper_class_uri_ref,\n        },\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.query_linked_task_and_property","title":"<code>query_linked_task_and_property(kg, namespace_prefix, method_iri)</code>","text":"<p>Queries the linked task and linking property based on the given method IRI.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The RDF graph to query.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix for the AtomicTask.</p> required <code>method_iri</code> <code>str</code> <p>The IRI of the method.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_linked_task_and_property(kg: Graph, namespace_prefix, method_iri: str) -&gt; query.Result:\n    \"\"\"\n    Queries the linked task and linking property based on the given method IRI.\n\n    Args:\n        kg (Graph): The RDF graph to query.\n        namespace_prefix (str): The namespace prefix for the AtomicTask.\n        method_iri (str): The IRI of the method.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return kg.query(\n        f\"SELECT ?task WHERE {{ ?task ?m_property ?m .\"\n        f\"                      ?task rdfs:subPropertyOf* {namespace_prefix}:AtomicTask .}}\",\n        initBindings={\"m\": URIRef(method_iri)},\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.query_method_iri_by_task_iri","title":"<code>query_method_iri_by_task_iri(kg, namespace_prefix, task_iri)</code>","text":"<p>Queries the method IRI associated with a given task IRI.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The RDF graph to query.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix for the method property.</p> required <code>task_iri</code> <code>str</code> <p>The IRI of the task.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_method_iri_by_task_iri(kg: Graph, namespace_prefix, task_iri: str) -&gt; query.Result:\n    \"\"\"\n    Queries the method IRI associated with a given task IRI.\n\n    Args:\n        kg (Graph): The RDF graph to query.\n        namespace_prefix (str): The namespace prefix for the method property.\n        task_iri (str): The IRI of the task.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return kg.query(\n        f\"SELECT ?m WHERE {{ ?task ?m_property ?m .\"\n        f\"                   ?m_property rdfs:subPropertyOf* {namespace_prefix}:hasMethod .}}\",\n        initBindings={\"task\": URIRef(task_iri)},\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.query_method_params","title":"<code>query_method_params(method_iri, namespace_prefix, kg)</code>","text":"<p>Queries the parameters and their ranges for a given method IRI.</p> <p>Parameters:</p> Name Type Description Default <code>method_iri</code> <code>str</code> <p>The IRI (Internationalized Resource Identifier) of the method.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the knowledge graph.</p> required <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query, containing the parameters of the method.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_method_params(method_iri: str, namespace_prefix: str, kg: Graph) -&gt; query.Result:\n    \"\"\"\n    Queries the parameters and their ranges for a given method IRI.\n\n    Args:\n        method_iri (str): The IRI (Internationalized Resource Identifier) of the method.\n        namespace_prefix (str): The namespace prefix used in the knowledge graph.\n        kg (Graph): The knowledge graph to query.\n\n    Returns:\n        query.Result: The result of the query, containing the parameters of the method.\n    \"\"\"\n    return kg.query(\n        f\"\\nSELECT ?p ?r WHERE {{?p rdfs:domain ?task_iri . \"\n        f\"?p rdfs:range ?r . \"\n        f\"?p rdfs:subPropertyOf {namespace_prefix}:hasParameter . }}\",\n        initBindings={\"task_iri\": URIRef(method_iri)},\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.query_method_params_plus_inherited","title":"<code>query_method_params_plus_inherited(method_iri, namespace_prefix, kg, inherited=False)</code>","text":"<p>Queries the parameters and their ranges for a given method IRI, including inherited parameters.</p> <p>Parameters:</p> Name Type Description Default <code>method_iri</code> <code>str</code> <p>The IRI of the method.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix for the <code>hasParameter</code> property.</p> required <code>kg</code> <code>Graph</code> <p>The RDF graph to query.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_method_params_plus_inherited(\n    method_iri: str, namespace_prefix: str, kg: Graph, inherited=False\n) -&gt; query.Result:\n    \"\"\"\n    Queries the parameters and their ranges for a given method IRI, including inherited parameters.\n\n    Args:\n        method_iri (str): The IRI of the method.\n        namespace_prefix (str): The namespace prefix for the `hasParameter` property.\n        kg (Graph): The RDF graph to query.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    if inherited:\n        return kg.query(\n            f\"\\nSELECT ?p ?r WHERE {{?p rdfs:domain ?domain . \"\n            f\"?method_iri rdfs:subClassOf* ?domain . \"\n            f\"?p rdfs:range ?r . \"\n            f\"?p rdfs:subPropertyOf {namespace_prefix}:hasParameter . }}\",\n            initBindings={\"method_iri\": URIRef(method_iri)},\n        )\n\n    return kg.query(\n        f\"\\nSELECT ?p ?r WHERE {{?p rdfs:domain ?method_iri . \"\n        f\"?p rdfs:range ?r . \"\n        f\"?p rdfs:subPropertyOf {namespace_prefix}:hasParameter . }}\",\n        initBindings={\"method_iri\": URIRef(method_iri)},\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.query_method_properties_and_methods","title":"<code>query_method_properties_and_methods(input_kg, namespace_prefix, entity_parent_iri)</code>","text":"<p>Queries the input knowledge graph for methods and the properties that connect them to the given entity.</p> <p>Parameters:</p> Name Type Description Default <code>input_kg</code> <code>Graph</code> <p>The input knowledge graph to query.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the query.</p> required <code>entity_parent_iri</code> <code>str</code> <p>The IRI of the parent entity.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_method_properties_and_methods(input_kg: Graph, namespace_prefix: str, entity_parent_iri: str) -&gt; query.Result:\n    \"\"\"\n    Queries the input knowledge graph for methods and the properties that connect them to the given entity.\n\n    Args:\n        input_kg (Graph): The input knowledge graph to query.\n        namespace_prefix (str): The namespace prefix used in the query.\n        entity_parent_iri (str): The IRI of the parent entity.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return input_kg.query(\n        \"\\nSELECT ?p ?m WHERE {?p rdfs:domain ?entity_iri . \"\n        \"?p rdfs:range ?m . \"\n        \"?m rdfs:subClassOf \" + namespace_prefix + \":AtomicMethod . }\",\n        initBindings={\"entity_iri\": URIRef(entity_parent_iri)},\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.query_module_iri_by_method_iri","title":"<code>query_module_iri_by_method_iri(kg, method_iri, namespace_prefix)</code>","text":"<p>Queries the knowledge graph to retrieve the module IRI associated with a given method IRI.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The Knowledge Graph to query.</p> required <code>method_iri</code> <code>str</code> <p>The IRI of the method.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the query.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_module_iri_by_method_iri(\n    kg: Graph,\n    method_iri: str,\n    namespace_prefix: str,\n) -&gt; query.Result:\n    \"\"\"\n    Queries the knowledge graph to retrieve the module IRI associated with a given method IRI.\n\n    Args:\n        kg (Graph): The Knowledge Graph to query.\n        method_iri (str): The IRI of the method.\n        namespace_prefix (str): The namespace prefix used in the query.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return kg.query(\n        f\"SELECT ?module WHERE {{ ?method rdfs:subClassOf ?module . \"\n        f\"                        ?module rdfs:subClassOf+ {namespace_prefix}:Module . \"\n        f\"                        FILTER NOT EXISTS {{ ?module rdfs:subClassOf+ {namespace_prefix}:Method . }} . }}\",\n        initBindings={\"method\": URIRef(method_iri)},\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.query_output_triples","title":"<code>query_output_triples(kg, namespace_prefix, entity_iri)</code>","text":"<p>Queries the triples that connect the given entity with its outputs.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the query.</p> required <code>entity_iri</code> <code>str</code> <p>The IRI of the entity to query input triples for.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_output_triples(kg: Graph, namespace_prefix: str, entity_iri: str) -&gt; query.Result:\n    \"\"\"\n    Queries the triples that connect the given entity with its outputs.\n\n    Args:\n        kg (Graph): The knowledge graph to query.\n        namespace_prefix (str): The namespace prefix used in the query.\n        entity_iri (str): The IRI of the entity to query input triples for.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return kg.query(\n        f\"\"\"\n        SELECT DISTINCT ?s ?p ?o\n        WHERE {{\n            {{ ?s ?p ?o . FILTER(?p = {namespace_prefix}:hasOutput) }}\n            UNION\n            {{ ?s ?p ?o . ?p rdfs:subPropertyOf* {namespace_prefix}:hasOutput . }}\n        }}\n        \"\"\",\n        initBindings={\"s\": URIRef(entity_iri)},\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.query_parameters_triples","title":"<code>query_parameters_triples(kg, namespace_prefix, entity_iri)</code>","text":"<p>Queries the triples that connect the given entity with its parameters.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the query.</p> required <code>entity_iri</code> <code>str</code> <p>The IRI of the entity to query input triples for.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_parameters_triples(kg: Graph, namespace_prefix: str, entity_iri: str) -&gt; query.Result:\n    \"\"\"\n    Queries the triples that connect the given entity with its parameters.\n\n    Args:\n        kg (Graph): The knowledge graph to query.\n        namespace_prefix (str): The namespace prefix used in the query.\n        entity_iri (str): The IRI of the entity to query input triples for.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return kg.query(\n        f\"\"\"\n        SELECT ?s ?p ?o\n        WHERE {{\n            {{ ?s ?p ?o . ?p rdfs:subPropertyOf* {namespace_prefix}:hasParameter . }}\n        }}\n        \"\"\",\n        initBindings={\"s\": URIRef(entity_iri)},\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.query_parent_classes","title":"<code>query_parent_classes(kg, entity_iri)</code>","text":"<p>Queries the knowledge graph to retrieve the parent classes of a given entity.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <code>entity_iri</code> <code>str</code> <p>The IRI of the entity.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_parent_classes(kg: Graph, entity_iri: str) -&gt; query.Result:\n    \"\"\"\n    Queries the knowledge graph to retrieve the parent classes of a given entity.\n\n    Args:\n        kg (Graph): The knowledge graph to query.\n        entity_iri (str): The IRI of the entity.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return kg.query(\n        f\"SELECT ?c WHERE {{ ?entity rdfs:subClassOf ?c . }}\",\n        initBindings={\"entity\": URIRef(entity_iri)},\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.query_pipeline_info","title":"<code>query_pipeline_info(kg, namespace_prefix)</code>","text":"<p>Queries the knowledge graph for pipeline information.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the query.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_pipeline_info(kg: Graph, namespace_prefix: str) -&gt; query.Result:\n    \"\"\"\n    Queries the knowledge graph for pipeline information.\n\n    Args:\n        kg (Graph): The knowledge graph to query.\n        namespace_prefix (str): The namespace prefix used in the query.\n\n    Returns:\n        query.Result: The result of the query.\n\n    \"\"\"\n    return kg.query(\n        f\"\\nSELECT ?p ?i ?o ?t WHERE {{?p rdf:type {namespace_prefix}:Pipeline ;\"\n        f\"                          {namespace_prefix}:hasInputDataPath ?i ;\"\n        f\"                          {namespace_prefix}:hasPlotsOutputDir ?o ;\"\n        f\"                          {namespace_prefix}:hasStartTask ?t . }}\"\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.query_subclasses_of","title":"<code>query_subclasses_of(class_iri, kg)</code>","text":"<p>Queries the knowledge graph to retrieve the subclasses of a given class.</p> <p>Parameters:</p> Name Type Description Default <code>class_iri</code> <code>str</code> <p>The IRI of the class.</p> required <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_subclasses_of(class_iri: str, kg: Graph) -&gt; query.Result:\n    \"\"\"\n    Queries the knowledge graph to retrieve the subclasses of a given class.\n\n    Args:\n        class_iri (str): The IRI of the class.\n        kg (Graph): The knowledge graph to query.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return kg.query(\n        \"\\nSELECT ?t WHERE {?t rdfs:subClassOf ?class_iri . }\",\n        initBindings={\"class_iri\": class_iri},\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.query_top_level_task_iri","title":"<code>query_top_level_task_iri(kg, task_iri, namespace_prefix)</code>","text":"<p>Queries the knowledge graph to find the top-level task for a given task.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <code>task_iri</code> <code>str</code> <p>The IRI of the task.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the query.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_top_level_task_iri(kg: Graph, task_iri: str, namespace_prefix: str) -&gt; query.Result:\n    \"\"\"\n    Queries the knowledge graph to find the top-level task for a given task.\n\n    Args:\n        kg (Graph): The knowledge graph to query.\n        task_iri (str): The IRI of the task.\n        namespace_prefix (str): The namespace prefix used in the query.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return kg.query(\n        f\"SELECT ?t2 WHERE {{ ?t1 rdfs:subClassOf* ?t2 .\"\n        f\"                    ?t2 rdfs:subClassOf {namespace_prefix}:Task . \"\n        f\"                    FILTER(?t2 != {namespace_prefix}:AtomicTask) . }}\",\n        initBindings={\n            \"t1\": URIRef(task_iri),\n        },\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg_actors/","title":"exe_kg_actors","text":""},{"location":"reference/classes/exe_kg_base/","title":"exe_kg_base","text":""},{"location":"reference/classes/exe_kg_base/#exe_kg_lib.classes.exe_kg_base.ExeKGBase","title":"<code>ExeKGBase</code>","text":"Source code in <code>exe_kg_lib/classes/exe_kg_base.py</code> <pre><code>class ExeKGBase:\n    def __init__(self):\n        \"\"\"\n\n        Args:\n            input_exe_kg_path: path of KG to be executed\n                               acts as switch for KG execution mode (if filled, mode is on)\n        \"\"\"\n        self.top_level_schema = KGSchema.from_schema_info(KG_SCHEMAS[\"Data Science\"])  # top-level KG schema\n        self.bottom_level_schemata = {}\n        for schema_name, schema_info in KG_SCHEMAS.items():  # search for used bottom-level schema\n            if (\n                schema_name == \"Data Science\"  # or schema_name == \"Visualization\"\n            ):  # skip top-level KG schema and Visualization schema that is always used\n                continue\n\n            self.bottom_level_schemata[schema_info[\"namespace_prefix\"]] = KGSchema.from_schema_info(schema_info)\n\n        # top-level KG schema entities\n        self.atomic_task = Entity(self.top_level_schema.namespace.AtomicTask)\n        self.task = Entity(self.top_level_schema.namespace.Task)\n        self.atomic_method = Entity(self.top_level_schema.namespace.AtomicMethod)\n        self.data_entity = Entity(self.top_level_schema.namespace.DataEntity)\n        self.pipeline = Entity(self.top_level_schema.namespace.Pipeline)\n        self.data = Entity(self.top_level_schema.namespace.Data)\n        self.data_semantics = Entity(self.top_level_schema.namespace.DataSemantics)\n        self.data_structure = Entity(self.top_level_schema.namespace.DataStructure)\n\n        # self.input_kg: KG eventually filled with 3 KG schemas and the input executable KG in case of KG execution\n        self.input_kg = Graph(bind_namespaces=\"rdflib\")\n\n        # self.shacl_shapes_s: string containing SHACL shapes of all KG schemas\n        self.shacl_shapes_s = self.top_level_schema.shacl_shapes_s\n\n        # bottom_level_schemata_kgs = [kg_schema.kg for kg_schema in self.bottom_level_schemata.values()]\n        bottom_level_schemata_kgs = []\n        for kg_schema in self.bottom_level_schemata.values():\n            bottom_level_schemata_kgs.append(kg_schema.kg)\n            bottom_level_schemata_kgs.append(kg_schema.generated_schema_kg)\n            self.shacl_shapes_s += kg_schema.shacl_shapes_s\n\n        self.input_kg += self.top_level_schema.kg  # + self.visu_schema.kg  # combine all KG schemas in input KG\n\n        for bottom_level_schema_kg in bottom_level_schemata_kgs:\n            self.input_kg += bottom_level_schema_kg\n\n        self.exe_kg = Graph(bind_namespaces=\"rdflib\")  # variable to store the constructed ExeKG\n        self.pipeline_instance = None  # variable to store pipeline's metadata\n        self.pipeline_serializable = Pipeline()  # simplified version of pipeline for serialization purposes\n\n        self._bind_used_namespaces([self.input_kg, self.exe_kg])\n\n        # below variables are filled in self._parse_kgs()\n        self.task_type_dict = {}  # dict for uniquely naming each new pipeline task\n        self.method_type_dict = {}  # dict for uniquely naming each new pipeline method\n        self.atomic_task_list = []  # list for storing the available sub-classes of ds:AtomicTask\n        self.atomic_method_list = []  # list for storing the available sub-classes of ds:AtomicMethod\n        self.data_type_list = []  # list for storing the available sub-classes of ds:DataEntity\n        self.data_semantics_list = []  # list for storing the available sub-classes of ds:DataSemantics\n        self.data_structure_list = []  # list for storing the available sub-classes of ds:DataStructure\n\n        self.existing_data_entity_list = (\n            []\n        )  # contains existing data entities that are output entities of previous tasks during KG construction\n        self.last_created_task = (\n            None  # last created pipeline task, for connecting consecutive pipeline tasks during KG construction\n        )\n        self.canvas_task_created = False  # indicates if canvas task was created during KG construction, and used for hiding the other Visualization tasks in CLI\n\n        self._parse_kgs()\n\n    def _bind_used_namespaces(self, kgs: List[Graph]):\n        \"\"\"\n        Binds top-level and bottom-level KG schemas' namespaces with their prefixes\n        Adds these bindings to the Graphs of kgs list\n\n        Args:\n            kgs: list of Graph objects to which the namespace bindings are added\n        \"\"\"\n        for kg in kgs:\n            kg.bind(self.top_level_schema.namespace_prefix, self.top_level_schema.namespace)\n            for bottom_level_kg_schema in self.bottom_level_schemata.values():\n                kg.bind(\n                    bottom_level_kg_schema.namespace_prefix,\n                    bottom_level_kg_schema.namespace,\n                )\n\n    def _parse_kgs(self) -&gt; None:\n        \"\"\"\n        Fills lists with subclasses of top-level KG schema classes and initializes dicts used for unique naming\n        \"\"\"\n        atomic_task_subclasses = query_subclasses_of(self.atomic_task.iri, self.input_kg)\n        for t in list(atomic_task_subclasses):\n            task = Entity(t[0], self.atomic_task)\n            self.atomic_task_list.append(task)\n            self.task_type_dict[task.name] = 1\n\n        atomic_method_subclasses = query_subclasses_of(self.atomic_method.iri, self.input_kg)\n        for m in list(atomic_method_subclasses):\n            method = Entity(m[0], self.atomic_method)\n            self.atomic_method_list.append(method)\n            self.method_type_dict[method.name] = 1\n\n        data_type_subclasses = query_subclasses_of(self.data_entity.iri, self.input_kg)\n        for d in list(data_type_subclasses):\n            data_type = Entity(d[0], self.data_entity)\n            self.data_type_list.append(data_type)\n\n        data_semantics_subclasses = query_subclasses_of(self.data_semantics.iri, self.top_level_schema.kg)\n        for d in list(data_semantics_subclasses):\n            if d[0] == self.data_entity.iri:\n                continue\n            data_semantics = Entity(d[0], self.data_semantics)\n            self.data_semantics_list.append(data_semantics)\n\n        data_structure_subclasses = query_subclasses_of(self.data_structure.iri, self.top_level_schema.kg)\n        for d in list(data_structure_subclasses):\n            if d[0] == self.data_entity.iri:\n                continue\n            data_structure = Entity(d[0], self.data_structure)\n            self.data_structure_list.append(data_structure)\n</code></pre>"},{"location":"reference/classes/exe_kg_base/#exe_kg_lib.classes.exe_kg_base.ExeKGBase.__init__","title":"<code>__init__()</code>","text":"<p>Parameters:</p> Name Type Description Default <code>input_exe_kg_path</code> <p>path of KG to be executed                acts as switch for KG execution mode (if filled, mode is on)</p> required Source code in <code>exe_kg_lib/classes/exe_kg_base.py</code> <pre><code>def __init__(self):\n    \"\"\"\n\n    Args:\n        input_exe_kg_path: path of KG to be executed\n                           acts as switch for KG execution mode (if filled, mode is on)\n    \"\"\"\n    self.top_level_schema = KGSchema.from_schema_info(KG_SCHEMAS[\"Data Science\"])  # top-level KG schema\n    self.bottom_level_schemata = {}\n    for schema_name, schema_info in KG_SCHEMAS.items():  # search for used bottom-level schema\n        if (\n            schema_name == \"Data Science\"  # or schema_name == \"Visualization\"\n        ):  # skip top-level KG schema and Visualization schema that is always used\n            continue\n\n        self.bottom_level_schemata[schema_info[\"namespace_prefix\"]] = KGSchema.from_schema_info(schema_info)\n\n    # top-level KG schema entities\n    self.atomic_task = Entity(self.top_level_schema.namespace.AtomicTask)\n    self.task = Entity(self.top_level_schema.namespace.Task)\n    self.atomic_method = Entity(self.top_level_schema.namespace.AtomicMethod)\n    self.data_entity = Entity(self.top_level_schema.namespace.DataEntity)\n    self.pipeline = Entity(self.top_level_schema.namespace.Pipeline)\n    self.data = Entity(self.top_level_schema.namespace.Data)\n    self.data_semantics = Entity(self.top_level_schema.namespace.DataSemantics)\n    self.data_structure = Entity(self.top_level_schema.namespace.DataStructure)\n\n    # self.input_kg: KG eventually filled with 3 KG schemas and the input executable KG in case of KG execution\n    self.input_kg = Graph(bind_namespaces=\"rdflib\")\n\n    # self.shacl_shapes_s: string containing SHACL shapes of all KG schemas\n    self.shacl_shapes_s = self.top_level_schema.shacl_shapes_s\n\n    # bottom_level_schemata_kgs = [kg_schema.kg for kg_schema in self.bottom_level_schemata.values()]\n    bottom_level_schemata_kgs = []\n    for kg_schema in self.bottom_level_schemata.values():\n        bottom_level_schemata_kgs.append(kg_schema.kg)\n        bottom_level_schemata_kgs.append(kg_schema.generated_schema_kg)\n        self.shacl_shapes_s += kg_schema.shacl_shapes_s\n\n    self.input_kg += self.top_level_schema.kg  # + self.visu_schema.kg  # combine all KG schemas in input KG\n\n    for bottom_level_schema_kg in bottom_level_schemata_kgs:\n        self.input_kg += bottom_level_schema_kg\n\n    self.exe_kg = Graph(bind_namespaces=\"rdflib\")  # variable to store the constructed ExeKG\n    self.pipeline_instance = None  # variable to store pipeline's metadata\n    self.pipeline_serializable = Pipeline()  # simplified version of pipeline for serialization purposes\n\n    self._bind_used_namespaces([self.input_kg, self.exe_kg])\n\n    # below variables are filled in self._parse_kgs()\n    self.task_type_dict = {}  # dict for uniquely naming each new pipeline task\n    self.method_type_dict = {}  # dict for uniquely naming each new pipeline method\n    self.atomic_task_list = []  # list for storing the available sub-classes of ds:AtomicTask\n    self.atomic_method_list = []  # list for storing the available sub-classes of ds:AtomicMethod\n    self.data_type_list = []  # list for storing the available sub-classes of ds:DataEntity\n    self.data_semantics_list = []  # list for storing the available sub-classes of ds:DataSemantics\n    self.data_structure_list = []  # list for storing the available sub-classes of ds:DataStructure\n\n    self.existing_data_entity_list = (\n        []\n    )  # contains existing data entities that are output entities of previous tasks during KG construction\n    self.last_created_task = (\n        None  # last created pipeline task, for connecting consecutive pipeline tasks during KG construction\n    )\n    self.canvas_task_created = False  # indicates if canvas task was created during KG construction, and used for hiding the other Visualization tasks in CLI\n\n    self._parse_kgs()\n</code></pre>"},{"location":"reference/classes/kg_schema/","title":"kg_schema","text":""},{"location":"reference/classes/kg_schema/#exe_kg_lib.classes.kg_schema.KGSchema","title":"<code>KGSchema</code>","text":"<p>Stores a Graph object and some metadata corresponding to a KG schema</p> Source code in <code>exe_kg_lib/classes/kg_schema.py</code> <pre><code>class KGSchema:\n    \"\"\"\n    Stores a Graph object and some metadata corresponding to a KG schema\n    \"\"\"\n\n    def __init__(\n        self,\n        path: str,\n        shacl_shapes_path: str,\n        generated_schema_path: str,\n        generated_shacl_shapes_path: str,\n        namespace: str,\n        namespace_prefix: str,\n    ):\n        self.path = path  # path of the main KG schema definition, can be local or remote\n        self.generated_schema_path = (\n            generated_schema_path  # path of file containing generated schema for this schema, can be local or remote\n        )\n        self.namespace = Namespace(namespace)\n        self.namespace_prefix = namespace_prefix\n\n        self.kg = Graph(bind_namespaces=\"rdflib\")\n        self.kg.parse(self.path, format=\"n3\")\n\n        self.generated_schema_kg = Graph(bind_namespaces=\"rdflib\")\n        if self.generated_schema_path:\n            self.generated_schema_kg.parse(self.generated_schema_path, format=\"n3\")\n\n        # shacl\n        self.shacl_shapes_path = shacl_shapes_path  # path of file containing main shacl shapes, can be local or remote\n        self.generated_shacl_shapes_path = (\n            generated_shacl_shapes_path  # path of file containing generated shacl shapes, can be local or remote\n        )\n\n        self.shacl_shapes_s = self.read_shacl_shapes(self.shacl_shapes_path)  # shacl shapes are stored as string\n\n        if self.generated_shacl_shapes_path:\n            self.shacl_shapes_s += self.read_shacl_shapes(self.generated_shacl_shapes_path)\n\n    @classmethod\n    def from_schema_info(cls, schema_info: Dict[str, str]):\n        return cls(\n            schema_info[\"path\"],\n            schema_info[\"shacl_shapes_path\"],\n            schema_info[\"generated_schema_path\"],\n            schema_info[\"generated_shacl_shapes_path\"],\n            schema_info[\"namespace\"],\n            schema_info[\"namespace_prefix\"],\n        )\n\n    @staticmethod\n    def read_shacl_shapes(path: str):\n        if path.startswith(\"http\"):\n            return requests.get(path).text\n        else:\n            with open(path) as f:\n                return f.read()\n</code></pre>"},{"location":"reference/classes/method/","title":"method","text":""},{"location":"reference/classes/method/#exe_kg_lib.classes.method.Method","title":"<code>Method</code>","text":"<p>               Bases: <code>Entity</code></p> <p>Abstraction of owl:class ds:AtomicMethod.</p> <p>\u2757 Important for contributors: See Section \"Naming conventions\" in README.md of \"classes.tasks\" package before extending the code's functionality.</p> Source code in <code>exe_kg_lib/classes/method.py</code> <pre><code>class Method(Entity):\n    \"\"\"\n    Abstraction of owl:class ds:AtomicMethod.\n\n    \u2757 Important for contributors: See Section \"Naming conventions\" in README.md of \"classes.tasks\" package before extending the code's functionality.\n    \"\"\"\n\n    def __init__(\n        self,\n        iri: str,\n        parent_entity: Entity,\n        module_chain: List[str] = None,\n        params_dict: Dict[str, Union[str, int, float]] = None,\n        inherited_params_dict: Dict[str, Union[str, int, float]] = None,\n    ):\n        super().__init__(iri, parent_entity)\n\n        if module_chain is None:\n            module_chain = []\n        self.module_chain = module_chain  # e.g. ['sklearn','model_selection', 'StratifiedShuffleSplit'] Used for resolving the Python module that contains the method to be executed\n\n        if params_dict is None:\n            params_dict = {}\n        self.params_dict = params_dict  # used for storing method parameters during KG execution\n\n        if inherited_params_dict is None:\n            inherited_params_dict = {}\n        self.inherited_params_dict = {}  # used for storing inherited method parameters during KG execution\n\n    def resolve_module(self, module_name_to_snakecase=False) -&gt; Any:\n        \"\"\"\n        Resolves and returns the Python module specified by the method module chain.\n\n        Args:\n            module_name_to_snakecase (bool, optional): Whether to convert the last module name to snake case.\n                                                      Defaults to False.\n\n        Returns:\n            Any: The resolved module.\n\n        Raises:\n            NotImplementedError: If the method module chain is not defined for the task.\n        \"\"\"\n        if not self.module_chain:\n            raise NotImplementedError(f\"Method module chain not defined for task {self.name}.\")\n\n        module_chain = self.module_chain\n        if module_name_to_snakecase:\n            module_chain = self.module_chain[:-1] + [camel_to_snake(self.module_chain[-1])]\n\n        module_chain_parents = \".\".join(module_chain[:-1])\n        module_chain_child = module_chain[-1]\n        module_container = importlib.import_module(module_chain_parents)\n        module = getattr(module_container, module_chain_child)\n        return module\n</code></pre>"},{"location":"reference/classes/method/#exe_kg_lib.classes.method.Method.resolve_module","title":"<code>resolve_module(module_name_to_snakecase=False)</code>","text":"<p>Resolves and returns the Python module specified by the method module chain.</p> <p>Parameters:</p> Name Type Description Default <code>module_name_to_snakecase</code> <code>bool</code> <p>Whether to convert the last module name to snake case.                                       Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The resolved module.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If the method module chain is not defined for the task.</p> Source code in <code>exe_kg_lib/classes/method.py</code> <pre><code>def resolve_module(self, module_name_to_snakecase=False) -&gt; Any:\n    \"\"\"\n    Resolves and returns the Python module specified by the method module chain.\n\n    Args:\n        module_name_to_snakecase (bool, optional): Whether to convert the last module name to snake case.\n                                                  Defaults to False.\n\n    Returns:\n        Any: The resolved module.\n\n    Raises:\n        NotImplementedError: If the method module chain is not defined for the task.\n    \"\"\"\n    if not self.module_chain:\n        raise NotImplementedError(f\"Method module chain not defined for task {self.name}.\")\n\n    module_chain = self.module_chain\n    if module_name_to_snakecase:\n        module_chain = self.module_chain[:-1] + [camel_to_snake(self.module_chain[-1])]\n\n    module_chain_parents = \".\".join(module_chain[:-1])\n    module_chain_child = module_chain[-1]\n    module_container = importlib.import_module(module_chain_parents)\n    module = getattr(module_container, module_chain_child)\n    return module\n</code></pre>"},{"location":"reference/classes/task/","title":"task","text":""},{"location":"reference/classes/task/#exe_kg_lib.classes.task.Task","title":"<code>Task</code>","text":"<p>               Bases: <code>Entity</code></p> <p>Abstraction of owl:class ds:AtomicTask.</p> <p>\u2757 Important for contributors: See Section \"Naming conventions\" in README.md of \"classes.tasks\" package before extending the code's functionality.</p> Source code in <code>exe_kg_lib/classes/task.py</code> <pre><code>class Task(Entity):\n    \"\"\"\n    Abstraction of owl:class ds:AtomicTask.\n\n    \u2757 Important for contributors: See Section \"Naming conventions\" in README.md of \"classes.tasks\" package before extending the code's functionality.\n    \"\"\"\n\n    def __init__(\n        self,\n        iri: str,\n        parent_entity: Entity = None,\n    ):\n        super().__init__(iri, parent_entity)\n        self.next_task = None  # used for storing the next Task in the pipeline\n        self.method = None  # used for storing the method of the Task\n        self.inputs = []  # used for storing input DataEntity objects during KG execution\n        self.outputs = []  # used for storing output DataEntity objects during KG execution\n        self.input_dict = {}  # used for storing input DataEntity objects during KG creation\n        self.output_dict = {}  # used for storing output DataEntity objects during KG creation\n\n    @classmethod\n    def from_entity(cls, entity: Entity):\n        return cls(entity.iri, entity.parent_entity)\n\n    def create_output_dict(self, keyword_value_dict: dict) -&gt; dict:\n        \"\"\"\n        For each key in keyword_value_dict, checks if the key exists in an output name of the Task.\n        If yes, adds the output name with its value to out_dict.\n        Args:\n            keyword_value_dict: key-value pairs where key is a keyword to find in an output name of the Task\n                                  and value is the value corresponding to that output name\n\n        Returns:\n            dict: pairs of Task's output names and corresponding output values\n        \"\"\"\n        if len(self.outputs) == 0:\n            # assume one output and use task name as key\n            return {self.name: list(keyword_value_dict.values())[0]}\n\n        output_names = [has_output_elem.name for has_output_elem in self.outputs]\n        out_dict = {}\n        for output_name in output_names:\n            for key, value in keyword_value_dict.items():\n                if key in output_name:\n                    out_dict[output_name] = value\n\n        return out_dict\n\n    def get_inputs(\n        self, dict_to_search: dict, fallback_df: pd.DataFrame\n    ) -&gt; Dict[str, Dict[str, Union[pd.DataFrame, Method]]]:\n        \"\"\"\n        For each input of the Task:\n            - If the input is a DataEntity: Searches for the input reference name in dict_to_search. If not found, uses fallback_df.\n            - If the input is a Method: Uses the input type as the input name and the input itself as the input value.\n\n        Args:\n            dict_to_search: contains key-value pairs where key is a possible input name and value is its corresponding value\n            fallback_df: contains data to return as an alternative\n\n        Returns:\n            Dict[str, Dict[str, Union[pd.DataFrame, Method]]]: dictionary with input types as keys and dictionaries with input names and values as values\n        \"\"\"\n        input_dict = {}\n        inputs_sorted = sorted(self.inputs, key=lambda x: x.name)\n        for input in inputs_sorted:\n            if input.type not in input_dict:\n                input_dict[input.type] = []\n            if isinstance(input, DataEntity):\n                input_name = input.reference\n                try:\n                    input_value = dict_to_search[input.reference]\n                except KeyError:\n                    input_value = fallback_df.loc[:, [input.source]]\n            elif isinstance(input, Method):\n                input_name = input.type\n                input_value = input\n\n            input_dict[input.type].append({\"name\": input_name, \"value\": input_value})\n\n        return input_dict\n\n    @abstractmethod\n    def run_method(self, *args):\n        \"\"\"\n        Abstract method to be implemented by Task sub-classes that are in the bottom of the hierarchy.\n        Executes the logic that is needed to fulfill the Task.\n        Args:\n            *args: defined by sub-classes\n        \"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/classes/task/#exe_kg_lib.classes.task.Task.create_output_dict","title":"<code>create_output_dict(keyword_value_dict)</code>","text":"<p>For each key in keyword_value_dict, checks if the key exists in an output name of the Task. If yes, adds the output name with its value to out_dict. Args:     keyword_value_dict: key-value pairs where key is a keyword to find in an output name of the Task                           and value is the value corresponding to that output name</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>pairs of Task's output names and corresponding output values</p> Source code in <code>exe_kg_lib/classes/task.py</code> <pre><code>def create_output_dict(self, keyword_value_dict: dict) -&gt; dict:\n    \"\"\"\n    For each key in keyword_value_dict, checks if the key exists in an output name of the Task.\n    If yes, adds the output name with its value to out_dict.\n    Args:\n        keyword_value_dict: key-value pairs where key is a keyword to find in an output name of the Task\n                              and value is the value corresponding to that output name\n\n    Returns:\n        dict: pairs of Task's output names and corresponding output values\n    \"\"\"\n    if len(self.outputs) == 0:\n        # assume one output and use task name as key\n        return {self.name: list(keyword_value_dict.values())[0]}\n\n    output_names = [has_output_elem.name for has_output_elem in self.outputs]\n    out_dict = {}\n    for output_name in output_names:\n        for key, value in keyword_value_dict.items():\n            if key in output_name:\n                out_dict[output_name] = value\n\n    return out_dict\n</code></pre>"},{"location":"reference/classes/task/#exe_kg_lib.classes.task.Task.get_inputs","title":"<code>get_inputs(dict_to_search, fallback_df)</code>","text":"For each input of the Task <ul> <li>If the input is a DataEntity: Searches for the input reference name in dict_to_search. If not found, uses fallback_df.</li> <li>If the input is a Method: Uses the input type as the input name and the input itself as the input value.</li> </ul> <p>Parameters:</p> Name Type Description Default <code>dict_to_search</code> <code>dict</code> <p>contains key-value pairs where key is a possible input name and value is its corresponding value</p> required <code>fallback_df</code> <code>DataFrame</code> <p>contains data to return as an alternative</p> required <p>Returns:</p> Type Description <code>Dict[str, Dict[str, Union[DataFrame, Method]]]</code> <p>Dict[str, Dict[str, Union[pd.DataFrame, Method]]]: dictionary with input types as keys and dictionaries with input names and values as values</p> Source code in <code>exe_kg_lib/classes/task.py</code> <pre><code>def get_inputs(\n    self, dict_to_search: dict, fallback_df: pd.DataFrame\n) -&gt; Dict[str, Dict[str, Union[pd.DataFrame, Method]]]:\n    \"\"\"\n    For each input of the Task:\n        - If the input is a DataEntity: Searches for the input reference name in dict_to_search. If not found, uses fallback_df.\n        - If the input is a Method: Uses the input type as the input name and the input itself as the input value.\n\n    Args:\n        dict_to_search: contains key-value pairs where key is a possible input name and value is its corresponding value\n        fallback_df: contains data to return as an alternative\n\n    Returns:\n        Dict[str, Dict[str, Union[pd.DataFrame, Method]]]: dictionary with input types as keys and dictionaries with input names and values as values\n    \"\"\"\n    input_dict = {}\n    inputs_sorted = sorted(self.inputs, key=lambda x: x.name)\n    for input in inputs_sorted:\n        if input.type not in input_dict:\n            input_dict[input.type] = []\n        if isinstance(input, DataEntity):\n            input_name = input.reference\n            try:\n                input_value = dict_to_search[input.reference]\n            except KeyError:\n                input_value = fallback_df.loc[:, [input.source]]\n        elif isinstance(input, Method):\n            input_name = input.type\n            input_value = input\n\n        input_dict[input.type].append({\"name\": input_name, \"value\": input_value})\n\n    return input_dict\n</code></pre>"},{"location":"reference/classes/task/#exe_kg_lib.classes.task.Task.run_method","title":"<code>run_method(*args)</code>  <code>abstractmethod</code>","text":"<p>Abstract method to be implemented by Task sub-classes that are in the bottom of the hierarchy. Executes the logic that is needed to fulfill the Task. Args:     *args: defined by sub-classes</p> Source code in <code>exe_kg_lib/classes/task.py</code> <pre><code>@abstractmethod\ndef run_method(self, *args):\n    \"\"\"\n    Abstract method to be implemented by Task sub-classes that are in the bottom of the hierarchy.\n    Executes the logic that is needed to fulfill the Task.\n    Args:\n        *args: defined by sub-classes\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/classes/exe_kg_mixins/exe_kg_construction_cli_mixin/","title":"exe_kg_construction_cli_mixin","text":""},{"location":"reference/classes/exe_kg_mixins/exe_kg_construction_cli_mixin/#exe_kg_lib.classes.exe_kg_mixins.exe_kg_construction_cli_mixin.ExeKGConstructionCLIMixin","title":"<code>ExeKGConstructionCLIMixin</code>","text":"Source code in <code>exe_kg_lib/classes/exe_kg_mixins/exe_kg_construction_cli_mixin.py</code> <pre><code>class ExeKGConstructionCLIMixin:\n    # see exe_kg_lib/classes/exe_kg_base.py for the definition of these attributes\n    output_kg: Graph\n    top_level_schema: KGSchema\n    bottom_level_schemata: Dict[str, KGSchema]\n    data_entity: Entity\n    pipeline: Entity\n    input_kg: Graph\n    atomic_task_list: List[Entity]\n    atomic_method_list: List[Entity]\n    data_type_list: List[Entity]\n    data_semantics_list: List[Entity]\n    data_structure_list: List[Entity]\n    existing_data_entity_list: List[DataEntity]\n    last_created_task: Union[None, Task]\n    canvas_task_created: bool\n    shacl_shapes_s: str\n    _add_outputs_to_task: Callable[[Task, Entity], None]\n\n    def start_pipeline_creation_cli(\n        self, pipeline_name: str, input_data_path: str, input_plots_output_dir: str\n    ) -&gt; None:\n        \"\"\"\n        Starts the creation of a pipeline in the form of ExeKG via CLI.\n\n        Args:\n            pipeline_name (str): The name of the pipeline.\n            input_data_path (str): The path to the input data.\n            input_plots_output_dir (str): The directory to output the input plots.\n\n        Returns:\n            None\n        \"\"\"\n        pipeline = create_pipeline_task(\n            self.top_level_schema.namespace,\n            self.pipeline,\n            self.output_kg,\n            pipeline_name,\n            input_data_path,\n            input_plots_output_dir,\n        )\n\n        self.last_created_task = pipeline\n\n        while True:\n            next_task = self._create_next_task_cli()\n            if next_task is None:\n                break\n\n            method_instance = self._create_method_cli(next_task)\n\n            # instantiate and add input data entities to the task based on user input\n            self._add_inputs_to_task_cli(next_task.parent_entity.namespace, next_task)\n            # instantiate and add output data entities to the task, as specified in the KG schema\n            self._add_outputs_to_task(next_task, method_instance)\n\n    def _create_next_task_cli(self) -&gt; Union[None, Task]:\n        \"\"\"\n        Prompts the user to choose the next task and creates a Task object based on the user's input.\n        Adds the task to the output KG and adds its output data entities to self.existing_data_entity_list.\n\n        Returns:\n            Union[None, Task]: The created Task object or None if the user chooses to end the pipeline.\n        \"\"\"\n        print(\"Please choose the next task\")\n        for i, t in enumerate(self.atomic_task_list):\n            if not self.canvas_task_created and t.name == \"PlotTask\":\n                continue\n            if self.canvas_task_created and t.name == \"CanvasTask\":\n                continue\n            print(f\"\\t{str(i)}. {t.name}\")\n        print(f\"\\t{str(-1)}. End pipeline\")\n        next_task_id = int(input())\n        if next_task_id == -1:\n            return None\n\n        next_task_parent = self.atomic_task_list[next_task_id]\n        relation_iri = (\n            self.top_level_schema.namespace.hasNextTask\n            if self.last_created_task.type != \"Pipeline\"\n            else self.top_level_schema.namespace.hasStartTask\n        )  # use relation depending on the previous task\n\n        # instantiate task and link it with the previous one\n        task_entity = add_instance_from_parent_with_relation(\n            next_task_parent.namespace,\n            self.output_kg,\n            next_task_parent,\n            relation_iri,\n            self.last_created_task,\n            self.name_instance(next_task_parent),\n        )\n\n        task_entity = Task(task_entity.iri, task_entity.parent_entity)  # create Task object from Entity object's info\n\n        self.last_created_task = task_entity\n        if task_entity.type == \"CanvasTask\":\n            self.canvas_task_created = True\n\n        return task_entity\n\n    def _add_inputs_to_task_cli(\n        self,\n        namespace: Namespace,\n        task_instance: Task,\n    ) -&gt; None:\n        \"\"\"\n        Prompts user to create input data entities.\n        Adds the data entities as inputs to the given task of the output KG.\n\n        Args:\n            namespace (Namespace): The namespace of the task instance.\n            task_instance (Task): The task instance to add inputs to.\n\n        Returns:\n            None\n        \"\"\"\n\n        # fetch compatible inputs from KG schema\n        results = list(\n            get_grouped_inherited_inputs(\n                self.input_kg,\n                self.top_level_schema.namespace_prefix,\n                task_instance.parent_entity.iri,\n            )\n        )\n\n        for input_entity_iri, info_l in results:\n            data_structure_iris = [pair[0] for pair in info_l]\n            input_property_iri = info_l[0][1]  # common input property for all data structures\n            input_entity_name = input_entity_iri.split(\"#\")[1]\n            data_structure_names = [iri.split(\"#\")[1] for iri in data_structure_iris]\n\n            print(f\"Specify input corresponding to {input_entity_name} with data structures {data_structure_names}\")\n            input_data_entity_list = get_input_for_existing_data_entities(self.existing_data_entity_list)\n            input_data_entity_list += get_input_for_new_data_entities(\n                self.data_semantics_list,\n                self.data_structure_list,\n                namespace,\n                self.data_entity,\n            )\n\n            self._add_input_data_entities_to_task(\n                input_entity_iri, input_data_entity_list, input_property_iri, task_instance\n            )\n\n    def _create_method_cli(self, task_to_attach_to: Entity) -&gt; Entity:\n        \"\"\"\n        Prompts the user to choose a method to attach to the given task.\n        Links the method to the given task in the output KG and adds method parameters as literals.\n\n        Args:\n            task_to_attach_to (Entity): The task entity to attach the method to.\n\n        Returns:\n            method_instance (Entity): The instance of the selected method linked to the task.\n        \"\"\"\n        print(f\"Please choose a method for {task_to_attach_to.type}:\")\n\n        # fetch compatible methods and their properties from KG schema\n        results = list(\n            query_method_properties_and_methods(\n                self.input_kg,\n                self.top_level_schema.namespace_prefix,\n                task_to_attach_to.parent_entity.iri,\n            )\n        )\n        for i, pair in enumerate(results):\n            tmp_method = pair[1].split(\"#\")[1]\n            print(f\"\\t{str(i)}. {tmp_method}\")\n\n        method_id = int(input())\n        selected_property_and_method = results[method_id]\n        method_parent = next(\n            filter(\n                lambda m: m.iri == selected_property_and_method[1],\n                self.atomic_method_list,\n            ),\n            None,\n        )\n        # instantiate method and link it with the task using the appropriate selected_property_and_method[0] relation\n        method_instance = add_instance_from_parent_with_relation(\n            task_to_attach_to.namespace,\n            self.output_kg,\n            method_parent,\n            selected_property_and_method[0],\n            task_to_attach_to,\n            self.name_instance(method_parent),\n        )\n\n        # fetch compatible data properties from KG schema\n        property_list = get_method_grouped_params(\n            method_parent.iri,\n            self.top_level_schema.namespace_prefix,\n            self.input_kg,\n            inherited=method_parent.namespace == str(self.bottom_level_schemata[\"visu\"].namespace),\n        )\n\n        if property_list:\n            print(f\"Please enter requested properties for {method_parent.name}:\")\n            # add data properties to the task with given values\n            for property_iri, property_range_iris in property_list:\n                property_name = property_iri.split(\"#\")[1]\n                ranges = [range_iri.split(\"#\")[1] for range_iri in property_range_iris]\n\n                input_value_s = input(\"\\t{} in range({}): \".format(property_name, \", \".join(ranges)))\n                if input_value_s == \"\":\n                    continue\n\n                try:\n                    input_value = eval(input_value_s)\n                except (SyntaxError, NameError):\n                    input_value = input_value_s\n\n                literal = self._field_value_to_literal(input_value)\n                add_literal(self.output_kg, method_instance, property_iri, literal)\n\n        # check_kg_executability(self.output_kg)\n\n        return method_instance\n</code></pre>"},{"location":"reference/classes/exe_kg_mixins/exe_kg_construction_cli_mixin/#exe_kg_lib.classes.exe_kg_mixins.exe_kg_construction_cli_mixin.ExeKGConstructionCLIMixin.start_pipeline_creation_cli","title":"<code>start_pipeline_creation_cli(pipeline_name, input_data_path, input_plots_output_dir)</code>","text":"<p>Starts the creation of a pipeline in the form of ExeKG via CLI.</p> <p>Parameters:</p> Name Type Description Default <code>pipeline_name</code> <code>str</code> <p>The name of the pipeline.</p> required <code>input_data_path</code> <code>str</code> <p>The path to the input data.</p> required <code>input_plots_output_dir</code> <code>str</code> <p>The directory to output the input plots.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>exe_kg_lib/classes/exe_kg_mixins/exe_kg_construction_cli_mixin.py</code> <pre><code>def start_pipeline_creation_cli(\n    self, pipeline_name: str, input_data_path: str, input_plots_output_dir: str\n) -&gt; None:\n    \"\"\"\n    Starts the creation of a pipeline in the form of ExeKG via CLI.\n\n    Args:\n        pipeline_name (str): The name of the pipeline.\n        input_data_path (str): The path to the input data.\n        input_plots_output_dir (str): The directory to output the input plots.\n\n    Returns:\n        None\n    \"\"\"\n    pipeline = create_pipeline_task(\n        self.top_level_schema.namespace,\n        self.pipeline,\n        self.output_kg,\n        pipeline_name,\n        input_data_path,\n        input_plots_output_dir,\n    )\n\n    self.last_created_task = pipeline\n\n    while True:\n        next_task = self._create_next_task_cli()\n        if next_task is None:\n            break\n\n        method_instance = self._create_method_cli(next_task)\n\n        # instantiate and add input data entities to the task based on user input\n        self._add_inputs_to_task_cli(next_task.parent_entity.namespace, next_task)\n        # instantiate and add output data entities to the task, as specified in the KG schema\n        self._add_outputs_to_task(next_task, method_instance)\n</code></pre>"},{"location":"reference/classes/exe_kg_mixins/exe_kg_construction_mixin/","title":"exe_kg_construction_mixin","text":""},{"location":"reference/classes/exe_kg_mixins/exe_kg_construction_mixin/#exe_kg_lib.classes.exe_kg_mixins.exe_kg_construction_mixin.ExeKGConstructionMixin","title":"<code>ExeKGConstructionMixin</code>","text":"Source code in <code>exe_kg_lib/classes/exe_kg_mixins/exe_kg_construction_mixin.py</code> <pre><code>class ExeKGConstructionMixin:\n    # see exe_kg_lib/classes/exe_kg_base.py for the definition of these attributes\n    exe_kg: Graph\n    pipeline_instance: Entity\n    pipeline_serializable: Pipeline\n    top_level_schema: KGSchema\n    bottom_level_schemata: Dict[str, KGSchema]\n    atomic_task: Entity\n    task: Entity\n    atomic_method: Entity\n    data_entity: Entity\n    pipeline: Entity\n    data: Entity\n    data_semantics: Entity\n    data_structure: Entity\n    input_kg: Graph\n    task_type_dict: Dict[str, int]\n    method_type_dict: Dict[str, int]\n    atomic_task_list: List[Entity]\n    atomic_method_list: List[Entity]\n    data_type_list: List[Entity]\n    data_semantics_list: List[Entity]\n    data_structure_list: List[Entity]\n    existing_data_entity_list: List[DataEntity]\n    last_created_task: Union[None, Task]\n    canvas_task_created: bool\n    shacl_shapes_s: str\n\n    def create_pipeline_task(self, pipeline_name: str, input_data_path: str, plots_output_dir: str) -&gt; Task:\n        \"\"\"\n        Creates a pipeline task with the given parameters and adds it to the output KG.\n\n        Args:\n            pipeline_name (str): The name of the pipeline.\n            input_data_path (str): The path to the input data for the pipeline.\n            plots_output_dir (str): The directory to save the plots when executing the pipeline.\n\n        Returns:\n            Task: The created pipeline task.\n        \"\"\"\n        self.pipeline_instance = create_pipeline_task(\n            self.top_level_schema.namespace,\n            self.pipeline,\n            self.exe_kg,\n            pipeline_name,\n            input_data_path,\n            plots_output_dir,\n        )\n        self.last_created_task = self.pipeline_instance\n\n        # update the serializable simplified pipeline\n        self.pipeline_serializable.name = pipeline_name\n        self.pipeline_serializable.input_data_path = str(input_data_path)\n        self.pipeline_serializable.output_plots_dir = str(plots_output_dir)\n\n        return self.pipeline_instance\n\n    def create_data_entity(\n        self,\n        name: str,\n        source_value: str,\n        data_semantics_name: str,\n        data_structure_name: str,\n    ) -&gt; DataEntity:\n        \"\"\"\n        Creates a DataEntity object with the given parameters.\n\n        Args:\n            name (str): The name of the data entity.\n            source_value (str): The source value of the data entity (e.g. column name from the input dataset).\n            data_semantics_name (str): The name of the data semantics.\n            data_structure_name (str): The name of the data structure.\n\n        Returns:\n            DataEntity: The created DataEntity object.\n        \"\"\"\n        # add data entity to the serializable simplified pipeline\n        self.pipeline_serializable.add_data_entity(name, source_value, data_semantics_name, data_structure_name)\n\n        return DataEntity(\n            self.top_level_schema.namespace + name,\n            self.data_entity,\n            source_value,\n            self.top_level_schema.namespace + data_semantics_name,\n            self.top_level_schema.namespace + data_structure_name,\n        )\n\n    def create_method(self, method_type: str, params_dict: Dict[str, Union[str, int, float, dict]]) -&gt; Method:\n        \"\"\"\n        Creates a Method object with the specified method type and parameters.\n\n        Args:\n            method_type (str): The type of the method.\n            params_dict (Dict[str, Union[str, int, float, dict]]): A dictionary containing the parameters for the method.\n\n        Returns:\n            Method: The created Method object.\n        \"\"\"\n        return Method(\n            self.top_level_schema.namespace + method_type,\n            self.atomic_method,\n            module_chain=None,\n            params_dict=params_dict,\n        )\n\n    def _add_and_link_method(\n        self,\n        method_type: str,\n        method_params_dict: Dict[str, Union[str, int, float, dict]],\n        relation_iri: str,\n        task_instance: Task,\n        namespace_to_use: Namespace,\n        method_extra_parent_iri: str = None,\n    ) -&gt; None:\n        \"\"\"\n        Adds a method instance to the ExeKG and links it to the task instance.\n\n        Args:\n            method_type (str): The type of the method.\n            method_params_dict (Dict[str, Union[str, int, float, dict]]): A dictionary containing the method parameters.\n            relation_iri (str): The IRI of the relation between the method instance and the task instance.\n            task_instance (Task): The task instance to link the method instance to.\n            namespace_to_use (Namespace): The namespace to use for creating the method instance.\n            method_extra_parent_iri (str, optional): The IRI of an additional parent for the method instance. Defaults to None.\n\n        Returns:\n            None\n\n        Raises:\n            ValueError: If any of the provided method parameters could not be added to the method instance.\n        \"\"\"\n        method_parent = Entity(namespace_to_use + method_type, self.atomic_method)\n        method_instance = add_instance_from_parent_with_relation(\n            namespace_to_use,\n            self.exe_kg,\n            method_parent,\n            relation_iri,\n            task_instance,\n            self.name_instance(method_parent),\n            method_extra_parent_iri,\n        )\n\n        # fetch compatible data properties from KG schema\n        property_list = get_method_grouped_params(\n            method_parent.iri,\n            self.top_level_schema.namespace_prefix,\n            self.input_kg,\n            inherited=method_parent.namespace == str(self.bottom_level_schemata[\"visu\"].namespace),\n        )\n\n        method_params_dict_copy = method_params_dict.copy()\n        # add data properties to the task with given values\n        for property_iri, _ in property_list:\n            property_name = property_iri.split(\"#\")[1]\n            # param_name = property_name_to_field_name(property_name)\n            if property_name not in method_params_dict_copy:\n                continue\n\n            input_value = method_params_dict_copy.pop(property_name)\n            literal = field_value_to_literal(input_value)\n\n            add_literal(self.exe_kg, method_instance, property_iri, literal)\n\n        if len(method_params_dict_copy) &gt; 0:\n            raise ValueError(\n                f\"Provided method parameters {method_params_dict_copy} could NOT be added to the method instance.\"\n            )\n\n    def add_task(\n        self,\n        kg_schema_short: str,\n        input_entity_dict: Dict[str, Union[List[DataEntity], Method]],\n        method_params_dict: Dict[str, Union[str, int, float, dict]],\n        task_type: str,\n        method_type: str,\n    ) -&gt; Task:\n        \"\"\"\n        Instantiates and adds a new task entity to the output KG.\n        Components attached to the task during creation: input and output data entities, and a method with properties.\n\n        Args:\n            kg_schema_short (str): The short name of the KG schema to use (e.g. ml, visu, etc.).\n            input_entity_dict (Dict[str, Union[List[DataEntity], Method]]): A dictionary containing input data entities for the task.\n            method_params_dict (Dict[str, Union[str, int, float, dict]]): A dictionary containing method parameters.\n            task_type (str): The type of the task. Defaults to None.\n            method_type (str): The type of the method. Defaults to None.\n\n        Returns:\n            Task: The created task object.\n\n        Raises:\n            NoResultsError: If the property connecting the task and method is not found.\n        \"\"\"\n\n        kg_schema_to_use = self.bottom_level_schemata[kg_schema_short]\n\n        relation_iri = (\n            self.top_level_schema.namespace.hasNextTask\n            if self.last_created_task.type != \"Pipeline\"\n            else self.top_level_schema.namespace.hasStartTask\n        )  # use relation depending on the previous task\n\n        # instantiate task and link it with the previous one\n        task_class = Task(kg_schema_to_use.namespace + task_type, self.atomic_task)\n        added_entity = add_instance_from_parent_with_relation(\n            kg_schema_to_use.namespace,\n            self.exe_kg,\n            task_class,\n            relation_iri,\n            self.last_created_task,\n            self.name_instance(task_class),\n        )\n        task_instance = Task.from_entity(added_entity)  # create Task object from Entity object\n\n        # instantiate and add given input data entities to the task\n        self._add_inputs_to_task(kg_schema_to_use.namespace, task_instance, input_entity_dict)\n        # instantiate and add output data entities to the task, as specified in the KG schema\n        output_names = self._add_outputs_to_task(task_instance, method_type)\n\n        # if no method is given, return the task without adding a method\n        if method_type is None:\n            self.last_created_task = task_instance  # store created task\n            return task_instance\n\n        # fetch compatible methods and their properties from KG schema\n        results = list(\n            query_method_properties_and_methods(\n                self.input_kg,\n                self.top_level_schema.namespace_prefix,\n                task_instance.parent_entity.iri,\n            )\n        )\n        chosen_property_method = next(\n            filter(lambda pair: pair[1].split(\"#\")[1] == method_type, results), None\n        )  # match given method_type with query result\n\n        if chosen_property_method is None:\n            raise NoResultsError(\n                f\"Property connecting task of type {task_type} with method of type {method_type} not found\"\n            )\n\n        # instantiate method and link it with the task using the appropriate chosen_property_method[0] relation\n        self._add_and_link_method(\n            method_type, method_params_dict, chosen_property_method[0], task_instance, kg_schema_to_use.namespace\n        )\n\n        self.last_created_task = task_instance  # store created task\n\n        # add task to the serializable simplified pipeline\n        self.pipeline_serializable.add_task(\n            kg_schema_short,\n            task_type,\n            method_type,\n            method_params_dict,\n            input_entity_dict,\n            output_names,\n        )\n\n        return task_instance\n\n    def _add_inputs_to_task(\n        self,\n        namespace: Namespace,\n        task_instance: Task,\n        input_entity_dict: Dict[str, Union[List[DataEntity], Method]],\n    ) -&gt; None:\n        \"\"\"\n        Instantiates and adds given input data entities to the given task of the output KG.\n\n        Args:\n            namespace (Namespace): The namespace of the task instance.\n            task_instance (Task): The task instance to add inputs to.\n            input_entity_dict (Dict[str, Union[List[DataEntity], Method]]): A dictionary mapping input entity names to a list of DataEntity instances.\n        \"\"\"\n\n        results = list(\n            get_grouped_inherited_inputs(\n                self.input_kg,\n                self.top_level_schema.namespace_prefix,\n                task_instance.parent_entity.iri,\n            )\n        )\n\n        for input_entity_iri, info_l in results:\n            input_property_iri = info_l[0][1]\n            input_data_structure_iris = [pair[0] for pair in info_l]\n            input_entity_name = input_entity_iri.split(\"#\")[1]\n\n            if input_entity_name not in input_entity_dict:\n                continue\n            input_entity_value = input_entity_dict[input_entity_name]\n            if isinstance(input_entity_value, Method):  # provided input is a method\n                if all(iri is None for iri in input_data_structure_iris):\n                    raise ValueError(f\"Expecting a DataEntity, but got a Method for {input_entity_name}.\")\n\n                method = input_entity_value\n                # instantiate and link method to the task\n                self._add_and_link_method(\n                    method.name,\n                    method.params_dict,\n                    input_property_iri,\n                    task_instance,\n                    task_instance.namespace,\n                    method_extra_parent_iri=input_entity_iri,\n                )\n            elif isinstance(input_entity_value, list) and all(\n                isinstance(elem, DataEntity) for elem in input_entity_value\n            ):  # provided input is list of data entities\n                self._add_input_data_entities_to_task(\n                    input_entity_iri, input_entity_value, input_property_iri, task_instance\n                )\n            else:\n                raise ValueError(\n                    f\"Expecting a DataEntity or a Method for {input_entity_name}, but got {type(input_entity_value)}.\"\n                )\n\n    def _add_input_data_entities_to_task(\n        self,\n        input_entity_iri: str,\n        input_data_entity_list: List[DataEntity],\n        input_property_iri: str,\n        task_instance: Task,\n    ) -&gt; None:\n        input_entity_name = input_entity_iri.split(\"#\")[1]\n        same_input_index = 1\n        for input_data_entity in input_data_entity_list:\n            # instantiate data entity corresponding to the given input_entity_name\n            data_entity_iri = input_entity_iri + \"_\" + task_instance.name + \"_\" + str(same_input_index)\n            # instantiate given data entity\n            add_data_entity_instance(\n                self.exe_kg,\n                self.data,\n                self.top_level_schema.kg,\n                self.top_level_schema.namespace,\n                input_data_entity,\n            )\n            # instantiate and attach data entity with reference to the given data entit\n            data_entity = DataEntity(\n                data_entity_iri,\n                DataEntity(input_entity_iri, self.data_entity),\n                reference=input_data_entity.iri,\n                # data_structure_iri=input_data_entity.data_structure,\n            )\n            add_and_attach_data_entity(\n                self.exe_kg,\n                self.data,\n                self.top_level_schema.kg,\n                self.top_level_schema.namespace,\n                data_entity,\n                input_property_iri,\n                task_instance,\n            )\n            task_instance.input_dict[input_entity_name] = data_entity\n            same_input_index += 1\n\n    def _add_outputs_to_task(self, task_instance: Task, method_instance_type: str) -&gt; List[str]:\n        \"\"\"\n        Instantiates and adds output data entities to the given task of the output KG.\n\n        Args:\n            task_instance (Task): The task instance to add outputs to.\n            method_instance_type (str): The type of the method instance.\n                                        If not None, it will be appended to the output data entity IRI.\n                                        If None, the task type index will be appended instead.\n\n        Returns:\n            List[str]: The names of the output data entities.\n        \"\"\"\n\n        # fetch compatible outputs from KG schema\n        results = list(\n            get_grouped_inherited_outputs(\n                self.input_kg,\n                self.top_level_schema.namespace_prefix,\n                task_instance.parent_entity.iri,\n            )\n        )\n\n        output_names = []\n        for output_parent_entity_iri, info_l in results:\n            data_structure_iris = [pair[0] for pair in info_l]\n            output_property_iri = info_l[0][1]  # common input property for all data structures\n            output_names.append(output_parent_entity_iri.split(\"#\")[1])\n            # instantiate and add data entity\n            output_data_entity_iri = get_task_output_name(\n                output_parent_entity_iri, task_instance.name, method_instance_type\n            )\n\n            # add and attach output data entity to the task\n            # attach all compatible data structures to the data entity\n            for data_structure_iri in data_structure_iris:\n                output_data_entity = DataEntity(\n                    output_data_entity_iri,\n                    DataEntity(output_parent_entity_iri, self.data_entity),\n                    data_structure_iri=data_structure_iri,\n                )\n                add_and_attach_data_entity(\n                    self.exe_kg,\n                    self.data,\n                    self.top_level_schema.kg,\n                    self.top_level_schema.namespace,\n                    output_data_entity,\n                    output_property_iri,\n                    task_instance,\n                )\n            task_instance.output_dict[output_parent_entity_iri.split(\"#\")[1]] = output_data_entity\n            self.existing_data_entity_list.append(output_data_entity)\n\n        return output_names\n\n    def save_created_kg(self, dir_path: str, check_executability=True) -&gt; None:\n        \"\"\"\n        Save the created ExeKG and simplified pipeline.\n\n        Args:\n            dir_path (str): The directory path where the files will be saved.\n        \"\"\"\n\n        save_exe_kg(\n            self.exe_kg,\n            self.input_kg,\n            self.shacl_shapes_s,\n            self.pipeline_serializable,\n            dir_path,\n            self.pipeline_serializable.name,\n            check_executability,\n        )\n\n    def name_instance(\n        self,\n        parent_entity: Entity,\n    ) -&gt; Union[None, str]:\n        \"\"\"\n        Generates a unique name for an instance based on its given parent entity.\n\n        Args:\n            parent_entity (Entity): The parent entity for which the instance name is generated.\n\n        Returns:\n            Union[None, str]: The generated instance name.\n\n        Raises:\n            ValueError: If the parent entity type is invalid.\n        \"\"\"\n\n        if parent_entity.type == \"AtomicTask\":\n            entity_type_dict = self.task_type_dict\n        elif parent_entity.type == \"AtomicMethod\":\n            entity_type_dict = self.method_type_dict\n        else:\n            raise ValueError(f\"Cannot create instance's name due to invalid parent entity type: {parent_entity.type}\")\n\n        if parent_entity.name not in entity_type_dict:\n            raise ValueError(f\"Parent entity name {parent_entity.name} not found in entity type dictionary.\")\n\n        instance_name = get_instance_name(\n            parent_entity.name, entity_type_dict[parent_entity.name], self.pipeline_serializable.name\n        )\n        entity_type_dict[parent_entity.name] += 1\n        return instance_name\n\n    def create_exe_kg_from_json(self, source: Union[Path, TextIOWrapper, str]) -&gt; Graph:\n        \"\"\"\n        Creates an ExeKG from a JSON source that represents a pipeline.\n\n        Args:\n            source (Union[Path, TextIOWrapper, str]): The JSON source containing the pipeline.\n\n        Returns:\n            Graph: The created ExeKG.\n        \"\"\"\n\n        pipeline_serializable = Pipeline.from_json(source)\n\n        # create data entities\n        data_entities_dict = {}\n        for data_entity in pipeline_serializable.data_entities:\n            data_entities_dict[data_entity.name] = self.create_data_entity(\n                data_entity.name,\n                data_entity.source,\n                data_entity.data_semantics,\n                data_entity.data_structure,\n            )\n\n        # create pipeline task\n        self.create_pipeline_task(\n            pipeline_serializable.name,\n            pipeline_serializable.input_data_path,\n            pipeline_serializable.output_plots_dir,\n        )\n\n        # create tasks\n        pos_per_task_type: Dict[str, int] = {}\n        task_output_dicts: Dict[str, Dict[str, DataEntity]] = {}\n        for task in pipeline_serializable.tasks:\n            # replace input data entity names with DataEntity objects\n            input_entity_dict = deserialize_input_entity_info_dict(\n                task.input_entity_info_dict,\n                data_entities_dict,\n                task_output_dicts,\n                pipeline_serializable.name,\n                self.bottom_level_schemata[task.kg_schema_short].namespace,\n            )\n            # add task to the KG\n            added_task = self.add_task(\n                kg_schema_short=task.kg_schema_short,\n                task_type=task.task_type,\n                method_type=task.method_type,\n                method_params_dict=task.method_params_dict,\n                input_entity_dict=input_entity_dict,\n            )\n            pos = pos_per_task_type.get(task.task_type, 1)\n            # store output data entities of the added task\n            task_output_dicts[get_instance_name(task.task_type, pos, self.pipeline_serializable.name)] = (\n                added_task.output_dict\n            )\n\n            pos_per_task_type[task.task_type] = pos + 1\n\n        check_kg_executability(self.exe_kg + self.input_kg, self.shacl_shapes_s)\n\n        return self.exe_kg\n\n    def clear_created_kg(self) -&gt; None:\n        \"\"\"\n        Clears the created ExeKG.\n        \"\"\"\n        self.exe_kg = Graph(bind_namespaces=\"rdflib\")\n        self.exe_kg.bind(self.top_level_schema.namespace_prefix, self.top_level_schema.namespace)\n        for bottom_level_kg_schema in self.bottom_level_schemata.values():\n            self.exe_kg.bind(\n                bottom_level_kg_schema.namespace_prefix,\n                bottom_level_kg_schema.namespace,\n            )\n\n        self.pipeline_serializable = Pipeline()\n        self.pipeline_instance = None\n\n        self.existing_data_entity_list = []\n        self.last_created_task = None\n        self.canvas_task_created = False\n\n        for task_type in self.task_type_dict:\n            self.task_type_dict[task_type] = 1\n\n        for method_type in self.method_type_dict:\n            self.method_type_dict[method_type] = 1\n</code></pre>"},{"location":"reference/classes/exe_kg_mixins/exe_kg_construction_mixin/#exe_kg_lib.classes.exe_kg_mixins.exe_kg_construction_mixin.ExeKGConstructionMixin.add_task","title":"<code>add_task(kg_schema_short, input_entity_dict, method_params_dict, task_type, method_type)</code>","text":"<p>Instantiates and adds a new task entity to the output KG. Components attached to the task during creation: input and output data entities, and a method with properties.</p> <p>Parameters:</p> Name Type Description Default <code>kg_schema_short</code> <code>str</code> <p>The short name of the KG schema to use (e.g. ml, visu, etc.).</p> required <code>input_entity_dict</code> <code>Dict[str, Union[List[DataEntity], Method]]</code> <p>A dictionary containing input data entities for the task.</p> required <code>method_params_dict</code> <code>Dict[str, Union[str, int, float, dict]]</code> <p>A dictionary containing method parameters.</p> required <code>task_type</code> <code>str</code> <p>The type of the task. Defaults to None.</p> required <code>method_type</code> <code>str</code> <p>The type of the method. Defaults to None.</p> required <p>Returns:</p> Name Type Description <code>Task</code> <code>Task</code> <p>The created task object.</p> <p>Raises:</p> Type Description <code>NoResultsError</code> <p>If the property connecting the task and method is not found.</p> Source code in <code>exe_kg_lib/classes/exe_kg_mixins/exe_kg_construction_mixin.py</code> <pre><code>def add_task(\n    self,\n    kg_schema_short: str,\n    input_entity_dict: Dict[str, Union[List[DataEntity], Method]],\n    method_params_dict: Dict[str, Union[str, int, float, dict]],\n    task_type: str,\n    method_type: str,\n) -&gt; Task:\n    \"\"\"\n    Instantiates and adds a new task entity to the output KG.\n    Components attached to the task during creation: input and output data entities, and a method with properties.\n\n    Args:\n        kg_schema_short (str): The short name of the KG schema to use (e.g. ml, visu, etc.).\n        input_entity_dict (Dict[str, Union[List[DataEntity], Method]]): A dictionary containing input data entities for the task.\n        method_params_dict (Dict[str, Union[str, int, float, dict]]): A dictionary containing method parameters.\n        task_type (str): The type of the task. Defaults to None.\n        method_type (str): The type of the method. Defaults to None.\n\n    Returns:\n        Task: The created task object.\n\n    Raises:\n        NoResultsError: If the property connecting the task and method is not found.\n    \"\"\"\n\n    kg_schema_to_use = self.bottom_level_schemata[kg_schema_short]\n\n    relation_iri = (\n        self.top_level_schema.namespace.hasNextTask\n        if self.last_created_task.type != \"Pipeline\"\n        else self.top_level_schema.namespace.hasStartTask\n    )  # use relation depending on the previous task\n\n    # instantiate task and link it with the previous one\n    task_class = Task(kg_schema_to_use.namespace + task_type, self.atomic_task)\n    added_entity = add_instance_from_parent_with_relation(\n        kg_schema_to_use.namespace,\n        self.exe_kg,\n        task_class,\n        relation_iri,\n        self.last_created_task,\n        self.name_instance(task_class),\n    )\n    task_instance = Task.from_entity(added_entity)  # create Task object from Entity object\n\n    # instantiate and add given input data entities to the task\n    self._add_inputs_to_task(kg_schema_to_use.namespace, task_instance, input_entity_dict)\n    # instantiate and add output data entities to the task, as specified in the KG schema\n    output_names = self._add_outputs_to_task(task_instance, method_type)\n\n    # if no method is given, return the task without adding a method\n    if method_type is None:\n        self.last_created_task = task_instance  # store created task\n        return task_instance\n\n    # fetch compatible methods and their properties from KG schema\n    results = list(\n        query_method_properties_and_methods(\n            self.input_kg,\n            self.top_level_schema.namespace_prefix,\n            task_instance.parent_entity.iri,\n        )\n    )\n    chosen_property_method = next(\n        filter(lambda pair: pair[1].split(\"#\")[1] == method_type, results), None\n    )  # match given method_type with query result\n\n    if chosen_property_method is None:\n        raise NoResultsError(\n            f\"Property connecting task of type {task_type} with method of type {method_type} not found\"\n        )\n\n    # instantiate method and link it with the task using the appropriate chosen_property_method[0] relation\n    self._add_and_link_method(\n        method_type, method_params_dict, chosen_property_method[0], task_instance, kg_schema_to_use.namespace\n    )\n\n    self.last_created_task = task_instance  # store created task\n\n    # add task to the serializable simplified pipeline\n    self.pipeline_serializable.add_task(\n        kg_schema_short,\n        task_type,\n        method_type,\n        method_params_dict,\n        input_entity_dict,\n        output_names,\n    )\n\n    return task_instance\n</code></pre>"},{"location":"reference/classes/exe_kg_mixins/exe_kg_construction_mixin/#exe_kg_lib.classes.exe_kg_mixins.exe_kg_construction_mixin.ExeKGConstructionMixin.clear_created_kg","title":"<code>clear_created_kg()</code>","text":"<p>Clears the created ExeKG.</p> Source code in <code>exe_kg_lib/classes/exe_kg_mixins/exe_kg_construction_mixin.py</code> <pre><code>def clear_created_kg(self) -&gt; None:\n    \"\"\"\n    Clears the created ExeKG.\n    \"\"\"\n    self.exe_kg = Graph(bind_namespaces=\"rdflib\")\n    self.exe_kg.bind(self.top_level_schema.namespace_prefix, self.top_level_schema.namespace)\n    for bottom_level_kg_schema in self.bottom_level_schemata.values():\n        self.exe_kg.bind(\n            bottom_level_kg_schema.namespace_prefix,\n            bottom_level_kg_schema.namespace,\n        )\n\n    self.pipeline_serializable = Pipeline()\n    self.pipeline_instance = None\n\n    self.existing_data_entity_list = []\n    self.last_created_task = None\n    self.canvas_task_created = False\n\n    for task_type in self.task_type_dict:\n        self.task_type_dict[task_type] = 1\n\n    for method_type in self.method_type_dict:\n        self.method_type_dict[method_type] = 1\n</code></pre>"},{"location":"reference/classes/exe_kg_mixins/exe_kg_construction_mixin/#exe_kg_lib.classes.exe_kg_mixins.exe_kg_construction_mixin.ExeKGConstructionMixin.create_data_entity","title":"<code>create_data_entity(name, source_value, data_semantics_name, data_structure_name)</code>","text":"<p>Creates a DataEntity object with the given parameters.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the data entity.</p> required <code>source_value</code> <code>str</code> <p>The source value of the data entity (e.g. column name from the input dataset).</p> required <code>data_semantics_name</code> <code>str</code> <p>The name of the data semantics.</p> required <code>data_structure_name</code> <code>str</code> <p>The name of the data structure.</p> required <p>Returns:</p> Name Type Description <code>DataEntity</code> <code>DataEntity</code> <p>The created DataEntity object.</p> Source code in <code>exe_kg_lib/classes/exe_kg_mixins/exe_kg_construction_mixin.py</code> <pre><code>def create_data_entity(\n    self,\n    name: str,\n    source_value: str,\n    data_semantics_name: str,\n    data_structure_name: str,\n) -&gt; DataEntity:\n    \"\"\"\n    Creates a DataEntity object with the given parameters.\n\n    Args:\n        name (str): The name of the data entity.\n        source_value (str): The source value of the data entity (e.g. column name from the input dataset).\n        data_semantics_name (str): The name of the data semantics.\n        data_structure_name (str): The name of the data structure.\n\n    Returns:\n        DataEntity: The created DataEntity object.\n    \"\"\"\n    # add data entity to the serializable simplified pipeline\n    self.pipeline_serializable.add_data_entity(name, source_value, data_semantics_name, data_structure_name)\n\n    return DataEntity(\n        self.top_level_schema.namespace + name,\n        self.data_entity,\n        source_value,\n        self.top_level_schema.namespace + data_semantics_name,\n        self.top_level_schema.namespace + data_structure_name,\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg_mixins/exe_kg_construction_mixin/#exe_kg_lib.classes.exe_kg_mixins.exe_kg_construction_mixin.ExeKGConstructionMixin.create_exe_kg_from_json","title":"<code>create_exe_kg_from_json(source)</code>","text":"<p>Creates an ExeKG from a JSON source that represents a pipeline.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>Union[Path, TextIOWrapper, str]</code> <p>The JSON source containing the pipeline.</p> required <p>Returns:</p> Name Type Description <code>Graph</code> <code>Graph</code> <p>The created ExeKG.</p> Source code in <code>exe_kg_lib/classes/exe_kg_mixins/exe_kg_construction_mixin.py</code> <pre><code>def create_exe_kg_from_json(self, source: Union[Path, TextIOWrapper, str]) -&gt; Graph:\n    \"\"\"\n    Creates an ExeKG from a JSON source that represents a pipeline.\n\n    Args:\n        source (Union[Path, TextIOWrapper, str]): The JSON source containing the pipeline.\n\n    Returns:\n        Graph: The created ExeKG.\n    \"\"\"\n\n    pipeline_serializable = Pipeline.from_json(source)\n\n    # create data entities\n    data_entities_dict = {}\n    for data_entity in pipeline_serializable.data_entities:\n        data_entities_dict[data_entity.name] = self.create_data_entity(\n            data_entity.name,\n            data_entity.source,\n            data_entity.data_semantics,\n            data_entity.data_structure,\n        )\n\n    # create pipeline task\n    self.create_pipeline_task(\n        pipeline_serializable.name,\n        pipeline_serializable.input_data_path,\n        pipeline_serializable.output_plots_dir,\n    )\n\n    # create tasks\n    pos_per_task_type: Dict[str, int] = {}\n    task_output_dicts: Dict[str, Dict[str, DataEntity]] = {}\n    for task in pipeline_serializable.tasks:\n        # replace input data entity names with DataEntity objects\n        input_entity_dict = deserialize_input_entity_info_dict(\n            task.input_entity_info_dict,\n            data_entities_dict,\n            task_output_dicts,\n            pipeline_serializable.name,\n            self.bottom_level_schemata[task.kg_schema_short].namespace,\n        )\n        # add task to the KG\n        added_task = self.add_task(\n            kg_schema_short=task.kg_schema_short,\n            task_type=task.task_type,\n            method_type=task.method_type,\n            method_params_dict=task.method_params_dict,\n            input_entity_dict=input_entity_dict,\n        )\n        pos = pos_per_task_type.get(task.task_type, 1)\n        # store output data entities of the added task\n        task_output_dicts[get_instance_name(task.task_type, pos, self.pipeline_serializable.name)] = (\n            added_task.output_dict\n        )\n\n        pos_per_task_type[task.task_type] = pos + 1\n\n    check_kg_executability(self.exe_kg + self.input_kg, self.shacl_shapes_s)\n\n    return self.exe_kg\n</code></pre>"},{"location":"reference/classes/exe_kg_mixins/exe_kg_construction_mixin/#exe_kg_lib.classes.exe_kg_mixins.exe_kg_construction_mixin.ExeKGConstructionMixin.create_method","title":"<code>create_method(method_type, params_dict)</code>","text":"<p>Creates a Method object with the specified method type and parameters.</p> <p>Parameters:</p> Name Type Description Default <code>method_type</code> <code>str</code> <p>The type of the method.</p> required <code>params_dict</code> <code>Dict[str, Union[str, int, float, dict]]</code> <p>A dictionary containing the parameters for the method.</p> required <p>Returns:</p> Name Type Description <code>Method</code> <code>Method</code> <p>The created Method object.</p> Source code in <code>exe_kg_lib/classes/exe_kg_mixins/exe_kg_construction_mixin.py</code> <pre><code>def create_method(self, method_type: str, params_dict: Dict[str, Union[str, int, float, dict]]) -&gt; Method:\n    \"\"\"\n    Creates a Method object with the specified method type and parameters.\n\n    Args:\n        method_type (str): The type of the method.\n        params_dict (Dict[str, Union[str, int, float, dict]]): A dictionary containing the parameters for the method.\n\n    Returns:\n        Method: The created Method object.\n    \"\"\"\n    return Method(\n        self.top_level_schema.namespace + method_type,\n        self.atomic_method,\n        module_chain=None,\n        params_dict=params_dict,\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg_mixins/exe_kg_construction_mixin/#exe_kg_lib.classes.exe_kg_mixins.exe_kg_construction_mixin.ExeKGConstructionMixin.create_pipeline_task","title":"<code>create_pipeline_task(pipeline_name, input_data_path, plots_output_dir)</code>","text":"<p>Creates a pipeline task with the given parameters and adds it to the output KG.</p> <p>Parameters:</p> Name Type Description Default <code>pipeline_name</code> <code>str</code> <p>The name of the pipeline.</p> required <code>input_data_path</code> <code>str</code> <p>The path to the input data for the pipeline.</p> required <code>plots_output_dir</code> <code>str</code> <p>The directory to save the plots when executing the pipeline.</p> required <p>Returns:</p> Name Type Description <code>Task</code> <code>Task</code> <p>The created pipeline task.</p> Source code in <code>exe_kg_lib/classes/exe_kg_mixins/exe_kg_construction_mixin.py</code> <pre><code>def create_pipeline_task(self, pipeline_name: str, input_data_path: str, plots_output_dir: str) -&gt; Task:\n    \"\"\"\n    Creates a pipeline task with the given parameters and adds it to the output KG.\n\n    Args:\n        pipeline_name (str): The name of the pipeline.\n        input_data_path (str): The path to the input data for the pipeline.\n        plots_output_dir (str): The directory to save the plots when executing the pipeline.\n\n    Returns:\n        Task: The created pipeline task.\n    \"\"\"\n    self.pipeline_instance = create_pipeline_task(\n        self.top_level_schema.namespace,\n        self.pipeline,\n        self.exe_kg,\n        pipeline_name,\n        input_data_path,\n        plots_output_dir,\n    )\n    self.last_created_task = self.pipeline_instance\n\n    # update the serializable simplified pipeline\n    self.pipeline_serializable.name = pipeline_name\n    self.pipeline_serializable.input_data_path = str(input_data_path)\n    self.pipeline_serializable.output_plots_dir = str(plots_output_dir)\n\n    return self.pipeline_instance\n</code></pre>"},{"location":"reference/classes/exe_kg_mixins/exe_kg_construction_mixin/#exe_kg_lib.classes.exe_kg_mixins.exe_kg_construction_mixin.ExeKGConstructionMixin.name_instance","title":"<code>name_instance(parent_entity)</code>","text":"<p>Generates a unique name for an instance based on its given parent entity.</p> <p>Parameters:</p> Name Type Description Default <code>parent_entity</code> <code>Entity</code> <p>The parent entity for which the instance name is generated.</p> required <p>Returns:</p> Type Description <code>Union[None, str]</code> <p>Union[None, str]: The generated instance name.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the parent entity type is invalid.</p> Source code in <code>exe_kg_lib/classes/exe_kg_mixins/exe_kg_construction_mixin.py</code> <pre><code>def name_instance(\n    self,\n    parent_entity: Entity,\n) -&gt; Union[None, str]:\n    \"\"\"\n    Generates a unique name for an instance based on its given parent entity.\n\n    Args:\n        parent_entity (Entity): The parent entity for which the instance name is generated.\n\n    Returns:\n        Union[None, str]: The generated instance name.\n\n    Raises:\n        ValueError: If the parent entity type is invalid.\n    \"\"\"\n\n    if parent_entity.type == \"AtomicTask\":\n        entity_type_dict = self.task_type_dict\n    elif parent_entity.type == \"AtomicMethod\":\n        entity_type_dict = self.method_type_dict\n    else:\n        raise ValueError(f\"Cannot create instance's name due to invalid parent entity type: {parent_entity.type}\")\n\n    if parent_entity.name not in entity_type_dict:\n        raise ValueError(f\"Parent entity name {parent_entity.name} not found in entity type dictionary.\")\n\n    instance_name = get_instance_name(\n        parent_entity.name, entity_type_dict[parent_entity.name], self.pipeline_serializable.name\n    )\n    entity_type_dict[parent_entity.name] += 1\n    return instance_name\n</code></pre>"},{"location":"reference/classes/exe_kg_mixins/exe_kg_construction_mixin/#exe_kg_lib.classes.exe_kg_mixins.exe_kg_construction_mixin.ExeKGConstructionMixin.save_created_kg","title":"<code>save_created_kg(dir_path, check_executability=True)</code>","text":"<p>Save the created ExeKG and simplified pipeline.</p> <p>Parameters:</p> Name Type Description Default <code>dir_path</code> <code>str</code> <p>The directory path where the files will be saved.</p> required Source code in <code>exe_kg_lib/classes/exe_kg_mixins/exe_kg_construction_mixin.py</code> <pre><code>def save_created_kg(self, dir_path: str, check_executability=True) -&gt; None:\n    \"\"\"\n    Save the created ExeKG and simplified pipeline.\n\n    Args:\n        dir_path (str): The directory path where the files will be saved.\n    \"\"\"\n\n    save_exe_kg(\n        self.exe_kg,\n        self.input_kg,\n        self.shacl_shapes_s,\n        self.pipeline_serializable,\n        dir_path,\n        self.pipeline_serializable.name,\n        check_executability,\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg_mixins/exe_kg_edit_mixin/","title":"exe_kg_edit_mixin","text":""},{"location":"reference/classes/exe_kg_mixins/exe_kg_edit_mixin/#exe_kg_lib.classes.exe_kg_mixins.exe_kg_edit_mixin.ExeKGEditMixin","title":"<code>ExeKGEditMixin</code>","text":"Source code in <code>exe_kg_lib/classes/exe_kg_mixins/exe_kg_edit_mixin.py</code> <pre><code>class ExeKGEditMixin:\n    # see exe_kg_lib/classes/exe_kg_base.py for the definition of these attributes\n    exe_kg: Graph\n    input_kg: Graph\n    top_level_schema: KGSchema\n    bottom_level_schemata: Dict[str, KGSchema]\n    atomic_task: Entity\n    pipeline_serializable: Pipeline\n    task_type_dict: Dict[str, int]\n    data: Entity\n    pipeline: Entity\n    # see exe_kg_lib/classes/exe_kg_mixins/exe_kg_construction_mixin.py for the definition of these attributes\n    create_exe_kg_from_json: Callable[[Union[Path, TextIOWrapper, str]], Graph]\n    add_task: Callable[\n        [\n            str,\n            Dict[str, Union[List[DataEntity], Method]],\n            Dict[str, Union[str, int, float, dict]],\n            str,\n            str,\n        ],\n        Task,\n    ]\n    clear_created_kg: Callable[[], None]\n\n    def __init__(self, input_exe_kg_path: str = None) -&gt; None:\n        super().__init__()\n\n        if input_exe_kg_path:\n            self.load_exe_kg(input_exe_kg_path)\n\n    def load_exe_kg(self, input_exe_kg_path: str) -&gt; None:\n        \"\"\"\n        Resets ExeKG creation state and loads an ExeKG from the specified path.\n\n        Args:\n            input_exe_kg_path (str): The path to the input executable knowledge graph.\n\n        Returns:\n            None\n        \"\"\"\n        self.input_exe_kg_path = input_exe_kg_path\n\n        self.clear_created_kg()\n        self.exe_kg = load_exe_kg(\n            input_exe_kg_path, self.create_exe_kg_from_json if input_exe_kg_path.endswith(\".json\") else None\n        )\n\n    def update_metric_values(self, output_name_value_dict: Dict[str, Union[str, int, float, bool]]) -&gt; None:\n        \"\"\"\n        Updates the metric values in the ExeKG instance.\n\n        Args:\n            output_name_value_dict (Dict[str, Union[str, int, float, bool]]): A dictionary containing the metric names as keys\n                and their corresponding values as values. The values can be of type str, int, float, or bool.\n\n        Returns:\n            None\n        \"\"\"\n        update_metric_values(\n            self.exe_kg,\n            output_name_value_dict,\n            self.bottom_level_schemata[\"ml\"].namespace,\n            self.top_level_schema.namespace,\n        )\n\n    def update_param_values(\n        self, method_info_params_dict: Dict[Tuple[str, str], Dict[str, Union[str, int, float, bool]]]\n    ):\n        \"\"\"\n        Update the parameter values for a given method in the knowledge graph.\n\n        Args:\n            method_info_params_dict (Dict[Tuple[str, str], Dict[str, Union[str, int, float, bool]]]):\n                A dictionary containing the method information as keys and parameter dictionary as values.\n                The method information is represented as a tuple of (method_ns_prefix, method_name).\n                The parameter dictionary contains parameter names as keys and parameter values as values.\n\n        Returns:\n            None\n        \"\"\"\n        for (method_ns_prefix, method_name), param_dict in method_info_params_dict.items():\n            namespace = self.bottom_level_schemata[method_ns_prefix].namespace\n            method_iri = URIRef(namespace + method_name)\n            for param_name, param_value in param_dict.items():\n                self.exe_kg.remove(\n                    (\n                        method_iri,\n                        URIRef(namespace + param_name),\n                        None,\n                    )\n                )\n                self.exe_kg.add(\n                    (\n                        method_iri,\n                        URIRef(namespace + param_name),\n                        field_value_to_literal(param_value),\n                    )\n                )\n\n    def update_dataset(\n        self,\n        new_dataset_path: str,\n        new_feature_data_entities: List[DataEntity],\n        new_label_data_entity: DataEntity,\n    ):\n        \"\"\"\n        Update the dataset used in the ExeKG.\n\n        Args:\n            new_dataset_path (str): The path to the new dataset.\n            new_feature_data_entities (List[DataEntity]): The list of new feature data entities.\n            new_label_data_entity (DataEntity): The new label data entity.\n\n        Raises:\n            ValueError: If the name of the label entity is not 'label'.\n        \"\"\"\n\n        if new_label_data_entity.name != \"label\":\n            raise ValueError(\"The name of the label entity should be 'label'\")\n\n        ml_namespace = self.bottom_level_schemata[\"ml\"].namespace\n        concat_task_iri = next(self.exe_kg.subjects(predicate=RDF.type, object=ml_namespace.Concatenation))\n        next_to_concat_task_iri = next(\n            self.exe_kg.objects(subject=concat_task_iri, predicate=self.top_level_schema.namespace.hasNextTask)\n        )\n\n        removal_types = [\n            self.top_level_schema.namespace.DataEntity,\n            ml_namespace.Concatenation,\n            ml_namespace.DataInConcatenation,\n            ml_namespace.DataOutConcatenatedData,\n        ]\n\n        # remove all instances of DataEntity, Concatenation, DataInConcatenation, and DataOutConcatenatedData\n        for removal_type in removal_types:\n            for entity_iri in self.exe_kg.subjects(predicate=RDF.type, object=removal_type):\n                self.exe_kg.remove((entity_iri, None, None))\n\n        pipeline_iri, input_data_path, _, _ = get_pipeline_and_first_task_iri(\n            self.exe_kg, self.top_level_schema.namespace_prefix\n        )\n\n        pipeline_entity = Task(pipeline_iri, self.pipeline)\n\n        # update the input data path of the pipeline\n        update_pipeline_input_path(\n            self.exe_kg,\n            pipeline_iri,\n            new_dataset_path,\n            self.top_level_schema.namespace,\n        )\n\n        # or_last_created_task = self.last_created_task\n        # or_concat_id = self.task_type_dict[\"Concatenation\"]\n\n        # update serializable pipeline name to avoid errors while creating names for new entities\n        self.pipeline_serializable.name = pipeline_entity.name\n\n        # update pipeline construction state to add task in the 1st position of the pipeline\n        self.last_created_task = pipeline_entity\n        self.task_type_dict[\"Concatenation\"] = 1\n\n        # add a new Concatenation task to the pipeline, which also adds the new feature DataEntities\n        concatenate_task = self.add_task(\n            kg_schema_short=\"ml\",\n            input_entity_dict={\"DataInConcatenation\": new_feature_data_entities},\n            method_type=\"ConcatenationMethod\",\n            method_params_dict={},\n            task_type=\"Concatenation\",\n        )\n\n        # add the new label DataEntity to the pipeline\n        add_data_entity_instance(\n            self.exe_kg,\n            self.data,\n            self.top_level_schema.kg,\n            self.top_level_schema.namespace,\n            new_label_data_entity,\n        )\n\n        # link the new Concatenation task to the pipeline\n        add_relation(\n            self.exe_kg, concatenate_task, self.top_level_schema.namespace.hasNextTask, Entity(next_to_concat_task_iri)\n        )\n\n        # # reset construction state\n        # self.last_created_task = or_last_created_task\n        # self.task_type_dict[\"Concatenation\"] = or_concat_id\n\n    def update_pipeline_name(self, new_name: str):\n        \"\"\"\n        Updates every instance of the pipeline name in the ExeKG.\n\n        Args:\n            new_name (str): The new name for the pipeline.\n\n        Returns:\n            None\n        \"\"\"\n\n        pipeline_iri, _, _, _ = get_pipeline_and_first_task_iri(self.exe_kg, self.top_level_schema.namespace_prefix)\n\n        pipeline_entity = Task(pipeline_iri, self.pipeline)\n\n        old_name = pipeline_entity.name\n\n        # collect triples to update\n        triples_to_update = []\n        for s, p, o in self.exe_kg:\n            new_s, new_o = s, o\n            # check and replace in subject URI\n            if isinstance(s, URIRef) and old_name in str(s):\n                new_s = URIRef(str(s).replace(old_name, new_name))\n            # check and replace in object URI if it's a URIRef\n            if isinstance(o, URIRef) and old_name in str(o):\n                new_o = URIRef(str(o).replace(old_name, new_name))\n            if new_s != s or new_o != o:\n                triples_to_update.append((s, p, o, new_s, new_o))\n\n        # Update the graph\n        for old_s, p, old_o, new_s, new_o in triples_to_update:\n            self.exe_kg.remove((old_s, p, old_o))\n            self.exe_kg.add((new_s, p, new_o))\n\n        self.pipeline_serializable.name = new_name\n\n        return old_name, new_name\n\n    def apply_changes_to_ttl(self, new_path: str = None, check_executability: bool = True) -&gt; None:\n        \"\"\"\n        Applies the changes made to the ExeKG and saves it to a TTL file.\n\n        Args:\n            new_path (str, optional): The new path to save the TTL file. If not provided, the input_exe_kg_path will be used. Defaults to None.\n            check_executability (bool, optional): Flag indicating whether to check the executability of the saved TTL file. Defaults to True.\n        \"\"\"\n        path_to_save = self.input_exe_kg_path if not new_path else new_path\n        pipeline_name = os.path.basename(path_to_save).split(\".\")[0]\n\n        save_exe_kg(\n            self.exe_kg,\n            self.input_kg,\n            self.shacl_shapes_s,\n            None,\n            os.path.dirname(path_to_save),\n            pipeline_name,\n            check_executability,\n            save_to_ttl=True,\n            save_to_json=False,\n        )\n</code></pre>"},{"location":"reference/classes/exe_kg_mixins/exe_kg_edit_mixin/#exe_kg_lib.classes.exe_kg_mixins.exe_kg_edit_mixin.ExeKGEditMixin.apply_changes_to_ttl","title":"<code>apply_changes_to_ttl(new_path=None, check_executability=True)</code>","text":"<p>Applies the changes made to the ExeKG and saves it to a TTL file.</p> <p>Parameters:</p> Name Type Description Default <code>new_path</code> <code>str</code> <p>The new path to save the TTL file. If not provided, the input_exe_kg_path will be used. Defaults to None.</p> <code>None</code> <code>check_executability</code> <code>bool</code> <p>Flag indicating whether to check the executability of the saved TTL file. Defaults to True.</p> <code>True</code> Source code in <code>exe_kg_lib/classes/exe_kg_mixins/exe_kg_edit_mixin.py</code> <pre><code>def apply_changes_to_ttl(self, new_path: str = None, check_executability: bool = True) -&gt; None:\n    \"\"\"\n    Applies the changes made to the ExeKG and saves it to a TTL file.\n\n    Args:\n        new_path (str, optional): The new path to save the TTL file. If not provided, the input_exe_kg_path will be used. Defaults to None.\n        check_executability (bool, optional): Flag indicating whether to check the executability of the saved TTL file. Defaults to True.\n    \"\"\"\n    path_to_save = self.input_exe_kg_path if not new_path else new_path\n    pipeline_name = os.path.basename(path_to_save).split(\".\")[0]\n\n    save_exe_kg(\n        self.exe_kg,\n        self.input_kg,\n        self.shacl_shapes_s,\n        None,\n        os.path.dirname(path_to_save),\n        pipeline_name,\n        check_executability,\n        save_to_ttl=True,\n        save_to_json=False,\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg_mixins/exe_kg_edit_mixin/#exe_kg_lib.classes.exe_kg_mixins.exe_kg_edit_mixin.ExeKGEditMixin.load_exe_kg","title":"<code>load_exe_kg(input_exe_kg_path)</code>","text":"<p>Resets ExeKG creation state and loads an ExeKG from the specified path.</p> <p>Parameters:</p> Name Type Description Default <code>input_exe_kg_path</code> <code>str</code> <p>The path to the input executable knowledge graph.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>exe_kg_lib/classes/exe_kg_mixins/exe_kg_edit_mixin.py</code> <pre><code>def load_exe_kg(self, input_exe_kg_path: str) -&gt; None:\n    \"\"\"\n    Resets ExeKG creation state and loads an ExeKG from the specified path.\n\n    Args:\n        input_exe_kg_path (str): The path to the input executable knowledge graph.\n\n    Returns:\n        None\n    \"\"\"\n    self.input_exe_kg_path = input_exe_kg_path\n\n    self.clear_created_kg()\n    self.exe_kg = load_exe_kg(\n        input_exe_kg_path, self.create_exe_kg_from_json if input_exe_kg_path.endswith(\".json\") else None\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg_mixins/exe_kg_edit_mixin/#exe_kg_lib.classes.exe_kg_mixins.exe_kg_edit_mixin.ExeKGEditMixin.update_dataset","title":"<code>update_dataset(new_dataset_path, new_feature_data_entities, new_label_data_entity)</code>","text":"<p>Update the dataset used in the ExeKG.</p> <p>Parameters:</p> Name Type Description Default <code>new_dataset_path</code> <code>str</code> <p>The path to the new dataset.</p> required <code>new_feature_data_entities</code> <code>List[DataEntity]</code> <p>The list of new feature data entities.</p> required <code>new_label_data_entity</code> <code>DataEntity</code> <p>The new label data entity.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the name of the label entity is not 'label'.</p> Source code in <code>exe_kg_lib/classes/exe_kg_mixins/exe_kg_edit_mixin.py</code> <pre><code>def update_dataset(\n    self,\n    new_dataset_path: str,\n    new_feature_data_entities: List[DataEntity],\n    new_label_data_entity: DataEntity,\n):\n    \"\"\"\n    Update the dataset used in the ExeKG.\n\n    Args:\n        new_dataset_path (str): The path to the new dataset.\n        new_feature_data_entities (List[DataEntity]): The list of new feature data entities.\n        new_label_data_entity (DataEntity): The new label data entity.\n\n    Raises:\n        ValueError: If the name of the label entity is not 'label'.\n    \"\"\"\n\n    if new_label_data_entity.name != \"label\":\n        raise ValueError(\"The name of the label entity should be 'label'\")\n\n    ml_namespace = self.bottom_level_schemata[\"ml\"].namespace\n    concat_task_iri = next(self.exe_kg.subjects(predicate=RDF.type, object=ml_namespace.Concatenation))\n    next_to_concat_task_iri = next(\n        self.exe_kg.objects(subject=concat_task_iri, predicate=self.top_level_schema.namespace.hasNextTask)\n    )\n\n    removal_types = [\n        self.top_level_schema.namespace.DataEntity,\n        ml_namespace.Concatenation,\n        ml_namespace.DataInConcatenation,\n        ml_namespace.DataOutConcatenatedData,\n    ]\n\n    # remove all instances of DataEntity, Concatenation, DataInConcatenation, and DataOutConcatenatedData\n    for removal_type in removal_types:\n        for entity_iri in self.exe_kg.subjects(predicate=RDF.type, object=removal_type):\n            self.exe_kg.remove((entity_iri, None, None))\n\n    pipeline_iri, input_data_path, _, _ = get_pipeline_and_first_task_iri(\n        self.exe_kg, self.top_level_schema.namespace_prefix\n    )\n\n    pipeline_entity = Task(pipeline_iri, self.pipeline)\n\n    # update the input data path of the pipeline\n    update_pipeline_input_path(\n        self.exe_kg,\n        pipeline_iri,\n        new_dataset_path,\n        self.top_level_schema.namespace,\n    )\n\n    # or_last_created_task = self.last_created_task\n    # or_concat_id = self.task_type_dict[\"Concatenation\"]\n\n    # update serializable pipeline name to avoid errors while creating names for new entities\n    self.pipeline_serializable.name = pipeline_entity.name\n\n    # update pipeline construction state to add task in the 1st position of the pipeline\n    self.last_created_task = pipeline_entity\n    self.task_type_dict[\"Concatenation\"] = 1\n\n    # add a new Concatenation task to the pipeline, which also adds the new feature DataEntities\n    concatenate_task = self.add_task(\n        kg_schema_short=\"ml\",\n        input_entity_dict={\"DataInConcatenation\": new_feature_data_entities},\n        method_type=\"ConcatenationMethod\",\n        method_params_dict={},\n        task_type=\"Concatenation\",\n    )\n\n    # add the new label DataEntity to the pipeline\n    add_data_entity_instance(\n        self.exe_kg,\n        self.data,\n        self.top_level_schema.kg,\n        self.top_level_schema.namespace,\n        new_label_data_entity,\n    )\n\n    # link the new Concatenation task to the pipeline\n    add_relation(\n        self.exe_kg, concatenate_task, self.top_level_schema.namespace.hasNextTask, Entity(next_to_concat_task_iri)\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg_mixins/exe_kg_edit_mixin/#exe_kg_lib.classes.exe_kg_mixins.exe_kg_edit_mixin.ExeKGEditMixin.update_metric_values","title":"<code>update_metric_values(output_name_value_dict)</code>","text":"<p>Updates the metric values in the ExeKG instance.</p> <p>Parameters:</p> Name Type Description Default <code>output_name_value_dict</code> <code>Dict[str, Union[str, int, float, bool]]</code> <p>A dictionary containing the metric names as keys and their corresponding values as values. The values can be of type str, int, float, or bool.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>exe_kg_lib/classes/exe_kg_mixins/exe_kg_edit_mixin.py</code> <pre><code>def update_metric_values(self, output_name_value_dict: Dict[str, Union[str, int, float, bool]]) -&gt; None:\n    \"\"\"\n    Updates the metric values in the ExeKG instance.\n\n    Args:\n        output_name_value_dict (Dict[str, Union[str, int, float, bool]]): A dictionary containing the metric names as keys\n            and their corresponding values as values. The values can be of type str, int, float, or bool.\n\n    Returns:\n        None\n    \"\"\"\n    update_metric_values(\n        self.exe_kg,\n        output_name_value_dict,\n        self.bottom_level_schemata[\"ml\"].namespace,\n        self.top_level_schema.namespace,\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg_mixins/exe_kg_edit_mixin/#exe_kg_lib.classes.exe_kg_mixins.exe_kg_edit_mixin.ExeKGEditMixin.update_param_values","title":"<code>update_param_values(method_info_params_dict)</code>","text":"<p>Update the parameter values for a given method in the knowledge graph.</p> <p>Parameters:</p> Name Type Description Default <code>method_info_params_dict</code> <code>Dict[Tuple[str, str], Dict[str, Union[str, int, float, bool]]]</code> <p>A dictionary containing the method information as keys and parameter dictionary as values. The method information is represented as a tuple of (method_ns_prefix, method_name). The parameter dictionary contains parameter names as keys and parameter values as values.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>exe_kg_lib/classes/exe_kg_mixins/exe_kg_edit_mixin.py</code> <pre><code>def update_param_values(\n    self, method_info_params_dict: Dict[Tuple[str, str], Dict[str, Union[str, int, float, bool]]]\n):\n    \"\"\"\n    Update the parameter values for a given method in the knowledge graph.\n\n    Args:\n        method_info_params_dict (Dict[Tuple[str, str], Dict[str, Union[str, int, float, bool]]]):\n            A dictionary containing the method information as keys and parameter dictionary as values.\n            The method information is represented as a tuple of (method_ns_prefix, method_name).\n            The parameter dictionary contains parameter names as keys and parameter values as values.\n\n    Returns:\n        None\n    \"\"\"\n    for (method_ns_prefix, method_name), param_dict in method_info_params_dict.items():\n        namespace = self.bottom_level_schemata[method_ns_prefix].namespace\n        method_iri = URIRef(namespace + method_name)\n        for param_name, param_value in param_dict.items():\n            self.exe_kg.remove(\n                (\n                    method_iri,\n                    URIRef(namespace + param_name),\n                    None,\n                )\n            )\n            self.exe_kg.add(\n                (\n                    method_iri,\n                    URIRef(namespace + param_name),\n                    field_value_to_literal(param_value),\n                )\n            )\n</code></pre>"},{"location":"reference/classes/exe_kg_mixins/exe_kg_edit_mixin/#exe_kg_lib.classes.exe_kg_mixins.exe_kg_edit_mixin.ExeKGEditMixin.update_pipeline_name","title":"<code>update_pipeline_name(new_name)</code>","text":"<p>Updates every instance of the pipeline name in the ExeKG.</p> <p>Parameters:</p> Name Type Description Default <code>new_name</code> <code>str</code> <p>The new name for the pipeline.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>exe_kg_lib/classes/exe_kg_mixins/exe_kg_edit_mixin.py</code> <pre><code>def update_pipeline_name(self, new_name: str):\n    \"\"\"\n    Updates every instance of the pipeline name in the ExeKG.\n\n    Args:\n        new_name (str): The new name for the pipeline.\n\n    Returns:\n        None\n    \"\"\"\n\n    pipeline_iri, _, _, _ = get_pipeline_and_first_task_iri(self.exe_kg, self.top_level_schema.namespace_prefix)\n\n    pipeline_entity = Task(pipeline_iri, self.pipeline)\n\n    old_name = pipeline_entity.name\n\n    # collect triples to update\n    triples_to_update = []\n    for s, p, o in self.exe_kg:\n        new_s, new_o = s, o\n        # check and replace in subject URI\n        if isinstance(s, URIRef) and old_name in str(s):\n            new_s = URIRef(str(s).replace(old_name, new_name))\n        # check and replace in object URI if it's a URIRef\n        if isinstance(o, URIRef) and old_name in str(o):\n            new_o = URIRef(str(o).replace(old_name, new_name))\n        if new_s != s or new_o != o:\n            triples_to_update.append((s, p, o, new_s, new_o))\n\n    # Update the graph\n    for old_s, p, old_o, new_s, new_o in triples_to_update:\n        self.exe_kg.remove((old_s, p, old_o))\n        self.exe_kg.add((new_s, p, new_o))\n\n    self.pipeline_serializable.name = new_name\n\n    return old_name, new_name\n</code></pre>"},{"location":"reference/classes/exe_kg_mixins/exe_kg_execution_mixin/","title":"exe_kg_execution_mixin","text":""},{"location":"reference/classes/exe_kg_mixins/exe_kg_execution_mixin/#exe_kg_lib.classes.exe_kg_mixins.exe_kg_execution_mixin.ExeKGExecutionMixin","title":"<code>ExeKGExecutionMixin</code>","text":"Source code in <code>exe_kg_lib/classes/exe_kg_mixins/exe_kg_execution_mixin.py</code> <pre><code>class ExeKGExecutionMixin:\n    # see exe_kg_lib/classes/exe_kg_base.py for the definition of these attributes\n    input_kg: Graph\n    exe_kg: Graph\n    top_level_schema: KGSchema\n    bottom_level_schemata: Dict[str, KGSchema]\n    shacl_shapes_s: str\n    # see exe_kg_lib/classes/exe_kg_mixins/exe_kg_construction_mixin.py for the definition of this attribute\n    create_exe_kg_from_json: Callable[[ExeKGConstructionMixin, Union[Path, TextIOWrapper, str]], Graph]\n\n    def _property_value_to_field_value(self, property_value: Union[str, Literal]) -&gt; Union[str, DataEntity, Method]:\n        \"\"\"\n        Converts a property value (from the KG) to a Python field value.\n\n        Args:\n            property_value (Union[str, Literal]): The property value to be converted.\n\n        Returns:\n            Union[str, DataEntity, Method]: The converted field value.\n\n        Raises:\n            NoResultsError: If the extra parent entity that is not a subclass of AtomicMethod cannot be retrieved.\n        \"\"\"\n        if isinstance(property_value, Literal):\n            return self._literal_to_field_value(property_value)\n\n        property_value_s = str(property_value)\n\n        # fetch type of entity with given IRI, assuming it's a DataEntity instance\n        query_result = get_first_query_result_if_exists(\n            query_instance_parent_iri,\n            self.input_kg,\n            property_value_s,\n            self.top_level_schema.namespace.DataEntity,\n        )\n        if query_result is not None:\n            data_entity_parent_iri = str(query_result[0])\n            return self._parse_data_entity_by_iri(property_value_s, data_entity_parent_iri)\n\n        # fetch type of entity with given IRI, assuming it's an AtomicMethod instance\n        query_result = get_first_query_result_if_exists(\n            query_instance_parent_iri,\n            self.input_kg,\n            property_value_s,\n            self.top_level_schema.namespace.AtomicMethod,\n        )\n\n        if query_result is None:\n            return property_value_s\n\n        method_parent_iri = str(query_result[0])\n\n        # fetch another type associated with the entity identified by the given IRI\n        query_result = get_first_query_result_if_exists(\n            query_instance_parent_iri,\n            self.input_kg,\n            property_value_s,\n            self.top_level_schema.namespace.AtomicMethod,\n            True,  # negation of inheritance, so the parent that does not inherit AtomicMethod is returned\n        )\n        method_extra_parent_iri = str(query_result[0]) if query_result is not None else None\n        if method_extra_parent_iri is None:\n            raise NoResultsError(\n                f\"For method with iri {property_value_s}, cannot retrieve extra parent entity that is not a subclass of AtomicMethod\"\n            )\n\n        # NOTE: here we use the method_extra_parent_iri as the parent entity of the method\n        #       this is important for correctly parsing each task's inputs during pipeline execution (see get_inputs() in Task class)\n        method = Method(property_value_s, Entity(method_extra_parent_iri))\n\n        method.module_chain = get_converted_module_hierarchy_chain(\n            self.input_kg, self.top_level_schema.namespace_prefix, method_parent_iri\n        )\n\n        # triples for the parameters attached to the method of this task\n        method_related_triples = list(\n            query_parameters_triples(self.input_kg, self.top_level_schema.namespace_prefix, method.iri)\n        )\n        for s, p, o in method_related_triples:\n            # parse property IRI and value\n            field_name = property_iri_to_field_name(str(p))\n            field_value = self._property_value_to_field_value(o)\n\n            method.params_dict[field_name] = field_value\n\n        return method\n\n    def _literal_to_field_value(self, literal: Literal) -&gt; Union[str, int, float, bool]:\n        \"\"\"\n        Converts a Literal object to a Python object based on its datatype.\n\n        Args:\n            literal (Literal): The Literal object to be converted.\n\n        Returns:\n            Union[str, int, float, bool]: The converted Python object.\n\n        Raises:\n            ValueError: If the datatype of the literal is unsupported.\n        \"\"\"\n        if literal.datatype == XSD.string:\n            try:\n                # try to convert string to Python object e.g. dict\n                return ast.literal_eval(str(literal))\n            except (ValueError, SyntaxError):\n                # if conversion fails, return string\n                return str(literal)\n        elif literal.datatype == XSD.int:\n            return int(literal)\n        elif literal.datatype == XSD.float:\n            return float(literal)\n        elif literal.datatype == XSD.boolean:\n            return bool(literal)\n\n        raise ValueError(f\"Unsupported datatype for literal: {literal}\")\n\n    def _parse_data_entity_by_iri(self, data_entity_instance_iri: str, data_entity_parent_iri: str) -&gt; DataEntity:\n        \"\"\"\n        Parses a data entity and stores the info in a DataEntity object.\n\n        Args:\n            data_entity_instance_iri (str): The IRI of the data entity instance to be parsed.\n            data_entity_parent_iri (str): The IRI of the parent entity of the data entity.\n\n        Returns:\n            DataEntity: The parsed DataEntity object.\n        \"\"\"\n        # fetch IRI of data entity that is referenced by the given entity\n        query_result = get_first_query_result_if_exists(\n            query_data_entity_reference_iri,\n            self.input_kg,\n            self.top_level_schema.namespace_prefix,\n            data_entity_instance_iri,\n        )\n\n        if query_result is None:  # no referenced data entity found\n            data_entity_ref_iri = data_entity_instance_iri\n        else:\n            data_entity_ref_iri = str(query_result[0])\n\n        # create DataEntity object to store all the parsed properties\n        data_entity = DataEntity(data_entity_instance_iri, Entity(data_entity_parent_iri))\n        data_entity.reference = data_entity_ref_iri.split(\"#\")[1]\n\n        for s, p, o in self.input_kg.triples((URIRef(data_entity_ref_iri), None, None)):\n            # parse property name and value\n            field_name = property_iri_to_field_name(str(p))\n            if not hasattr(data_entity, field_name) or field_name == \"type\":\n                continue\n            field_value = self._property_value_to_field_value(str(o))\n            setattr(data_entity, field_name, field_value)  # set field value dynamically\n\n        return data_entity\n\n    def _parse_method_of_task(self, task_iri: str) -&gt; Method:\n        \"\"\"\n        Parses the method associated with a given task IRI.\n\n        Args:\n            task_iri (str): The IRI of the task.\n\n        Returns:\n            Method: The parsed method object.\n        \"\"\"\n        method = get_method_by_task_iri(\n            self.input_kg,\n            self.top_level_schema.namespace_prefix,\n            self.top_level_schema.namespace,\n            task_iri,\n        )\n\n        method.module_chain = get_converted_module_hierarchy_chain(\n            self.input_kg, self.top_level_schema.namespace_prefix, method.parent_entity.iri\n        )\n\n        return method\n\n    def _parse_task_by_iri(\n        self, task_iri: str, plots_output_dir: str, canvas_task: visual_tasks.CanvasCreation = None\n    ) -&gt; Task:\n        \"\"\"\n        Parses a task and stores the info in an object of a sub-class of Task.\n        The sub-class name and the object's fields are mapped dynamically based on the found KG components.\n\n        Args:\n            task_iri (str): The IRI of the task to be parsed.\n            plots_output_dir (str): The directory where plots will be saved.\n            canvas_task (visual_tasks.CanvasCreation, optional): The canvas task associated with the task, if applicable.\n\n        Returns:\n            Task: The parsed Task object.\n\n        Raises:\n            NoResultsError: If the given IRI does not belong to an instance of a sub-class of self.top_level_schema.namespace.AtomicTask.\n        \"\"\"\n        # fetch type of entity with given IRI\n        query_result = get_first_query_result_if_exists(\n            query_instance_parent_iri,\n            self.input_kg,\n            task_iri,\n            self.top_level_schema.namespace.AtomicTask,\n        )\n\n        if (\n            query_result is None\n        ):  # given IRI does not belong to an instance of a sub-class of self.top_level_schema.namespace.AtomicTask\n            raise NoResultsError(f\"Cannot retrieve parent of task with iri {task_iri}\")\n\n        task_parent_iri = str(query_result[0])\n\n        query_result = get_first_query_result_if_exists(\n            query_top_level_task_iri,\n            self.input_kg,\n            task_parent_iri,\n            self.top_level_schema.namespace_prefix,\n        )\n\n        if (\n            query_result is None\n        ):  # given IRI does not belong to an instance of a sub-class of self.top_level_schema.namespace.AtomicTask\n            task_top_level_parent_iri = task_parent_iri\n        else:\n            task_top_level_parent_iri = str(query_result[0])\n\n        task_top_level_parent = Entity(task_top_level_parent_iri, None)\n\n        # perform automatic mapping of KG task class to Python sub-class\n        class_name = task_top_level_parent.name\n\n        is_visu_task = True\n        Class = getattr(visual_tasks, class_name, None)\n        if Class is None:\n            is_visu_task = False\n            Class = getattr(statistic_tasks, class_name, None)\n        if Class is None:\n            is_visu_task = False\n            Class = getattr(ml_tasks, class_name, None)\n\n        # create Task sub-class object\n        if is_visu_task and canvas_task:\n            task = Class(task_iri, Task(task_parent_iri), plots_output_dir, canvas_task)\n        else:\n            task = Class(task_iri, Task(task_parent_iri))\n\n        # fetch method of the task and store it in the task object\n        method = self._parse_method_of_task(task_iri)\n        task.method = method\n\n        # input triples\n        task_related_triples = list(\n            query_input_triples(self.input_kg, self.top_level_schema.namespace_prefix, task_iri)\n        )\n        # output triples\n        task_related_triples += list(\n            query_output_triples(self.input_kg, self.top_level_schema.namespace_prefix, task_iri)\n        )\n        # triple connecting this task with the next one in the pipeline\n        task_related_triples += list(\n            self.input_kg.triples((URIRef(task_iri), self.top_level_schema.namespace.hasNextTask, None))\n        )\n        # triples for the parameters attached to the method of this task\n        method_related_triples = (\n            list(query_parameters_triples(self.input_kg, self.top_level_schema.namespace_prefix, method.iri))\n            if method is not None\n            else []\n        )\n\n        # data properties attached to the method's class\n        method_class_data_properties = list(\n            query_method_params(method.parent_entity.iri, self.top_level_schema.namespace_prefix, self.input_kg)\n        )\n        method_class_data_property_iris = None\n        if method_class_data_properties:\n            method_class_data_property_iris = [str(pair[0]) for pair in method_class_data_properties]\n        for s, p, o in itertools.chain(task_related_triples, method_related_triples):\n            # parse property IRI and value\n            field_name = property_iri_to_field_name(str(p))\n            field_value = self._property_value_to_field_value(o)\n            # set field value dynamically\n            if field_name.endswith(\"input\"):\n                getattr(task, \"inputs\").append(field_value)\n            elif field_name.endswith(\"output\"):\n                getattr(task, \"outputs\").append(field_value)\n            elif field_name == \"next_task\":\n                setattr(task, field_name, field_value)\n            else:  # method parameter\n                # separate method class data properties from inherited ones\n                if method_class_data_property_iris and str(p) in method_class_data_property_iris:\n                    task.method.params_dict[field_name] = field_value\n                else:\n                    task.method.inherited_params_dict[field_name] = field_value\n\n        return task\n\n    def execute_pipeline(self, input_exe_kg_path: str) -&gt; None:\n        \"\"\"\n        Executes the pipeline by parsing the input ExeKG task-by-task.\n\n        Args:\n            input_exe_kg_path (str): The path to the input ExeKG file.\n\n        Raises:\n            ValueError: If the input data file format is not supported.\n\n        Returns:\n            None\n        \"\"\"\n        self.exe_kg = load_exe_kg(\n            input_exe_kg_path, self.create_exe_kg_from_json if input_exe_kg_path.endswith(\".json\") else None\n        )\n\n        self.input_kg += self.exe_kg\n        check_kg_executability(self.input_kg, self.shacl_shapes_s)\n\n        pipeline_iri, input_data_path, plots_output_dir, next_task_iri = get_pipeline_and_first_task_iri(\n            self.input_kg, self.top_level_schema.namespace_prefix\n        )\n        if input_data_path.endswith(\".csv\"):\n            input_data = pd.read_csv(input_data_path, delimiter=\",\", encoding=\"ISO-8859-1\")\n        elif input_data_path.endswith(\".pq\") or input_data_path.endswith(\".parquet\"):\n            input_data = pd.read_parquet(input_data_path)\n        else:\n            raise ValueError(f\"Unsupported file format for input data: {input_data_path}\")\n\n        canvas_task = None  # stores Task object that corresponds to a task of type CanvasTask\n        task_output_dict = {}  # gradually filled with outputs of executed tasks\n        while next_task_iri is not None:\n            try:\n                next_task = self._parse_task_by_iri(next_task_iri, plots_output_dir, canvas_task)\n            except NoResultsError as e:\n                raise RuntimeError(f\"{e}\\n\\nParsing of task with IRI {next_task_iri} failed with the above exception\")\n\n            try:\n                output = next_task.run_method(task_output_dict, input_data)\n            except NotImplementedError as e:\n                raise RuntimeError(\n                    f\"{e}\\n\\nExecution of method for task {next_task_iri} failed with the above exception\"\n                )\n\n            if output:\n                task_output_dict.update(output)\n\n            if next_task.type == \"CanvasCreation\":\n                canvas_task = next_task\n\n            next_task_iri = next_task.next_task\n\n        update_metric_values(\n            self.exe_kg,\n            task_output_dict,\n            self.bottom_level_schemata[\"ml\"].namespace,\n            self.top_level_schema.namespace,\n        )\n\n        save_exe_kg(\n            self.exe_kg,\n            self.input_kg,\n            self.shacl_shapes_s,\n            None,\n            os.path.dirname(input_exe_kg_path),\n            pipeline_iri.split(\"#\")[-1],\n            check_executability=False,\n            save_to_json=False,\n        )\n</code></pre>"},{"location":"reference/classes/exe_kg_mixins/exe_kg_execution_mixin/#exe_kg_lib.classes.exe_kg_mixins.exe_kg_execution_mixin.ExeKGExecutionMixin.execute_pipeline","title":"<code>execute_pipeline(input_exe_kg_path)</code>","text":"<p>Executes the pipeline by parsing the input ExeKG task-by-task.</p> <p>Parameters:</p> Name Type Description Default <code>input_exe_kg_path</code> <code>str</code> <p>The path to the input ExeKG file.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the input data file format is not supported.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>exe_kg_lib/classes/exe_kg_mixins/exe_kg_execution_mixin.py</code> <pre><code>def execute_pipeline(self, input_exe_kg_path: str) -&gt; None:\n    \"\"\"\n    Executes the pipeline by parsing the input ExeKG task-by-task.\n\n    Args:\n        input_exe_kg_path (str): The path to the input ExeKG file.\n\n    Raises:\n        ValueError: If the input data file format is not supported.\n\n    Returns:\n        None\n    \"\"\"\n    self.exe_kg = load_exe_kg(\n        input_exe_kg_path, self.create_exe_kg_from_json if input_exe_kg_path.endswith(\".json\") else None\n    )\n\n    self.input_kg += self.exe_kg\n    check_kg_executability(self.input_kg, self.shacl_shapes_s)\n\n    pipeline_iri, input_data_path, plots_output_dir, next_task_iri = get_pipeline_and_first_task_iri(\n        self.input_kg, self.top_level_schema.namespace_prefix\n    )\n    if input_data_path.endswith(\".csv\"):\n        input_data = pd.read_csv(input_data_path, delimiter=\",\", encoding=\"ISO-8859-1\")\n    elif input_data_path.endswith(\".pq\") or input_data_path.endswith(\".parquet\"):\n        input_data = pd.read_parquet(input_data_path)\n    else:\n        raise ValueError(f\"Unsupported file format for input data: {input_data_path}\")\n\n    canvas_task = None  # stores Task object that corresponds to a task of type CanvasTask\n    task_output_dict = {}  # gradually filled with outputs of executed tasks\n    while next_task_iri is not None:\n        try:\n            next_task = self._parse_task_by_iri(next_task_iri, plots_output_dir, canvas_task)\n        except NoResultsError as e:\n            raise RuntimeError(f\"{e}\\n\\nParsing of task with IRI {next_task_iri} failed with the above exception\")\n\n        try:\n            output = next_task.run_method(task_output_dict, input_data)\n        except NotImplementedError as e:\n            raise RuntimeError(\n                f\"{e}\\n\\nExecution of method for task {next_task_iri} failed with the above exception\"\n            )\n\n        if output:\n            task_output_dict.update(output)\n\n        if next_task.type == \"CanvasCreation\":\n            canvas_task = next_task\n\n        next_task_iri = next_task.next_task\n\n    update_metric_values(\n        self.exe_kg,\n        task_output_dict,\n        self.bottom_level_schemata[\"ml\"].namespace,\n        self.top_level_schema.namespace,\n    )\n\n    save_exe_kg(\n        self.exe_kg,\n        self.input_kg,\n        self.shacl_shapes_s,\n        None,\n        os.path.dirname(input_exe_kg_path),\n        pipeline_iri.split(\"#\")[-1],\n        check_executability=False,\n        save_to_json=False,\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg_serialization/data_entity/","title":"data_entity","text":""},{"location":"reference/classes/exe_kg_serialization/data_entity/#exe_kg_lib.classes.exe_kg_serialization.data_entity.DataEntity","title":"<code>DataEntity</code>","text":"<p>Represents a simplified version of a data entity for serialization purposes.</p> Source code in <code>exe_kg_lib/classes/exe_kg_serialization/data_entity.py</code> <pre><code>class DataEntity:\n    \"\"\"\n    Represents a simplified version of a data entity for serialization purposes.\n    \"\"\"\n\n    def __init__(self, name: str = \"\", source: str = \"\", data_semantics: str = \"\", data_structure: str = \"\"):\n        self.name = name\n        self.source = source\n        self.data_semantics = data_semantics\n        self.data_structure = data_structure\n</code></pre>"},{"location":"reference/classes/exe_kg_serialization/method/","title":"method","text":""},{"location":"reference/classes/exe_kg_serialization/method/#exe_kg_lib.classes.exe_kg_serialization.method.Method","title":"<code>Method</code>","text":"<p>Represents a simplified version of a method for serialization purposes.</p> Source code in <code>exe_kg_lib/classes/exe_kg_serialization/method.py</code> <pre><code>class Method:\n    \"\"\"\n    Represents a simplified version of a method for serialization purposes.\n    \"\"\"\n\n    def __init__(self, method_type: str, params_dict: Dict[str, Union[str, int, float, dict]]):\n        self.method_type = method_type\n        self.params_dict = params_dict\n</code></pre>"},{"location":"reference/classes/exe_kg_serialization/pipeline/","title":"pipeline","text":""},{"location":"reference/classes/exe_kg_serialization/pipeline/#exe_kg_lib.classes.exe_kg_serialization.pipeline.Pipeline","title":"<code>Pipeline</code>","text":"<p>Represents a simplified version of a pipeline for serialization purposes. Can be converted to and from JSON.</p> Source code in <code>exe_kg_lib/classes/exe_kg_serialization/pipeline.py</code> <pre><code>class Pipeline:\n    \"\"\"\n    Represents a simplified version of a pipeline for serialization purposes. Can be converted to and from JSON.\n    \"\"\"\n\n    def __init__(\n        self,\n        name: str = \"\",\n        input_data_path: str = \"\",\n        output_plots_dir: str = \"\",\n        data_entities: List[DataEntitySerializable] = None,\n        tasks: List[TaskSerializable] = None,\n    ):\n        \"\"\"\n        Initializes a Pipeline object.\n\n        Args:\n            name (str): The name of the pipeline.\n            input_data_path (str): The path to the input dataset.\n            output_plots_dir (str): The directory to save output plots.\n            data_entities (List[DataEntitySerializable]): A list of data entities.\n            tasks (List[TaskSerializable]): A list of tasks.\n        \"\"\"\n        self.name = name\n        self.input_data_path = input_data_path\n        self.output_plots_dir = output_plots_dir\n\n        if data_entities is None:\n            data_entities = []\n        self.data_entities = data_entities\n\n        if tasks is None:\n            tasks = []\n        self.tasks = tasks\n\n    @classmethod\n    def from_json(cls, source: Union[Path, TextIOWrapper, str]):\n        \"\"\"\n        Deserializes a JSON source and creates an instance of the class.\n\n        Args:\n            source (Union[Path, TextIOWrapper, str]): The JSON source containing the pipeline.\n\n        Returns:\n            cls: An instance of the class with the deserialized data.\n        \"\"\"\n        obj_dict = None\n        try:\n            # if source is a path\n            if isinstance(source, TextIOWrapper):\n                obj_dict = json.load(source)\n            elif isinstance(source, Path) or Path(str(source)).exists():\n                with open(source) as file:\n                    obj_dict = json.load(file)\n        except OSError:\n            pass\n\n        if obj_dict is None and isinstance(source, str):\n            obj_dict = json.loads(source)\n\n        if obj_dict is None:\n            raise ValueError(\"Invalid source type. Must be a valid Path, TextIOWrapper, or str.\")\n\n        data_entities = []\n        for data_entity_dict in obj_dict[\"data_entities\"]:\n            data_entity = DataEntitySerializable()\n            data_entity.__dict__ = data_entity_dict\n            data_entities.append(data_entity)\n\n        tasks = []\n        for task_dict in obj_dict[\"tasks\"]:\n            task = TaskSerializable.from_dict(task_dict)\n            tasks.append(task)\n\n        return cls(obj_dict[\"name\"], obj_dict[\"input_data_path\"], obj_dict[\"output_plots_dir\"], data_entities, tasks)\n\n    def to_json(self) -&gt; str:\n        \"\"\"\n        Converts the Pipeline object to a JSON string.\n\n        Returns:\n            str: The JSON representation of the Pipeline object.\n        \"\"\"\n        obj_dict = self.__dict__\n        obj_dict[\"data_entities\"] = [data_entity.__dict__ for data_entity in self.data_entities]\n        obj_dict[\"tasks\"] = [task.to_dict() for task in self.tasks]\n        return json.dumps(obj_dict, indent=4)\n\n    def add_data_entity(self, name: str, source_value: str, data_semantics_name: str, data_structure_name: str):\n        \"\"\"\n        Adds a data entity to the pipeline.\n\n        Args:\n            name (str): The name of the data entity.\n            source_value (str): The source value of the data entity (i.e. column of the input dataset).\n            data_semantics_name (str): The name of the data semantics.\n            data_structure_name (str): The name of the data structure.\n        \"\"\"\n        data_entity_ser = DataEntitySerializable(name, source_value, data_semantics_name, data_structure_name)\n\n        self.data_entities.append(data_entity_ser)\n\n    def add_task(\n        self,\n        kg_schema_short: str,\n        task_type: str,\n        method_type: str,\n        method_params_dict: Dict[str, Union[str, int, float, dict]],\n        input_entity_dict: Dict[str, Union[List[DataEntity], Method]],\n        output_names: List[str],\n    ):\n        \"\"\"\n        Adds a task to the pipeline.\n\n        Args:\n            kg_schema_short (str): The short name of the KG schema (e.g. \"ml\" for Machine Learning).\n            task_type (str): The type of the task.\n            method_type (str): The type of the method.\n            method_params_dict (Dict[str, Union[str, int, float]]): A dictionary of method parameters.\n            input_entity_dict (Dict[str, Union[List[DataEntity], Method]]): A dictionary of input data entities.\n            output_names (List[str]): A list of output names.\n        \"\"\"\n        task_ser = TaskSerializable(kg_schema_short, task_type, method_type, method_params_dict, output_names)\n\n        for input_entity_name, input_entity_value in input_entity_dict.items():\n            if isinstance(input_entity_value, Method):  # provided input is a method\n                input_method = input_entity_value\n\n                task_ser.input_entity_info_dict[input_entity_name] = MethodSerializable(\n                    input_method.name, input_method.params_dict\n                )\n            elif isinstance(input_entity_value, list) and all(\n                isinstance(elem, DataEntity) for elem in input_entity_value\n            ):  # provided input is list of data entities\n                input_data_entity_list = input_entity_value\n                input_data_entity_names = []\n                for input_data_entity in input_data_entity_list:\n                    input_data_entity_names.append(input_data_entity.name)\n\n                task_ser.input_entity_info_dict[input_entity_name] = input_data_entity_names\n\n        self.tasks.append(task_ser)\n</code></pre>"},{"location":"reference/classes/exe_kg_serialization/pipeline/#exe_kg_lib.classes.exe_kg_serialization.pipeline.Pipeline.__init__","title":"<code>__init__(name='', input_data_path='', output_plots_dir='', data_entities=None, tasks=None)</code>","text":"<p>Initializes a Pipeline object.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the pipeline.</p> <code>''</code> <code>input_data_path</code> <code>str</code> <p>The path to the input dataset.</p> <code>''</code> <code>output_plots_dir</code> <code>str</code> <p>The directory to save output plots.</p> <code>''</code> <code>data_entities</code> <code>List[DataEntity]</code> <p>A list of data entities.</p> <code>None</code> <code>tasks</code> <code>List[Task]</code> <p>A list of tasks.</p> <code>None</code> Source code in <code>exe_kg_lib/classes/exe_kg_serialization/pipeline.py</code> <pre><code>def __init__(\n    self,\n    name: str = \"\",\n    input_data_path: str = \"\",\n    output_plots_dir: str = \"\",\n    data_entities: List[DataEntitySerializable] = None,\n    tasks: List[TaskSerializable] = None,\n):\n    \"\"\"\n    Initializes a Pipeline object.\n\n    Args:\n        name (str): The name of the pipeline.\n        input_data_path (str): The path to the input dataset.\n        output_plots_dir (str): The directory to save output plots.\n        data_entities (List[DataEntitySerializable]): A list of data entities.\n        tasks (List[TaskSerializable]): A list of tasks.\n    \"\"\"\n    self.name = name\n    self.input_data_path = input_data_path\n    self.output_plots_dir = output_plots_dir\n\n    if data_entities is None:\n        data_entities = []\n    self.data_entities = data_entities\n\n    if tasks is None:\n        tasks = []\n    self.tasks = tasks\n</code></pre>"},{"location":"reference/classes/exe_kg_serialization/pipeline/#exe_kg_lib.classes.exe_kg_serialization.pipeline.Pipeline.add_data_entity","title":"<code>add_data_entity(name, source_value, data_semantics_name, data_structure_name)</code>","text":"<p>Adds a data entity to the pipeline.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the data entity.</p> required <code>source_value</code> <code>str</code> <p>The source value of the data entity (i.e. column of the input dataset).</p> required <code>data_semantics_name</code> <code>str</code> <p>The name of the data semantics.</p> required <code>data_structure_name</code> <code>str</code> <p>The name of the data structure.</p> required Source code in <code>exe_kg_lib/classes/exe_kg_serialization/pipeline.py</code> <pre><code>def add_data_entity(self, name: str, source_value: str, data_semantics_name: str, data_structure_name: str):\n    \"\"\"\n    Adds a data entity to the pipeline.\n\n    Args:\n        name (str): The name of the data entity.\n        source_value (str): The source value of the data entity (i.e. column of the input dataset).\n        data_semantics_name (str): The name of the data semantics.\n        data_structure_name (str): The name of the data structure.\n    \"\"\"\n    data_entity_ser = DataEntitySerializable(name, source_value, data_semantics_name, data_structure_name)\n\n    self.data_entities.append(data_entity_ser)\n</code></pre>"},{"location":"reference/classes/exe_kg_serialization/pipeline/#exe_kg_lib.classes.exe_kg_serialization.pipeline.Pipeline.add_task","title":"<code>add_task(kg_schema_short, task_type, method_type, method_params_dict, input_entity_dict, output_names)</code>","text":"<p>Adds a task to the pipeline.</p> <p>Parameters:</p> Name Type Description Default <code>kg_schema_short</code> <code>str</code> <p>The short name of the KG schema (e.g. \"ml\" for Machine Learning).</p> required <code>task_type</code> <code>str</code> <p>The type of the task.</p> required <code>method_type</code> <code>str</code> <p>The type of the method.</p> required <code>method_params_dict</code> <code>Dict[str, Union[str, int, float]]</code> <p>A dictionary of method parameters.</p> required <code>input_entity_dict</code> <code>Dict[str, Union[List[DataEntity], Method]]</code> <p>A dictionary of input data entities.</p> required <code>output_names</code> <code>List[str]</code> <p>A list of output names.</p> required Source code in <code>exe_kg_lib/classes/exe_kg_serialization/pipeline.py</code> <pre><code>def add_task(\n    self,\n    kg_schema_short: str,\n    task_type: str,\n    method_type: str,\n    method_params_dict: Dict[str, Union[str, int, float, dict]],\n    input_entity_dict: Dict[str, Union[List[DataEntity], Method]],\n    output_names: List[str],\n):\n    \"\"\"\n    Adds a task to the pipeline.\n\n    Args:\n        kg_schema_short (str): The short name of the KG schema (e.g. \"ml\" for Machine Learning).\n        task_type (str): The type of the task.\n        method_type (str): The type of the method.\n        method_params_dict (Dict[str, Union[str, int, float]]): A dictionary of method parameters.\n        input_entity_dict (Dict[str, Union[List[DataEntity], Method]]): A dictionary of input data entities.\n        output_names (List[str]): A list of output names.\n    \"\"\"\n    task_ser = TaskSerializable(kg_schema_short, task_type, method_type, method_params_dict, output_names)\n\n    for input_entity_name, input_entity_value in input_entity_dict.items():\n        if isinstance(input_entity_value, Method):  # provided input is a method\n            input_method = input_entity_value\n\n            task_ser.input_entity_info_dict[input_entity_name] = MethodSerializable(\n                input_method.name, input_method.params_dict\n            )\n        elif isinstance(input_entity_value, list) and all(\n            isinstance(elem, DataEntity) for elem in input_entity_value\n        ):  # provided input is list of data entities\n            input_data_entity_list = input_entity_value\n            input_data_entity_names = []\n            for input_data_entity in input_data_entity_list:\n                input_data_entity_names.append(input_data_entity.name)\n\n            task_ser.input_entity_info_dict[input_entity_name] = input_data_entity_names\n\n    self.tasks.append(task_ser)\n</code></pre>"},{"location":"reference/classes/exe_kg_serialization/pipeline/#exe_kg_lib.classes.exe_kg_serialization.pipeline.Pipeline.from_json","title":"<code>from_json(source)</code>  <code>classmethod</code>","text":"<p>Deserializes a JSON source and creates an instance of the class.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>Union[Path, TextIOWrapper, str]</code> <p>The JSON source containing the pipeline.</p> required <p>Returns:</p> Name Type Description <code>cls</code> <p>An instance of the class with the deserialized data.</p> Source code in <code>exe_kg_lib/classes/exe_kg_serialization/pipeline.py</code> <pre><code>@classmethod\ndef from_json(cls, source: Union[Path, TextIOWrapper, str]):\n    \"\"\"\n    Deserializes a JSON source and creates an instance of the class.\n\n    Args:\n        source (Union[Path, TextIOWrapper, str]): The JSON source containing the pipeline.\n\n    Returns:\n        cls: An instance of the class with the deserialized data.\n    \"\"\"\n    obj_dict = None\n    try:\n        # if source is a path\n        if isinstance(source, TextIOWrapper):\n            obj_dict = json.load(source)\n        elif isinstance(source, Path) or Path(str(source)).exists():\n            with open(source) as file:\n                obj_dict = json.load(file)\n    except OSError:\n        pass\n\n    if obj_dict is None and isinstance(source, str):\n        obj_dict = json.loads(source)\n\n    if obj_dict is None:\n        raise ValueError(\"Invalid source type. Must be a valid Path, TextIOWrapper, or str.\")\n\n    data_entities = []\n    for data_entity_dict in obj_dict[\"data_entities\"]:\n        data_entity = DataEntitySerializable()\n        data_entity.__dict__ = data_entity_dict\n        data_entities.append(data_entity)\n\n    tasks = []\n    for task_dict in obj_dict[\"tasks\"]:\n        task = TaskSerializable.from_dict(task_dict)\n        tasks.append(task)\n\n    return cls(obj_dict[\"name\"], obj_dict[\"input_data_path\"], obj_dict[\"output_plots_dir\"], data_entities, tasks)\n</code></pre>"},{"location":"reference/classes/exe_kg_serialization/pipeline/#exe_kg_lib.classes.exe_kg_serialization.pipeline.Pipeline.to_json","title":"<code>to_json()</code>","text":"<p>Converts the Pipeline object to a JSON string.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The JSON representation of the Pipeline object.</p> Source code in <code>exe_kg_lib/classes/exe_kg_serialization/pipeline.py</code> <pre><code>def to_json(self) -&gt; str:\n    \"\"\"\n    Converts the Pipeline object to a JSON string.\n\n    Returns:\n        str: The JSON representation of the Pipeline object.\n    \"\"\"\n    obj_dict = self.__dict__\n    obj_dict[\"data_entities\"] = [data_entity.__dict__ for data_entity in self.data_entities]\n    obj_dict[\"tasks\"] = [task.to_dict() for task in self.tasks]\n    return json.dumps(obj_dict, indent=4)\n</code></pre>"},{"location":"reference/classes/exe_kg_serialization/task/","title":"task","text":""},{"location":"reference/classes/exe_kg_serialization/task/#exe_kg_lib.classes.exe_kg_serialization.task.Task","title":"<code>Task</code>","text":"<p>Represents a simplified version of a pipeline's task for serialization purposes.</p> Source code in <code>exe_kg_lib/classes/exe_kg_serialization/task.py</code> <pre><code>class Task:\n    \"\"\"\n    Represents a simplified version of a pipeline's task for serialization purposes.\n    \"\"\"\n\n    def __init__(\n        self,\n        kg_schema_short: str = \"\",\n        task_type: str = \"\",\n        method_type: str = \"\",\n        method_params_dict: Dict[str, Union[str, int, float, dict]] = None,\n        output_names: List[str] = None,\n        input_entity_info_dict: Dict[str, Union[List[str], MethodSerializable]] = None,\n    ):\n        self.kg_schema_short = kg_schema_short\n        self.task_type = task_type\n        self.method_type = method_type\n\n        if method_params_dict is None:\n            method_params_dict = {}\n        self.method_params_dict = method_params_dict\n\n        if input_entity_info_dict is None:\n            input_entity_info_dict = {}\n        self.input_entity_info_dict = (\n            input_entity_info_dict  # contains input names as keys and lists of data entity names as values\n        )\n\n        if output_names is None:\n            output_names = []\n        self.output_names = output_names\n\n    @classmethod\n    def from_dict(cls, task_dict: dict):\n        return cls(\n            kg_schema_short=task_dict[\"kg_schema_short\"],\n            task_type=task_dict[\"task_type\"],\n            method_type=task_dict[\"method_type\"],\n            method_params_dict=task_dict[\"method_params_dict\"],\n            input_entity_info_dict={\n                input_name: (\n                    MethodSerializable(input_value[\"method_type\"], input_value[\"params_dict\"])\n                    if \"method_type\" in input_value and \"params_dict\" in input_value\n                    else input_value\n                )\n                for input_name, input_value in task_dict[\"input_entity_info_dict\"].items()\n            },\n            output_names=task_dict.get(\"output_names\", None),\n        )\n\n    def to_dict(self):\n        return {\n            \"kg_schema_short\": self.kg_schema_short,\n            \"task_type\": self.task_type,\n            \"method_type\": self.method_type,\n            \"method_params_dict\": self.method_params_dict,\n            \"input_entity_info_dict\": {\n                input_name: input_value.__dict__ if isinstance(input_value, MethodSerializable) else input_value\n                for input_name, input_value in self.input_entity_info_dict.items()\n            },\n            \"output_names\": self.output_names,\n        }\n</code></pre>"},{"location":"reference/classes/tasks/ml_tasks/","title":"ml_tasks","text":""},{"location":"reference/classes/tasks/ml_tasks/#exe_kg_lib.classes.tasks.ml_tasks.Concatenation","title":"<code>Concatenation</code>","text":"<p>               Bases: <code>Task</code></p> <p>Abstraction of owl:class ml:Concatenation.</p> <p>This class represents a task for concatenating data.</p> Source code in <code>exe_kg_lib/classes/tasks/ml_tasks.py</code> <pre><code>class Concatenation(Task):\n    \"\"\"\n    Abstraction of owl:class ml:Concatenation.\n\n    This class represents a task for concatenating data.\n    \"\"\"\n\n    def run_method(self, other_task_output_dict: dict, input_data: pd.DataFrame) -&gt; Dict[str, Any]:\n        \"\"\"\n        Concatenates data. The data to use are determined by self.inputs.\n        Expects multiple input data values with name \"DataInConcatenation\".\n\n        Args:\n            other_task_output_dict (dict): A dictionary containing the output of other tasks.\n            input_data (pd.DataFrame): The input data of the ExeKG's pipeline.\n\n        Returns:\n            Dict[str, Any]: A dictionary containing the concatenated data with the key \"DataOutConcatenatedData\".\n        \"\"\"\n        input_dict = self.get_inputs(other_task_output_dict, input_data)\n        inputs = input_dict[\"DataInConcatenation\"]\n        input_values = [input[\"value\"] for input in inputs]\n\n        concatenation_result = pd.concat(input_values, axis=1)\n\n        return self.create_output_dict({\"DataOutConcatenatedData\": concatenation_result})\n</code></pre>"},{"location":"reference/classes/tasks/ml_tasks/#exe_kg_lib.classes.tasks.ml_tasks.Concatenation.run_method","title":"<code>run_method(other_task_output_dict, input_data)</code>","text":"<p>Concatenates data. The data to use are determined by self.inputs. Expects multiple input data values with name \"DataInConcatenation\".</p> <p>Parameters:</p> Name Type Description Default <code>other_task_output_dict</code> <code>dict</code> <p>A dictionary containing the output of other tasks.</p> required <code>input_data</code> <code>DataFrame</code> <p>The input data of the ExeKG's pipeline.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary containing the concatenated data with the key \"DataOutConcatenatedData\".</p> Source code in <code>exe_kg_lib/classes/tasks/ml_tasks.py</code> <pre><code>def run_method(self, other_task_output_dict: dict, input_data: pd.DataFrame) -&gt; Dict[str, Any]:\n    \"\"\"\n    Concatenates data. The data to use are determined by self.inputs.\n    Expects multiple input data values with name \"DataInConcatenation\".\n\n    Args:\n        other_task_output_dict (dict): A dictionary containing the output of other tasks.\n        input_data (pd.DataFrame): The input data of the ExeKG's pipeline.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the concatenated data with the key \"DataOutConcatenatedData\".\n    \"\"\"\n    input_dict = self.get_inputs(other_task_output_dict, input_data)\n    inputs = input_dict[\"DataInConcatenation\"]\n    input_values = [input[\"value\"] for input in inputs]\n\n    concatenation_result = pd.concat(input_values, axis=1)\n\n    return self.create_output_dict({\"DataOutConcatenatedData\": concatenation_result})\n</code></pre>"},{"location":"reference/classes/tasks/ml_tasks/#exe_kg_lib.classes.tasks.ml_tasks.DataSplitting","title":"<code>DataSplitting</code>","text":"<p>               Bases: <code>Task</code></p> <p>Abstraction of owl:class ml:DataSplitting.</p> <p>This class represents a task for splitting data.</p> Source code in <code>exe_kg_lib/classes/tasks/ml_tasks.py</code> <pre><code>class DataSplitting(Task):\n    \"\"\"\n    Abstraction of owl:class ml:DataSplitting.\n\n    This class represents a task for splitting data.\n    \"\"\"\n\n    def run_method(self, other_task_output_dict: dict, input_data: pd.DataFrame) -&gt; Dict[str, Any]:\n        \"\"\"\n        Splits the data using the splitter determined by self.method.module_chain.\n        The data to use are determined by self.inputs. Parameters to use for the splitter are in self.method.params_dict.\n        Expects one input data value with name \"DataInDataSplittingX\" and one with name \"DataInDataSplittingY\".\n\n        Args:\n            other_task_output_dict (dict): A dictionary containing the output of other tasks.\n            input_data (pd.DataFrame): The input data of the ExeKG's pipeline.\n\n        Returns:\n            Dict[str, Any]: A dictionary containing the splitted data with the keys \"DataOutSplittedTrainDataX\", \"DataOutSplittedTrainDataY\", \"DataOutSplittedTestDataX\", and \"DataOutSplittedTestDataY\".\n\n        Raises:\n            NotImplementedError: If the data splitter is not supported.\n        \"\"\"\n        input_dict = self.get_inputs(other_task_output_dict, input_data)\n        input_x = input_dict[\"DataInDataSplittingX\"][0][\"value\"]\n        input_y = input_dict[\"DataInDataSplittingY\"][0][\"value\"]\n\n        if \"TrainTestSplit\" in self.method.module_chain:\n            method_module = self.method.resolve_module(module_name_to_snakecase=True)\n        else:\n            method_module = self.method.resolve_module()\n\n        # train_x, train_y, test_x, test_y = self.abstract_method(input_x, input_y)\n        if \"sklearn\" in method_module.__module__:\n            if method_module.__name__ == \"train_test_split\":\n                train_x, test_x, train_y, test_y = method_module(input_x, input_y, **self.method.params_dict)\n                print(\"train_test_split splitting finished\")\n                return self.create_output_dict(\n                    {\n                        \"DataOutSplittedTrainDataX\": train_x,\n                        \"DataOutSplittedTrainDataY\": train_y,\n                        \"DataOutSplittedTestDataX\": test_x,\n                        \"DataOutSplittedTestDataY\": test_y,\n                    }\n                )\n            else:\n                assert isinstance(method_module, type), \"The method_module should be a class\"\n                splitter = method_module(**self.method.params_dict)\n\n                train_x_per_split = []\n                valid_x_per_split = []\n                train_y_per_split = []\n                valid_y_per_split = []\n                for train_index, valid_index in splitter.split(input_x, input_y):\n                    train_x_per_split.append(input_x.iloc[train_index])\n                    valid_x_per_split.append(input_x.iloc[valid_index])\n                    train_y_per_split.append(input_y.iloc[train_index])\n                    valid_y_per_split.append(input_y.iloc[valid_index])\n\n                print(f\"{splitter.__class__.__name__} splitting finished resulting in {len(train_x_per_split)} splits\")\n                return self.create_output_dict(\n                    {\n                        \"DataOutSplittedTrainDataX\": train_x_per_split,\n                        \"DataOutSplittedTrainDataY\": train_y_per_split,\n                        \"DataOutSplittedTestDataX\": valid_x_per_split,\n                        \"DataOutSplittedTestDataY\": valid_y_per_split,\n                    }\n                )\n        else:\n            raise NotImplementedError(\"Only sklearn data splitters are supported for now\")\n</code></pre>"},{"location":"reference/classes/tasks/ml_tasks/#exe_kg_lib.classes.tasks.ml_tasks.DataSplitting.run_method","title":"<code>run_method(other_task_output_dict, input_data)</code>","text":"<p>Splits the data using the splitter determined by self.method.module_chain. The data to use are determined by self.inputs. Parameters to use for the splitter are in self.method.params_dict. Expects one input data value with name \"DataInDataSplittingX\" and one with name \"DataInDataSplittingY\".</p> <p>Parameters:</p> Name Type Description Default <code>other_task_output_dict</code> <code>dict</code> <p>A dictionary containing the output of other tasks.</p> required <code>input_data</code> <code>DataFrame</code> <p>The input data of the ExeKG's pipeline.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary containing the splitted data with the keys \"DataOutSplittedTrainDataX\", \"DataOutSplittedTrainDataY\", \"DataOutSplittedTestDataX\", and \"DataOutSplittedTestDataY\".</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If the data splitter is not supported.</p> Source code in <code>exe_kg_lib/classes/tasks/ml_tasks.py</code> <pre><code>def run_method(self, other_task_output_dict: dict, input_data: pd.DataFrame) -&gt; Dict[str, Any]:\n    \"\"\"\n    Splits the data using the splitter determined by self.method.module_chain.\n    The data to use are determined by self.inputs. Parameters to use for the splitter are in self.method.params_dict.\n    Expects one input data value with name \"DataInDataSplittingX\" and one with name \"DataInDataSplittingY\".\n\n    Args:\n        other_task_output_dict (dict): A dictionary containing the output of other tasks.\n        input_data (pd.DataFrame): The input data of the ExeKG's pipeline.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the splitted data with the keys \"DataOutSplittedTrainDataX\", \"DataOutSplittedTrainDataY\", \"DataOutSplittedTestDataX\", and \"DataOutSplittedTestDataY\".\n\n    Raises:\n        NotImplementedError: If the data splitter is not supported.\n    \"\"\"\n    input_dict = self.get_inputs(other_task_output_dict, input_data)\n    input_x = input_dict[\"DataInDataSplittingX\"][0][\"value\"]\n    input_y = input_dict[\"DataInDataSplittingY\"][0][\"value\"]\n\n    if \"TrainTestSplit\" in self.method.module_chain:\n        method_module = self.method.resolve_module(module_name_to_snakecase=True)\n    else:\n        method_module = self.method.resolve_module()\n\n    # train_x, train_y, test_x, test_y = self.abstract_method(input_x, input_y)\n    if \"sklearn\" in method_module.__module__:\n        if method_module.__name__ == \"train_test_split\":\n            train_x, test_x, train_y, test_y = method_module(input_x, input_y, **self.method.params_dict)\n            print(\"train_test_split splitting finished\")\n            return self.create_output_dict(\n                {\n                    \"DataOutSplittedTrainDataX\": train_x,\n                    \"DataOutSplittedTrainDataY\": train_y,\n                    \"DataOutSplittedTestDataX\": test_x,\n                    \"DataOutSplittedTestDataY\": test_y,\n                }\n            )\n        else:\n            assert isinstance(method_module, type), \"The method_module should be a class\"\n            splitter = method_module(**self.method.params_dict)\n\n            train_x_per_split = []\n            valid_x_per_split = []\n            train_y_per_split = []\n            valid_y_per_split = []\n            for train_index, valid_index in splitter.split(input_x, input_y):\n                train_x_per_split.append(input_x.iloc[train_index])\n                valid_x_per_split.append(input_x.iloc[valid_index])\n                train_y_per_split.append(input_y.iloc[train_index])\n                valid_y_per_split.append(input_y.iloc[valid_index])\n\n            print(f\"{splitter.__class__.__name__} splitting finished resulting in {len(train_x_per_split)} splits\")\n            return self.create_output_dict(\n                {\n                    \"DataOutSplittedTrainDataX\": train_x_per_split,\n                    \"DataOutSplittedTrainDataY\": train_y_per_split,\n                    \"DataOutSplittedTestDataX\": valid_x_per_split,\n                    \"DataOutSplittedTestDataY\": valid_y_per_split,\n                }\n            )\n    else:\n        raise NotImplementedError(\"Only sklearn data splitters are supported for now\")\n</code></pre>"},{"location":"reference/classes/tasks/ml_tasks/#exe_kg_lib.classes.tasks.ml_tasks.PerformanceCalculation","title":"<code>PerformanceCalculation</code>","text":"<p>               Bases: <code>Task</code></p> <p>Abstraction of owl:class ml:PerformanceCalculation.</p> <p>This class represents a task for calculating the performance of a machine learning model.</p> Source code in <code>exe_kg_lib/classes/tasks/ml_tasks.py</code> <pre><code>class PerformanceCalculation(Task):\n    \"\"\"\n    Abstraction of owl:class ml:PerformanceCalculation.\n\n    This class represents a task for calculating the performance of a machine learning model.\n    \"\"\"\n\n    def run_method(self, other_task_output_dict: dict, input_data: pd.DataFrame) -&gt; Dict[str, Any]:\n        \"\"\"\n        Calculates a score using a metric determined by self.method.module_chain.\n        The data to use are determined by self.inputs. Parameters to use for the score calculation are in self.method.params_dict.\n        Expects one input data value with name \"DataInRealY\" and one with name \"DataInPredictedY\".\n\n        Args:\n            other_task_output_dict (dict): A dictionary containing the output of other tasks.\n            input_data (pd.DataFrame): The input data of the ExeKG's pipeline.\n\n        Returns:\n            Dict[str, Any]: A dictionary containing the calculated score with the key \"DataOutScore\".\n\n        Raises:\n            NotImplementedError: If the metric is not supported.\n        \"\"\"\n        input_dict = self.get_inputs(other_task_output_dict, input_data)\n        # real_train_y = input_dict[\"DataInTrainRealY\"]\n        input_real_y = input_dict[\"DataInRealY\"][0][\"value\"]\n        # predicted_train_y = input_dict[\"DataInTrainPredictedY\"]\n        input_predicted_y = input_dict[\"DataInPredictedY\"][0][\"value\"]\n\n        method_module = self.method.resolve_module(module_name_to_snakecase=True)\n\n        if \"sklearn\" in method_module.__module__:\n            assert callable(method_module), \"The method_module should be a function\"\n            if not isinstance(input_real_y, list):\n                metric_value = method_module(input_real_y, input_predicted_y, **self.method.params_dict)\n            else:\n                # multiple splits\n                metric_values = [\n                    method_module(y, p, **self.method.params_dict) for y, p in zip(input_real_y, input_predicted_y)\n                ]\n                metric_value = sum(metric_values) / len(metric_values)\n        else:\n            raise NotImplementedError(\"Only sklearn metrics are supported for now\")\n\n        return self.create_output_dict({\"DataOutScore\": metric_value})\n</code></pre>"},{"location":"reference/classes/tasks/ml_tasks/#exe_kg_lib.classes.tasks.ml_tasks.PerformanceCalculation.run_method","title":"<code>run_method(other_task_output_dict, input_data)</code>","text":"<p>Calculates a score using a metric determined by self.method.module_chain. The data to use are determined by self.inputs. Parameters to use for the score calculation are in self.method.params_dict. Expects one input data value with name \"DataInRealY\" and one with name \"DataInPredictedY\".</p> <p>Parameters:</p> Name Type Description Default <code>other_task_output_dict</code> <code>dict</code> <p>A dictionary containing the output of other tasks.</p> required <code>input_data</code> <code>DataFrame</code> <p>The input data of the ExeKG's pipeline.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary containing the calculated score with the key \"DataOutScore\".</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If the metric is not supported.</p> Source code in <code>exe_kg_lib/classes/tasks/ml_tasks.py</code> <pre><code>def run_method(self, other_task_output_dict: dict, input_data: pd.DataFrame) -&gt; Dict[str, Any]:\n    \"\"\"\n    Calculates a score using a metric determined by self.method.module_chain.\n    The data to use are determined by self.inputs. Parameters to use for the score calculation are in self.method.params_dict.\n    Expects one input data value with name \"DataInRealY\" and one with name \"DataInPredictedY\".\n\n    Args:\n        other_task_output_dict (dict): A dictionary containing the output of other tasks.\n        input_data (pd.DataFrame): The input data of the ExeKG's pipeline.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the calculated score with the key \"DataOutScore\".\n\n    Raises:\n        NotImplementedError: If the metric is not supported.\n    \"\"\"\n    input_dict = self.get_inputs(other_task_output_dict, input_data)\n    # real_train_y = input_dict[\"DataInTrainRealY\"]\n    input_real_y = input_dict[\"DataInRealY\"][0][\"value\"]\n    # predicted_train_y = input_dict[\"DataInTrainPredictedY\"]\n    input_predicted_y = input_dict[\"DataInPredictedY\"][0][\"value\"]\n\n    method_module = self.method.resolve_module(module_name_to_snakecase=True)\n\n    if \"sklearn\" in method_module.__module__:\n        assert callable(method_module), \"The method_module should be a function\"\n        if not isinstance(input_real_y, list):\n            metric_value = method_module(input_real_y, input_predicted_y, **self.method.params_dict)\n        else:\n            # multiple splits\n            metric_values = [\n                method_module(y, p, **self.method.params_dict) for y, p in zip(input_real_y, input_predicted_y)\n            ]\n            metric_value = sum(metric_values) / len(metric_values)\n    else:\n        raise NotImplementedError(\"Only sklearn metrics are supported for now\")\n\n    return self.create_output_dict({\"DataOutScore\": metric_value})\n</code></pre>"},{"location":"reference/classes/tasks/ml_tasks/#exe_kg_lib.classes.tasks.ml_tasks.PrepareTransformer","title":"<code>PrepareTransformer</code>","text":"<p>               Bases: <code>Task</code></p> <p>Abstraction of owl:class ml:PrepareTransformer.</p> <p>This class represents a task for preparing a data transformer.</p> Source code in <code>exe_kg_lib/classes/tasks/ml_tasks.py</code> <pre><code>class PrepareTransformer(Task):\n    \"\"\"\n    Abstraction of owl:class ml:PrepareTransformer.\n\n    This class represents a task for preparing a data transformer.\n    \"\"\"\n\n    def run_method(self, other_task_output_dict: dict, input_data: pd.DataFrame) -&gt; Dict[str, Any]:\n        \"\"\"\n        Prepares the transformer determined by self.method.module_chain.\n        The data to use are determined by self.inputs. Parameters to use for the transformer are in self.method.params_dict.\n        Expects one input data value with name \"DataInToPrepareTransformer\".\n\n        Args:\n            other_task_output_dict (dict): A dictionary containing the output of other tasks.\n            input_data (pd.DataFrame): The input data of the ExeKG's pipeline.\n\n        Returns:\n            Dict[str, Any]: A dictionary containing the transformer with the key \"DataOutTransformer\".\n\n        Raises:\n            NotImplementedError: If the transformer is not supported.\n        \"\"\"\n        input_dict = self.get_inputs(other_task_output_dict, input_data)\n        input = input_dict[\"DataInToPrepareTransformer\"][0][\"value\"]\n\n        method_module = self.method.resolve_module()\n        if \"sklearn\" in method_module.__module__:\n            assert isinstance(method_module, type), \"The method_module should be a class\"\n            transformer = method_module(**self.method.params_dict)\n\n            if not isinstance(input, list):\n                transformer.fit(input)\n            else:\n                # multiple splits\n                for input_part in input:\n                    transformer.fit(input_part)\n\n            print(f\"{transformer.__class__.__name__} transforming finished\")\n        else:\n            raise NotImplementedError(\"Only sklearn data transformers are supported for now\")\n\n        return self.create_output_dict({\"DataOutTransformer\": transformer})\n</code></pre>"},{"location":"reference/classes/tasks/ml_tasks/#exe_kg_lib.classes.tasks.ml_tasks.PrepareTransformer.run_method","title":"<code>run_method(other_task_output_dict, input_data)</code>","text":"<p>Prepares the transformer determined by self.method.module_chain. The data to use are determined by self.inputs. Parameters to use for the transformer are in self.method.params_dict. Expects one input data value with name \"DataInToPrepareTransformer\".</p> <p>Parameters:</p> Name Type Description Default <code>other_task_output_dict</code> <code>dict</code> <p>A dictionary containing the output of other tasks.</p> required <code>input_data</code> <code>DataFrame</code> <p>The input data of the ExeKG's pipeline.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary containing the transformer with the key \"DataOutTransformer\".</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If the transformer is not supported.</p> Source code in <code>exe_kg_lib/classes/tasks/ml_tasks.py</code> <pre><code>def run_method(self, other_task_output_dict: dict, input_data: pd.DataFrame) -&gt; Dict[str, Any]:\n    \"\"\"\n    Prepares the transformer determined by self.method.module_chain.\n    The data to use are determined by self.inputs. Parameters to use for the transformer are in self.method.params_dict.\n    Expects one input data value with name \"DataInToPrepareTransformer\".\n\n    Args:\n        other_task_output_dict (dict): A dictionary containing the output of other tasks.\n        input_data (pd.DataFrame): The input data of the ExeKG's pipeline.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the transformer with the key \"DataOutTransformer\".\n\n    Raises:\n        NotImplementedError: If the transformer is not supported.\n    \"\"\"\n    input_dict = self.get_inputs(other_task_output_dict, input_data)\n    input = input_dict[\"DataInToPrepareTransformer\"][0][\"value\"]\n\n    method_module = self.method.resolve_module()\n    if \"sklearn\" in method_module.__module__:\n        assert isinstance(method_module, type), \"The method_module should be a class\"\n        transformer = method_module(**self.method.params_dict)\n\n        if not isinstance(input, list):\n            transformer.fit(input)\n        else:\n            # multiple splits\n            for input_part in input:\n                transformer.fit(input_part)\n\n        print(f\"{transformer.__class__.__name__} transforming finished\")\n    else:\n        raise NotImplementedError(\"Only sklearn data transformers are supported for now\")\n\n    return self.create_output_dict({\"DataOutTransformer\": transformer})\n</code></pre>"},{"location":"reference/classes/tasks/ml_tasks/#exe_kg_lib.classes.tasks.ml_tasks.Test","title":"<code>Test</code>","text":"<p>               Bases: <code>Task</code></p> <p>Abstraction of owl:class ml:Test.</p> <p>This class represents a test task for machine learning models.</p> Source code in <code>exe_kg_lib/classes/tasks/ml_tasks.py</code> <pre><code>class Test(Task):\n    \"\"\"\n    Abstraction of owl:class ml:Test.\n\n    This class represents a test task for machine learning models.\n    \"\"\"\n\n    def run_method(self, other_task_output_dict: dict, input_data: pd.DataFrame):\n        \"\"\"\n        Tests the machine learning model.\n        The model and data to use are determined by self.inputs.\n        Expects one input data value with name \"DataInTestModel\" and one with name \"DataInTestX\".\n\n        Args:\n            other_task_output_dict (dict): A dictionary containing the output of other tasks.\n            input_data (pd.DataFrame): The input data of the ExeKG's pipeline.\n\n        Returns:\n            dict: A dictionary containing the predicted values with the key \"DataOutPredictedValueTest\".\n\n        Raises:\n            NotImplementedError: If the model is not supported.\n        \"\"\"\n        input_dict = self.get_inputs(other_task_output_dict, input_data)\n        model = input_dict[\"DataInTestModel\"][0][\"value\"]\n        input_x = input_dict[\"DataInTestX\"][0][\"value\"]\n\n        # check if model belongs to sklearn library\n        if \"sklearn\" in model.__module__:\n            if not isinstance(input_x, list):\n                predicted_y = model.predict(input_x)\n            else:\n                # multiple splits\n                predicted_y = [model.predict(x) for x in input_x]\n        else:\n            raise NotImplementedError(\"Only sklearn models are supported for now\")\n\n        print(f\"{model.__class__.__name__} testing finished\")\n\n        return self.create_output_dict({\"DataOutPredictedValueTest\": predicted_y})\n</code></pre>"},{"location":"reference/classes/tasks/ml_tasks/#exe_kg_lib.classes.tasks.ml_tasks.Test.run_method","title":"<code>run_method(other_task_output_dict, input_data)</code>","text":"<p>Tests the machine learning model. The model and data to use are determined by self.inputs. Expects one input data value with name \"DataInTestModel\" and one with name \"DataInTestX\".</p> <p>Parameters:</p> Name Type Description Default <code>other_task_output_dict</code> <code>dict</code> <p>A dictionary containing the output of other tasks.</p> required <code>input_data</code> <code>DataFrame</code> <p>The input data of the ExeKG's pipeline.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary containing the predicted values with the key \"DataOutPredictedValueTest\".</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If the model is not supported.</p> Source code in <code>exe_kg_lib/classes/tasks/ml_tasks.py</code> <pre><code>def run_method(self, other_task_output_dict: dict, input_data: pd.DataFrame):\n    \"\"\"\n    Tests the machine learning model.\n    The model and data to use are determined by self.inputs.\n    Expects one input data value with name \"DataInTestModel\" and one with name \"DataInTestX\".\n\n    Args:\n        other_task_output_dict (dict): A dictionary containing the output of other tasks.\n        input_data (pd.DataFrame): The input data of the ExeKG's pipeline.\n\n    Returns:\n        dict: A dictionary containing the predicted values with the key \"DataOutPredictedValueTest\".\n\n    Raises:\n        NotImplementedError: If the model is not supported.\n    \"\"\"\n    input_dict = self.get_inputs(other_task_output_dict, input_data)\n    model = input_dict[\"DataInTestModel\"][0][\"value\"]\n    input_x = input_dict[\"DataInTestX\"][0][\"value\"]\n\n    # check if model belongs to sklearn library\n    if \"sklearn\" in model.__module__:\n        if not isinstance(input_x, list):\n            predicted_y = model.predict(input_x)\n        else:\n            # multiple splits\n            predicted_y = [model.predict(x) for x in input_x]\n    else:\n        raise NotImplementedError(\"Only sklearn models are supported for now\")\n\n    print(f\"{model.__class__.__name__} testing finished\")\n\n    return self.create_output_dict({\"DataOutPredictedValueTest\": predicted_y})\n</code></pre>"},{"location":"reference/classes/tasks/ml_tasks/#exe_kg_lib.classes.tasks.ml_tasks.Train","title":"<code>Train</code>","text":"<p>               Bases: <code>Task</code></p> <p>Abstraction of owl:class ml:Train.</p> <p>This class represents a training task for machine learning models.</p> Source code in <code>exe_kg_lib/classes/tasks/ml_tasks.py</code> <pre><code>class Train(Task):\n    \"\"\"\n    Abstraction of owl:class ml:Train.\n\n    This class represents a training task for machine learning models.\n    \"\"\"\n\n    def run_method(self, other_task_output_dict: dict, input_data: pd.DataFrame):\n        \"\"\"\n        Trains the machine learning model determined by self.method.module_chain.\n        The data to use are determined by self.inputs. Parameters to use for the model are in self.method.params_dict.\n        Expects one input data value with name \"DataInTrainX\" and one with name \"DataInTrainY\".\n\n        Args:\n            other_task_output_dict (dict): A dictionary containing the output of other tasks.\n            input_data (pd.DataFrame): The input data of the ExeKG's pipeline.\n\n        Returns:\n            dict: A dictionary containing the trained model with the key \"DataOutTrainModel\".\n\n        Raises:\n            NotImplementedError: If the model is not supported.\n        \"\"\"\n        input_dict = self.get_inputs(other_task_output_dict, input_data)\n        input_x = input_dict[\"DataInTrainX\"][0][\"value\"]\n        input_y = input_dict[\"DataInTrainY\"][0][\"value\"]\n        input_model_as_method = None\n        # check if input dict contains a method representing an ML model to be optimized\n        if \"InputModelAsMethod\" in input_dict:\n            input_model_as_method = input_dict[\"InputModelAsMethod\"][0][\"value\"]\n            input_model_as_method_module = input_model_as_method.resolve_module()\n\n        method_module = self.method.resolve_module()\n        if \"sklearn\" in method_module.__module__:\n            assert isinstance(method_module, type), \"The method_module should be a class\"\n            if input_model_as_method:\n                # HPO (e.g. GridSearchCV) or Boosting (e.g. AdaBoostClassifier)\n                model = method_module(\n                    input_model_as_method_module(**input_model_as_method.params_dict),\n                    **self.method.params_dict,\n                )\n            else:\n                # normal training\n                model = method_module(**self.method.params_dict)\n\n            if not isinstance(input_x, list):\n                model.fit(input_x, input_y)\n            else:\n                # multiple splits\n                for x, y in zip(input_x, input_y):\n                    model.fit(x, y)\n\n            print(f\"{model.__class__.__name__} training finished\")\n        else:\n            raise NotImplementedError(\"Only sklearn models are supported for now\")\n\n        return self.create_output_dict({\"DataOutTrainModel\": model})\n</code></pre>"},{"location":"reference/classes/tasks/ml_tasks/#exe_kg_lib.classes.tasks.ml_tasks.Train.run_method","title":"<code>run_method(other_task_output_dict, input_data)</code>","text":"<p>Trains the machine learning model determined by self.method.module_chain. The data to use are determined by self.inputs. Parameters to use for the model are in self.method.params_dict. Expects one input data value with name \"DataInTrainX\" and one with name \"DataInTrainY\".</p> <p>Parameters:</p> Name Type Description Default <code>other_task_output_dict</code> <code>dict</code> <p>A dictionary containing the output of other tasks.</p> required <code>input_data</code> <code>DataFrame</code> <p>The input data of the ExeKG's pipeline.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary containing the trained model with the key \"DataOutTrainModel\".</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If the model is not supported.</p> Source code in <code>exe_kg_lib/classes/tasks/ml_tasks.py</code> <pre><code>def run_method(self, other_task_output_dict: dict, input_data: pd.DataFrame):\n    \"\"\"\n    Trains the machine learning model determined by self.method.module_chain.\n    The data to use are determined by self.inputs. Parameters to use for the model are in self.method.params_dict.\n    Expects one input data value with name \"DataInTrainX\" and one with name \"DataInTrainY\".\n\n    Args:\n        other_task_output_dict (dict): A dictionary containing the output of other tasks.\n        input_data (pd.DataFrame): The input data of the ExeKG's pipeline.\n\n    Returns:\n        dict: A dictionary containing the trained model with the key \"DataOutTrainModel\".\n\n    Raises:\n        NotImplementedError: If the model is not supported.\n    \"\"\"\n    input_dict = self.get_inputs(other_task_output_dict, input_data)\n    input_x = input_dict[\"DataInTrainX\"][0][\"value\"]\n    input_y = input_dict[\"DataInTrainY\"][0][\"value\"]\n    input_model_as_method = None\n    # check if input dict contains a method representing an ML model to be optimized\n    if \"InputModelAsMethod\" in input_dict:\n        input_model_as_method = input_dict[\"InputModelAsMethod\"][0][\"value\"]\n        input_model_as_method_module = input_model_as_method.resolve_module()\n\n    method_module = self.method.resolve_module()\n    if \"sklearn\" in method_module.__module__:\n        assert isinstance(method_module, type), \"The method_module should be a class\"\n        if input_model_as_method:\n            # HPO (e.g. GridSearchCV) or Boosting (e.g. AdaBoostClassifier)\n            model = method_module(\n                input_model_as_method_module(**input_model_as_method.params_dict),\n                **self.method.params_dict,\n            )\n        else:\n            # normal training\n            model = method_module(**self.method.params_dict)\n\n        if not isinstance(input_x, list):\n            model.fit(input_x, input_y)\n        else:\n            # multiple splits\n            for x, y in zip(input_x, input_y):\n                model.fit(x, y)\n\n        print(f\"{model.__class__.__name__} training finished\")\n    else:\n        raise NotImplementedError(\"Only sklearn models are supported for now\")\n\n    return self.create_output_dict({\"DataOutTrainModel\": model})\n</code></pre>"},{"location":"reference/classes/tasks/ml_tasks/#exe_kg_lib.classes.tasks.ml_tasks.Transform","title":"<code>Transform</code>","text":"<p>               Bases: <code>Task</code></p> <p>Abstraction of owl:class ml:Transform.</p> <p>This class represents a task for transforming data.</p> Source code in <code>exe_kg_lib/classes/tasks/ml_tasks.py</code> <pre><code>class Transform(Task):\n    \"\"\"\n    Abstraction of owl:class ml:Transform.\n\n    This class represents a task for transforming data.\n    \"\"\"\n\n    def run_method(self, other_task_output_dict: dict, input_data: pd.DataFrame) -&gt; Dict[str, Any]:\n        \"\"\"\n        Applies a transformation to the data.\n        The model and data to use are determined by self.inputs.\n        Expects one input data value with name \"DataInTransformer\" and one with name \"DataInToTransform\".\n\n        Args:\n            other_task_output_dict (dict): A dictionary containing the output of other tasks.\n            input_data (pd.DataFrame): The input data of the ExeKG's pipeline.\n\n        Returns:\n            Dict[str, Any]: A dictionary containing the transformed data with the key \"DataOutTransformed\".\n\n        Raises:\n            NotImplementedError: If the transformer is not supported.\n        \"\"\"\n        input_dict = self.get_inputs(other_task_output_dict, input_data)\n        transformer = input_dict[\"DataInTransformer\"][0][\"value\"]\n        input = input_dict[\"DataInToTransform\"][0][\"value\"]\n\n        # check if model belongs to sklearn library\n        if \"sklearn\" in transformer.__module__:\n            if not isinstance(input, list):\n                transformed_input = transformer.transform(input)\n            else:  # multiple splits\n                transformed_input = [\n                    transformer.transform(x) for x in input\n                ]  # NOTE: it can be that the transformer will try to trasform unseen data, which will raise an error. e.g. if OneHotEncoder is used, one chunk of input may have a category that is not present in another chunk of input\n\n        else:\n            raise NotImplementedError(\"Only sklearn data transformers are supported for now\")\n\n        print(f\"{transformer.__class__.__name__} transforming finished\")\n\n        return self.create_output_dict({\"DataOutTransformed\": transformed_input})\n</code></pre>"},{"location":"reference/classes/tasks/ml_tasks/#exe_kg_lib.classes.tasks.ml_tasks.Transform.run_method","title":"<code>run_method(other_task_output_dict, input_data)</code>","text":"<p>Applies a transformation to the data. The model and data to use are determined by self.inputs. Expects one input data value with name \"DataInTransformer\" and one with name \"DataInToTransform\".</p> <p>Parameters:</p> Name Type Description Default <code>other_task_output_dict</code> <code>dict</code> <p>A dictionary containing the output of other tasks.</p> required <code>input_data</code> <code>DataFrame</code> <p>The input data of the ExeKG's pipeline.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary containing the transformed data with the key \"DataOutTransformed\".</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If the transformer is not supported.</p> Source code in <code>exe_kg_lib/classes/tasks/ml_tasks.py</code> <pre><code>def run_method(self, other_task_output_dict: dict, input_data: pd.DataFrame) -&gt; Dict[str, Any]:\n    \"\"\"\n    Applies a transformation to the data.\n    The model and data to use are determined by self.inputs.\n    Expects one input data value with name \"DataInTransformer\" and one with name \"DataInToTransform\".\n\n    Args:\n        other_task_output_dict (dict): A dictionary containing the output of other tasks.\n        input_data (pd.DataFrame): The input data of the ExeKG's pipeline.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the transformed data with the key \"DataOutTransformed\".\n\n    Raises:\n        NotImplementedError: If the transformer is not supported.\n    \"\"\"\n    input_dict = self.get_inputs(other_task_output_dict, input_data)\n    transformer = input_dict[\"DataInTransformer\"][0][\"value\"]\n    input = input_dict[\"DataInToTransform\"][0][\"value\"]\n\n    # check if model belongs to sklearn library\n    if \"sklearn\" in transformer.__module__:\n        if not isinstance(input, list):\n            transformed_input = transformer.transform(input)\n        else:  # multiple splits\n            transformed_input = [\n                transformer.transform(x) for x in input\n            ]  # NOTE: it can be that the transformer will try to trasform unseen data, which will raise an error. e.g. if OneHotEncoder is used, one chunk of input may have a category that is not present in another chunk of input\n\n    else:\n        raise NotImplementedError(\"Only sklearn data transformers are supported for now\")\n\n    print(f\"{transformer.__class__.__name__} transforming finished\")\n\n    return self.create_output_dict({\"DataOutTransformed\": transformed_input})\n</code></pre>"},{"location":"reference/classes/tasks/statistic_tasks/","title":"statistic_tasks","text":""},{"location":"reference/classes/tasks/statistic_tasks/#exe_kg_lib.classes.tasks.statistic_tasks.StatisticCalculation","title":"<code>StatisticCalculation</code>","text":"<p>               Bases: <code>Task</code></p> <p>Abstraction of owl:class stats:StatisticCalculation.</p> <p>This class represents a task for calculating a statistic.</p> Source code in <code>exe_kg_lib/classes/tasks/statistic_tasks.py</code> <pre><code>class StatisticCalculation(Task):\n    \"\"\"\n    Abstraction of owl:class stats:StatisticCalculation.\n\n    This class represents a task for calculating a statistic.\n    \"\"\"\n\n    @abstractmethod\n    def run_method(self, other_task_output_dict: dict, input_data: pd.DataFrame) -&gt; Dict[str, Any]:\n        \"\"\"\n        Calculates a statistic. The data to use are determined by self.inputs.\n        Expects one input data value with name \"DataInStatisticCalculation\".\n\n        Args:\n            other_task_output_dict (dict): A dictionary containing the output of other tasks.\n            input_data (pd.DataFrame): The input data of the ExeKG's pipeline.\n\n        Returns:\n            Dict[str, Any]: A dictionary containing the calculated statistic with the key \"DataOutStatisticCalculation\".\n\n        Raises:\n            NotImplementedError: If the statistic is not supported.\n        \"\"\"\n        input_dict = self.get_inputs(other_task_output_dict, input_data)\n        input_data = input_dict[\"DataInStatisticCalculation\"]\n        input = input_data[0][\"value\"]  # assume one input\n\n        method_module = self.method.resolve_module(module_name_to_snakecase=True)\n        if \"numpy\" in method_module.__module__:\n            statistic_result = method_module(input, **self.method.params_dict)\n            return self.create_output_dict({\"DataOutStatisticCalculation\": statistic_result})\n        else:\n            raise NotImplementedError(\"Only numpy library is supported for now\")\n</code></pre>"},{"location":"reference/classes/tasks/statistic_tasks/#exe_kg_lib.classes.tasks.statistic_tasks.StatisticCalculation.run_method","title":"<code>run_method(other_task_output_dict, input_data)</code>  <code>abstractmethod</code>","text":"<p>Calculates a statistic. The data to use are determined by self.inputs. Expects one input data value with name \"DataInStatisticCalculation\".</p> <p>Parameters:</p> Name Type Description Default <code>other_task_output_dict</code> <code>dict</code> <p>A dictionary containing the output of other tasks.</p> required <code>input_data</code> <code>DataFrame</code> <p>The input data of the ExeKG's pipeline.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: A dictionary containing the calculated statistic with the key \"DataOutStatisticCalculation\".</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If the statistic is not supported.</p> Source code in <code>exe_kg_lib/classes/tasks/statistic_tasks.py</code> <pre><code>@abstractmethod\ndef run_method(self, other_task_output_dict: dict, input_data: pd.DataFrame) -&gt; Dict[str, Any]:\n    \"\"\"\n    Calculates a statistic. The data to use are determined by self.inputs.\n    Expects one input data value with name \"DataInStatisticCalculation\".\n\n    Args:\n        other_task_output_dict (dict): A dictionary containing the output of other tasks.\n        input_data (pd.DataFrame): The input data of the ExeKG's pipeline.\n\n    Returns:\n        Dict[str, Any]: A dictionary containing the calculated statistic with the key \"DataOutStatisticCalculation\".\n\n    Raises:\n        NotImplementedError: If the statistic is not supported.\n    \"\"\"\n    input_dict = self.get_inputs(other_task_output_dict, input_data)\n    input_data = input_dict[\"DataInStatisticCalculation\"]\n    input = input_data[0][\"value\"]  # assume one input\n\n    method_module = self.method.resolve_module(module_name_to_snakecase=True)\n    if \"numpy\" in method_module.__module__:\n        statistic_result = method_module(input, **self.method.params_dict)\n        return self.create_output_dict({\"DataOutStatisticCalculation\": statistic_result})\n    else:\n        raise NotImplementedError(\"Only numpy library is supported for now\")\n</code></pre>"},{"location":"reference/classes/tasks/visual_tasks/","title":"visual_tasks","text":""},{"location":"reference/classes/tasks/visual_tasks/#exe_kg_lib.classes.tasks.visual_tasks.CanvasCreation","title":"<code>CanvasCreation</code>","text":"<p>               Bases: <code>Task</code></p> <p>Abstraction of owl:class visu:CanvasCreation.</p> <p>This class represents a task for creating a canvas which can be used by Plotting tasks (defined in this file).</p> Source code in <code>exe_kg_lib/classes/tasks/visual_tasks.py</code> <pre><code>class CanvasCreation(Task):\n    \"\"\"\n    Abstraction of owl:class visu:CanvasCreation.\n\n    This class represents a task for creating a canvas which can be used by Plotting tasks (defined in this file).\n    \"\"\"\n\n    def __init__(self, iri: str, parent_entity: Entity):\n        super().__init__(iri, parent_entity)\n        self.fig = None\n        self.grid = None\n        self.current_plot_pos = 0\n        # self.layout = None\n        # self.canvas_name = None\n\n    def run_method(self, *args):\n        \"\"\"\n        Creates a \"canvas\" i.e. a figure and a grid to be used while plotting.\n        Parameters to use while creating the canvas are in self.method.params_dict.\n\n        Args:\n            *args: Variable length argument list.\n\n        Returns:\n            None\n        \"\"\"\n        n_rows, n_cols = (\n            [int(i) for i in self.method.params_dict[\"layout\"].split(\" \")]\n            if \"layout\" in self.method.params_dict\n            else (1, 1)\n        )\n\n        figsize = (\n            [int(i) for i in self.method.params_dict[\"figure_size\"].split(\" \")]\n            if \"figure_size\" in self.method.params_dict\n            else (7, 5)\n        )\n\n        self.fig = plt.figure(figsize=(figsize))\n        self.grid = None if (n_rows == n_cols and n_rows == 1) else plt.GridSpec(n_rows, n_cols, hspace=0.3, wspace=0.3)\n</code></pre>"},{"location":"reference/classes/tasks/visual_tasks/#exe_kg_lib.classes.tasks.visual_tasks.CanvasCreation.run_method","title":"<code>run_method(*args)</code>","text":"<p>Creates a \"canvas\" i.e. a figure and a grid to be used while plotting. Parameters to use while creating the canvas are in self.method.params_dict.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>Variable length argument list.</p> <code>()</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>exe_kg_lib/classes/tasks/visual_tasks.py</code> <pre><code>def run_method(self, *args):\n    \"\"\"\n    Creates a \"canvas\" i.e. a figure and a grid to be used while plotting.\n    Parameters to use while creating the canvas are in self.method.params_dict.\n\n    Args:\n        *args: Variable length argument list.\n\n    Returns:\n        None\n    \"\"\"\n    n_rows, n_cols = (\n        [int(i) for i in self.method.params_dict[\"layout\"].split(\" \")]\n        if \"layout\" in self.method.params_dict\n        else (1, 1)\n    )\n\n    figsize = (\n        [int(i) for i in self.method.params_dict[\"figure_size\"].split(\" \")]\n        if \"figure_size\" in self.method.params_dict\n        else (7, 5)\n    )\n\n    self.fig = plt.figure(figsize=(figsize))\n    self.grid = None if (n_rows == n_cols and n_rows == 1) else plt.GridSpec(n_rows, n_cols, hspace=0.3, wspace=0.3)\n</code></pre>"},{"location":"reference/classes/tasks/visual_tasks/#exe_kg_lib.classes.tasks.visual_tasks.Plotting","title":"<code>Plotting</code>","text":"<p>               Bases: <code>Task</code></p> <p>Abstraction of owl:class visu:Plotting.</p> <p>This class represents a task for creating plots.</p> Source code in <code>exe_kg_lib/classes/tasks/visual_tasks.py</code> <pre><code>class Plotting(Task):\n    \"\"\"\n    Abstraction of owl:class visu:Plotting.\n\n    This class represents a task for creating plots.\n    \"\"\"\n\n    def __init__(self, iri: str, parent_entity: Entity, plots_output_dir: str, canvas_task: CanvasCreation):\n        super().__init__(iri, parent_entity)\n        self.fig = canvas_task.fig\n        self.grid = canvas_task.grid\n        self.current_plot_pos = canvas_task.current_plot_pos\n        self.layout = canvas_task.method.params_dict[\"layout\"]\n        self.plots_output_dir = plots_output_dir\n\n        canvas_task.current_plot_pos += 1\n\n    @abstractmethod\n    def run_method(self, other_task_output_dict: dict, input_data: pd.DataFrame):\n        \"\"\"\n        Plots data.\n        The data to use are determined by self.inputs. Parameters to use for the plot method are in self.method.params_dict and self.method.inherited_params_dict.\n        Expects one/multiple input data values with name \"DataInToPlot\".\n\n        Args:\n            other_task_output_dict (dict): A dictionary containing the output of other tasks.\n            input_data (pd.DataFrame): The input data of the ExeKG's pipeline.\n\n        Returns:\n            None\n        \"\"\"\n\n        input_dict = self.get_inputs(other_task_output_dict, input_data)\n        input_data = input_dict[\"DataInToPlot\"]\n        # input_labels = input_dict[\"DataInPlotLabels\"]\n\n        method_module = self.method.resolve_module(module_name_to_snakecase=True)\n        if \"matplotlib\" in method_module.__module__:\n            plot = None\n            if self.grid is not None:\n                plot = self.fig.add_subplot(self.grid[self.current_plot_pos])\n\n            for input in input_data:\n                input_name = input[\"name\"]\n                input_value = input[\"value\"]\n\n                x = (\n                    input_value.index\n                    if isinstance(input_value, pd.DataFrame)\n                    else prettify_data_entity_name(input_name)\n                )\n\n                # assume input_value can contain either 1 column or a single number\n                y = input_value\n                if isinstance(input_value, pd.DataFrame):\n                    y = input_value[input_value.columns[0]].values\n                elif isinstance(input_value, pd.Series):\n                    y = input_value.values[0]\n\n                method_to_call = method_module if plot is None else getattr(plot, method_module.__name__)\n                method_to_call(x, y, **self.method.params_dict)\n                if plot is not None:\n                    if \"title\" in self.method.inherited_params_dict:\n                        plot.set_title(self.method.inherited_params_dict[\"title\"])\n                    if \"x_label\" in self.method.inherited_params_dict:\n                        plot.set_xlabel(self.method.inherited_params_dict[\"x_label\"])\n                    if \"y_label\" in self.method.inherited_params_dict:\n                        plot.set_ylabel(self.method.inherited_params_dict[\"y_label\"])\n                    if \"legend_name\" in self.method.inherited_params_dict:\n                        plot.legend(title=self.method.inherited_params_dict[\"legend_name\"])\n\n                    if self.method.inherited_params_dict.get(\"annotate\", False):\n                        if isinstance(input_value, pd.DataFrame):\n                            for i, y_val in enumerate(y):\n                                y_to_show = round(y_val, 3) if isinstance(y_val, float) else y_val\n                                plot.annotate(\n                                    f\"{y_val}\", (x[i], y_val), textcoords=\"offset points\", xytext=(0, 2), ha=\"center\"\n                                )\n                        else:\n                            y_to_show = round(y, 3) if isinstance(y, float) else y\n                            plot.annotate(\n                                f\"{y_to_show}\", (x, y), textcoords=\"offset points\", xytext=(0, 2), ha=\"center\"\n                            )\n\n                else:\n                    if \"title\" in self.method.inherited_params_dict:\n                        plt.title(self.method.inherited_params_dict[\"title\"])\n                    if \"x_label\" in self.method.inherited_params_dict:\n                        plt.xlabel(self.method.inherited_params_dict[\"x_label\"])\n                    if \"y_label\" in self.method.inherited_params_dict:\n                        plt.ylabel(self.method.inherited_params_dict[\"y_label\"])\n                    if \"legend_name\" in self.method.inherited_params_dict:\n                        plt.legend(title=self.method.inherited_params_dict[\"legend_name\"])\n\n                    if self.method.inherited_params_dict.get(\"annotate\", False):\n                        if isinstance(input_value, pd.DataFrame):\n                            for i, y_val in enumerate(y):\n                                y_to_show = round(y_val, 3) if isinstance(y_val, float) else y_val\n                                plt.annotate(\n                                    f\"{y_val}\", (x[i], y_val), textcoords=\"offset points\", xytext=(0, 2), ha=\"center\"\n                                )\n                        else:\n                            y_to_show = round(y, 3) if isinstance(y, float) else y\n                            plt.annotate(f\"{y_to_show}\", (x, y), textcoords=\"offset points\", xytext=(0, 2), ha=\"center\")\n\n            output_dir = Path(self.plots_output_dir)\n            output_dir.mkdir(parents=True, exist_ok=True)\n            plt.savefig(output_dir / f\"{self.name}_plot.png\")\n            print(f\"Plot saved in {output_dir / f'{self.name}_plot.png'}\")\n        else:\n            raise NotImplementedError(\"Only matplotlib library is supported for now\")\n</code></pre>"},{"location":"reference/classes/tasks/visual_tasks/#exe_kg_lib.classes.tasks.visual_tasks.Plotting.run_method","title":"<code>run_method(other_task_output_dict, input_data)</code>  <code>abstractmethod</code>","text":"<p>Plots data. The data to use are determined by self.inputs. Parameters to use for the plot method are in self.method.params_dict and self.method.inherited_params_dict. Expects one/multiple input data values with name \"DataInToPlot\".</p> <p>Parameters:</p> Name Type Description Default <code>other_task_output_dict</code> <code>dict</code> <p>A dictionary containing the output of other tasks.</p> required <code>input_data</code> <code>DataFrame</code> <p>The input data of the ExeKG's pipeline.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>exe_kg_lib/classes/tasks/visual_tasks.py</code> <pre><code>@abstractmethod\ndef run_method(self, other_task_output_dict: dict, input_data: pd.DataFrame):\n    \"\"\"\n    Plots data.\n    The data to use are determined by self.inputs. Parameters to use for the plot method are in self.method.params_dict and self.method.inherited_params_dict.\n    Expects one/multiple input data values with name \"DataInToPlot\".\n\n    Args:\n        other_task_output_dict (dict): A dictionary containing the output of other tasks.\n        input_data (pd.DataFrame): The input data of the ExeKG's pipeline.\n\n    Returns:\n        None\n    \"\"\"\n\n    input_dict = self.get_inputs(other_task_output_dict, input_data)\n    input_data = input_dict[\"DataInToPlot\"]\n    # input_labels = input_dict[\"DataInPlotLabels\"]\n\n    method_module = self.method.resolve_module(module_name_to_snakecase=True)\n    if \"matplotlib\" in method_module.__module__:\n        plot = None\n        if self.grid is not None:\n            plot = self.fig.add_subplot(self.grid[self.current_plot_pos])\n\n        for input in input_data:\n            input_name = input[\"name\"]\n            input_value = input[\"value\"]\n\n            x = (\n                input_value.index\n                if isinstance(input_value, pd.DataFrame)\n                else prettify_data_entity_name(input_name)\n            )\n\n            # assume input_value can contain either 1 column or a single number\n            y = input_value\n            if isinstance(input_value, pd.DataFrame):\n                y = input_value[input_value.columns[0]].values\n            elif isinstance(input_value, pd.Series):\n                y = input_value.values[0]\n\n            method_to_call = method_module if plot is None else getattr(plot, method_module.__name__)\n            method_to_call(x, y, **self.method.params_dict)\n            if plot is not None:\n                if \"title\" in self.method.inherited_params_dict:\n                    plot.set_title(self.method.inherited_params_dict[\"title\"])\n                if \"x_label\" in self.method.inherited_params_dict:\n                    plot.set_xlabel(self.method.inherited_params_dict[\"x_label\"])\n                if \"y_label\" in self.method.inherited_params_dict:\n                    plot.set_ylabel(self.method.inherited_params_dict[\"y_label\"])\n                if \"legend_name\" in self.method.inherited_params_dict:\n                    plot.legend(title=self.method.inherited_params_dict[\"legend_name\"])\n\n                if self.method.inherited_params_dict.get(\"annotate\", False):\n                    if isinstance(input_value, pd.DataFrame):\n                        for i, y_val in enumerate(y):\n                            y_to_show = round(y_val, 3) if isinstance(y_val, float) else y_val\n                            plot.annotate(\n                                f\"{y_val}\", (x[i], y_val), textcoords=\"offset points\", xytext=(0, 2), ha=\"center\"\n                            )\n                    else:\n                        y_to_show = round(y, 3) if isinstance(y, float) else y\n                        plot.annotate(\n                            f\"{y_to_show}\", (x, y), textcoords=\"offset points\", xytext=(0, 2), ha=\"center\"\n                        )\n\n            else:\n                if \"title\" in self.method.inherited_params_dict:\n                    plt.title(self.method.inherited_params_dict[\"title\"])\n                if \"x_label\" in self.method.inherited_params_dict:\n                    plt.xlabel(self.method.inherited_params_dict[\"x_label\"])\n                if \"y_label\" in self.method.inherited_params_dict:\n                    plt.ylabel(self.method.inherited_params_dict[\"y_label\"])\n                if \"legend_name\" in self.method.inherited_params_dict:\n                    plt.legend(title=self.method.inherited_params_dict[\"legend_name\"])\n\n                if self.method.inherited_params_dict.get(\"annotate\", False):\n                    if isinstance(input_value, pd.DataFrame):\n                        for i, y_val in enumerate(y):\n                            y_to_show = round(y_val, 3) if isinstance(y_val, float) else y_val\n                            plt.annotate(\n                                f\"{y_val}\", (x[i], y_val), textcoords=\"offset points\", xytext=(0, 2), ha=\"center\"\n                            )\n                    else:\n                        y_to_show = round(y, 3) if isinstance(y, float) else y\n                        plt.annotate(f\"{y_to_show}\", (x, y), textcoords=\"offset points\", xytext=(0, 2), ha=\"center\")\n\n        output_dir = Path(self.plots_output_dir)\n        output_dir.mkdir(parents=True, exist_ok=True)\n        plt.savefig(output_dir / f\"{self.name}_plot.png\")\n        print(f\"Plot saved in {output_dir / f'{self.name}_plot.png'}\")\n    else:\n        raise NotImplementedError(\"Only matplotlib library is supported for now\")\n</code></pre>"},{"location":"reference/cli/main/","title":"main","text":"<p>CLI entry point.</p>"},{"location":"reference/scripts/create_task_hierarchy_md/","title":"create_task_hierarchy_md","text":""},{"location":"reference/scripts/create_task_hierarchy_md/#exe_kg_lib.scripts.create_task_hierarchy_md.task_hierarchy_to_md","title":"<code>task_hierarchy_to_md(task_hierarchies_dict, task_methods_dict, task_inputs_dict, task_outputs_dict, method_params_dict, level=0, top_task=None)</code>","text":"<p>Convert input dictionaries into a markdown representation.</p> <p>Parameters:</p> Name Type Description Default <code>task_hierarchies_dict</code> <code>dict</code> <p>A dictionary representing the task hierarchy. Each key is a task IRI and each value is a dictionary (of the same structure) representing the sub-tasks of the key task.</p> required <code>task_methods_dict</code> <code>dict</code> <p>A dictionary mapping task IRIs to their associated methods.</p> required <code>task_inputs_dict</code> <code>dict</code> <p>A dictionary mapping task IRIs to their associated inputs.</p> required <code>task_outputs_dict</code> <code>dict</code> <p>A dictionary mapping task IRIs to their associated outputs.</p> required <code>method_params_dict</code> <code>dict</code> <p>A dictionary mapping method IRIs to their associated parameters.</p> required <code>level</code> <code>int</code> <p>The current level of the task hierarchy. Defaults to 0.</p> <code>0</code> <code>top_task</code> <code>str</code> <p>The top-level task in the hierarchy. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <p>Markdown representation containing the hierarchy of tasks with their methods, inputs, outputs, and method parameters.</p> Source code in <code>exe_kg_lib/scripts/create_task_hierarchy_md.py</code> <pre><code>def task_hierarchy_to_md(\n    task_hierarchies_dict,\n    task_methods_dict,\n    task_inputs_dict,\n    task_outputs_dict,\n    method_params_dict,\n    level=0,\n    top_task=None,\n):\n    \"\"\"\n    Convert input dictionaries into a markdown representation.\n\n    Args:\n        task_hierarchies_dict (dict): A dictionary representing the task hierarchy. Each key is a task IRI and each value is a dictionary (of the same structure) representing the sub-tasks of the key task.\n        task_methods_dict (dict): A dictionary mapping task IRIs to their associated methods.\n        task_inputs_dict (dict): A dictionary mapping task IRIs to their associated inputs.\n        task_outputs_dict (dict): A dictionary mapping task IRIs to their associated outputs.\n        method_params_dict (dict): A dictionary mapping method IRIs to their associated parameters.\n        level (int, optional): The current level of the task hierarchy. Defaults to 0.\n        top_task (str, optional): The top-level task in the hierarchy. Defaults to None.\n\n    Returns:\n        str: Markdown representation containing the hierarchy of tasks with their methods, inputs, outputs, and method parameters.\n    \"\"\"\n    if level == 0:\n        md_text = \"\ud83d\uddd2\ufe0f **Note**: Parent tasks are marked with \ud83d\udcdc. Only bottom-level tasks (marked with \u2611\ufe0f) can be used while creating a pipeline.\\n\\n\"\n    else:\n        md_text = \"\"\n\n    for task_iri, sub_tasks_dict in task_hierarchies_dict.items():\n        task_name = task_iri.split(\"#\")[-1]\n\n        kg_schema_short = \"\"\n        for _, kg_schema_info in KG_SCHEMAS.items():\n            if task_iri.startswith(kg_schema_info[\"namespace\"]):\n                kg_schema_short = kg_schema_info[\"namespace_prefix\"]\n                break\n\n        kg_schema_short_text = (\n            f'&lt;span style=\"float: right; font-weight: 100;\"&gt; \ud83d\uddd2\ufe0f belongs to KG schema with abbr. &lt;code&gt;{kg_schema_short}&lt;/code&gt;&lt;/span&gt;'\n            if level == 0\n            else \"\"\n        )\n\n        md_text += \"\\t\" * level + f\"&lt;details&gt;\\n\"\n\n        if task_iri not in task_methods_dict:  # task is a subclass of ds:Task but not of ds:AtomicTask\n            md_text += \"\\t\" * (level + 1) + f\"&lt;summary&gt;{task_name} \ud83d\udcdc{kg_schema_short_text}&lt;/summary&gt;\\n\"\n\n            md_text += \"\\t\" * (level + 1) + f\"&lt;ul&gt;\\n\"\n\n            # save top_task for getting the inputs/outputs\n            if level == 0:\n                top_task = task_iri\n            # handle the rest of the tasks in the hierarchy\n            md_text += task_hierarchy_to_md(\n                sub_tasks_dict,\n                task_methods_dict,\n                task_inputs_dict,\n                task_outputs_dict,\n                method_params_dict,\n                level + 2,\n                top_task,\n            )\n        else:  # task has methods attached i.e. task is a subclass of ds:AtomicTask\n            md_text += \"\\t\" * (level + 1) + f\"&lt;summary&gt;{task_name} \u2611\ufe0f{kg_schema_short_text}&lt;/summary&gt;\\n\"\n            md_text += \"\\t\" * (level + 1) + f\"&lt;ul&gt;\\n\"\n\n            if level == 0:\n                top_task = task_iri\n\n            # handle the inputs attached to the task\n            md_text += \"\\t\" * (level + 2) + f\"&lt;details&gt;\\n\"\n            md_text += \"\\t\" * (level + 3) + f\"&lt;summary&gt;Inputs&lt;/summary&gt;\\n\"\n            if top_task in task_inputs_dict:\n                # check top task of the hierarchy\n                # open the list\n                md_text += \"\\t\" * (level + 3) + f\"&lt;ul&gt;\\n\"\n                for input_iri in task_inputs_dict[top_task]:\n                    input_name = input_iri.split(\"#\")[-1]\n                    md_text += \"\\t\" * (level + 4) + f\"&lt;li&gt;{input_name}&lt;/li&gt;\\n\"\n\n            if task_iri in task_inputs_dict and task_iri != top_task:\n                # check current task (bottom of the hierarchy)\n                if top_task not in task_inputs_dict:\n                    # open the list\n                    md_text += \"\\t\" * (level + 3) + f\"&lt;ul&gt;\\n\"\n                for input_iri in task_inputs_dict[task_iri]:\n                    input_name = input_iri.split(\"#\")[-1]\n                    md_text += \"\\t\" * (level + 4) + f\"&lt;li&gt;{input_name}&lt;/li&gt;\\n\"\n\n            if top_task in task_inputs_dict or (task_iri in task_inputs_dict and task_iri != top_task):\n                # close the list\n                md_text += \"\\t\" * (level + 3) + f\"&lt;/ul&gt;\\n\"\n            md_text += \"\\t\" * (level + 2) + f\"&lt;/details&gt;\\n\"\n\n            # handle the outputs attached to the task\n            md_text += \"\\t\" * (level + 2) + f\"&lt;details&gt;\\n\"\n            md_text += \"\\t\" * (level + 3) + f\"&lt;summary&gt;Outputs&lt;/summary&gt;\\n\"\n            if top_task in task_outputs_dict:\n                # check top task of the hierarchy\n                # open the list\n                md_text += \"\\t\" * (level + 3) + f\"&lt;ul&gt;\\n\"\n                for output_iri in task_outputs_dict[top_task]:\n                    output_name = output_iri.split(\"#\")[-1]\n                    md_text += \"\\t\" * (level + 4) + f\"&lt;li&gt;{output_name}&lt;/li&gt;\\n\"\n\n            if task_iri in task_outputs_dict and task_iri != top_task:\n                # check current task (bottom of the hierarchy)\n                if top_task not in task_outputs_dict:\n                    # open the list\n                    md_text += \"\\t\" * (level + 3) + f\"&lt;ul&gt;\\n\"\n                for output_iri in task_outputs_dict[task_iri]:\n                    output_name = output_iri.split(\"#\")[-1]\n                    md_text += \"\\t\" * (level + 4) + f\"&lt;li&gt;{output_name}&lt;/li&gt;\\n\"\n\n            if top_task in task_outputs_dict or (task_iri in task_outputs_dict and task_iri != top_task):\n                # close the list\n                md_text += \"\\t\" * (level + 3) + f\"&lt;/ul&gt;\\n\"\n\n            md_text += \"\\t\" * (level + 2) + f\"&lt;/details&gt;\\n\"\n\n            # handle the methods attached to the task\n            md_text += \"\\t\" * (level + 2) + f\"&lt;details&gt;\\n\"\n            md_text += \"\\t\" * (level + 3) + f\"&lt;summary&gt;Methods&lt;/summary&gt;\\n\"\n            md_text += \"\\t\" * (level + 3) + f\"&lt;ul&gt;\\n\"\n            for method_iri in task_methods_dict[task_iri]:\n                method_name = method_iri.split(\"#\")[-1]\n                md_text += \"\\t\" * (level + 3) + f\"&lt;details&gt;\\n\"\n                md_text += \"\\t\" * (level + 4) + f\"&lt;summary&gt;{method_name}&lt;/summary&gt;\\n\"\n                if method_iri in method_params_dict:\n                    md_text += \"\\t\" * (level + 4) + f\"&lt;ul&gt;\\n\"\n                    for param_iri, param_datatypes in method_params_dict[method_iri].items():\n                        param_name = param_iri.split(\"#\")[-1]\n                        md_text += (\n                            \"\\t\" * (level + 5)\n                            + f\"&lt;li&gt;{param_name} ({', '.join([datatype.split('#')[-1] for datatype in param_datatypes])})&lt;/li&gt;\\n\"\n                        )\n                    md_text += \"\\t\" * (level + 4) + f\"&lt;/ul&gt;\\n\"\n                else:\n                    md_text += \"\\t\" * (level + 4) + f\"&lt;ul&gt;No parameters&lt;/ul&gt;\\n\"\n                md_text += \"\\t\" * (level + 3) + f\"&lt;/details&gt;\\n\"\n            md_text += \"\\t\" * (level + 3) + f\"&lt;/ul&gt;\\n\"\n            md_text += \"\\t\" * (level + 2) + f\"&lt;/details&gt;\\n\"\n        md_text += \"\\t\" * (level + 1) + f\"&lt;/ul&gt;\\n\"\n\n        md_text += \"\\t\" * level + f\"&lt;/details&gt;\\n\"\n    return md_text\n</code></pre>"},{"location":"reference/shacl/base_shape_graph_generator/","title":"base_shape_graph_generator","text":"<p>This script produces a SHACL shape graph based on the KG schemata and the generated KGs that represent the example pipelines.</p> <p>NOTE: The shape graph produced by this script is NOT identical to \"shacl_shape_graph.ttl\" because the latter has been adapted to the special cases of ExeKGLib.</p>"},{"location":"reference/utils/cli_utils/","title":"cli_utils","text":""},{"location":"reference/utils/cli_utils/#exe_kg_lib.utils.cli_utils.get_input_for_existing_data_entities","title":"<code>get_input_for_existing_data_entities(existing_data_entity_list)</code>","text":"<p>Prompts the user to choose input for a task from a list of existing data entities.</p> <p>Parameters:</p> Name Type Description Default <code>existing_data_entity_list</code> <code>List[DataEntity]</code> <p>A list of existing data entities.</p> required <p>Returns:</p> Type Description <code>List[DataEntity]</code> <p>List[DataEntity]: A list of chosen data entities.</p> Source code in <code>exe_kg_lib/utils/cli_utils.py</code> <pre><code>def get_input_for_existing_data_entities(\n    existing_data_entity_list: List[DataEntity],\n) -&gt; List[DataEntity]:\n    \"\"\"\n    Prompts the user to choose input for a task from a list of existing data entities.\n\n    Args:\n        existing_data_entity_list (List[DataEntity]): A list of existing data entities.\n\n    Returns:\n        List[DataEntity]: A list of chosen data entities.\n    \"\"\"\n    if not existing_data_entity_list:\n        return []\n\n    chosen_data_entity_list = []\n    print(\"Choose input for the task from existing data entities:\")\n    while True:\n        for i, data_entity in enumerate(existing_data_entity_list):\n            print(f\"\\t{str(i)}. {data_entity.name}\")\n        print(f\"\\t{str(-1)}. Continue\")\n        chosen_data_entity_i = int(input())\n        if chosen_data_entity_i == -1:\n            break\n\n        chosen_data_entity_list.append(existing_data_entity_list[chosen_data_entity_i])\n\n    return chosen_data_entity_list\n</code></pre>"},{"location":"reference/utils/cli_utils/#exe_kg_lib.utils.cli_utils.get_input_for_new_data_entities","title":"<code>get_input_for_new_data_entities(data_semantics_list, data_structure_list, namespace, data_entity)</code>","text":"<p>Prompts the user to enter input columns and their corresponding data semantics and data structure.</p> <p>Parameters:</p> Name Type Description Default <code>data_semantics_list</code> <code>List[Entity]</code> <p>A list of available data semantics.</p> required <code>data_structure_list</code> <code>List[Entity]</code> <p>A list of available data structures.</p> required <code>namespace</code> <code>Namespace</code> <p>The namespace for the new data entities.</p> required <code>data_entity</code> <code>Entity</code> <p>The data entity to which the new data entities belong.</p> required <p>Returns:</p> Type Description <code>List[DataEntity]</code> <p>List[DataEntity]: A list of newly created data entities.</p> Source code in <code>exe_kg_lib/utils/cli_utils.py</code> <pre><code>def get_input_for_new_data_entities(\n    data_semantics_list: List[Entity], data_structure_list: List[Entity], namespace: Namespace, data_entity: Entity\n) -&gt; List[DataEntity]:\n    \"\"\"\n    Prompts the user to enter input columns and their corresponding data semantics and data structure.\n\n    Args:\n        data_semantics_list (List[Entity]): A list of available data semantics.\n        data_structure_list (List[Entity]): A list of available data structures.\n        namespace (Namespace): The namespace for the new data entities.\n        data_entity (Entity): The data entity to which the new data entities belong.\n\n    Returns:\n        List[DataEntity]: A list of newly created data entities.\n    \"\"\"\n    data_entities = []\n\n    prompt = \"Enter input columns, then 'quit' when done: \"\n    source = input(prompt)\n    while source != \"quit\":\n        new_data_entity = DataEntity(namespace + source, data_entity, source)\n\n        print(f\"Choose data semantics for {source}:\")\n        for i, t in enumerate(data_semantics_list):\n            print(f\"\\t{str(i)}. {t.name}\")\n        chosen_data_semantics_id = int(input())\n        new_data_entity.data_semantics = data_semantics_list[chosen_data_semantics_id].iri\n\n        print(f\"Choose data structure for {source}:\")\n        for i, t in enumerate(data_structure_list):\n            print(f\"\\t{str(i)}. {t.name}\")\n        chosen_data_structure_id = int(input())\n        new_data_entity.data_structure = data_structure_list[chosen_data_structure_id].iri\n\n        data_entities.append(new_data_entity)\n\n        source = input(prompt)\n\n    return data_entities\n</code></pre>"},{"location":"reference/utils/cli_utils/#exe_kg_lib.utils.cli_utils.input_pipeline_info","title":"<code>input_pipeline_info()</code>","text":"<p>Prompts the user to enter information about the pipeline.</p> <p>Returns:</p> Type Description <code>Tuple[str, str, str]</code> <p>A tuple containing the pipeline name, input data path, and output directory for saving plots.</p> Source code in <code>exe_kg_lib/utils/cli_utils.py</code> <pre><code>def input_pipeline_info() -&gt; Tuple[str, str, str]:\n    \"\"\"\n    Prompts the user to enter information about the pipeline.\n\n    Returns:\n        A tuple containing the pipeline name, input data path, and output directory for saving plots.\n    \"\"\"\n    pipeline_name = input(\"Enter a name for the pipeline: \")\n    input_data_path = input(\"Enter a path for the input data: \")\n    input_plots_output_dir = input(\"Enter a path for saving the plots: \")\n\n    return pipeline_name, input_data_path, input_plots_output_dir\n</code></pre>"},{"location":"reference/utils/kg_creation_utils/","title":"kg_creation_utils","text":""},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.add_and_attach_data_entity","title":"<code>add_and_attach_data_entity(kg, data, top_level_kg, top_level_schema_namespace, data_entity, relation, task_entity)</code>","text":"<p>Adds a data entity to the knowledge graph and attaches it to a task entity using a specified relation.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to add the data entity to.</p> required <code>data</code> <code>Entity</code> <p>The data entity to add.</p> required <code>top_level_kg</code> <code>Graph</code> <p>The top-level knowledge graph.</p> required <code>top_level_schema_namespace</code> <code>Namespace</code> <p>The namespace for the top-level schema.</p> required <code>data_entity</code> <code>DataEntity</code> <p>The data entity to attach.</p> required <code>relation</code> <code>URIRef</code> <p>The relation to use for attaching the data entity.</p> required <code>task_entity</code> <code>Task</code> <p>The task entity to attach the data entity to.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>exe_kg_lib/utils/kg_creation_utils.py</code> <pre><code>def add_and_attach_data_entity(\n    kg: Graph,\n    data: Entity,\n    top_level_kg: Graph,\n    top_level_schema_namespace: Namespace,\n    data_entity: DataEntity,\n    relation: URIRef,\n    task_entity: Task,\n) -&gt; None:\n    \"\"\"\n    Adds a data entity to the knowledge graph and attaches it to a task entity using a specified relation.\n\n    Args:\n        kg (Graph): The knowledge graph to add the data entity to.\n        data (Entity): The data entity to add.\n        top_level_kg (Graph): The top-level knowledge graph.\n        top_level_schema_namespace (Namespace): The namespace for the top-level schema.\n        data_entity (DataEntity): The data entity to attach.\n        relation (URIRef): The relation to use for attaching the data entity.\n        task_entity (Task): The task entity to attach the data entity to.\n\n    Returns:\n        None\n    \"\"\"\n    add_data_entity_instance(kg, data, top_level_kg, top_level_schema_namespace, data_entity)\n    add_relation(kg, task_entity, relation, data_entity)\n</code></pre>"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.add_data_entity_instance","title":"<code>add_data_entity_instance(kg, data, top_level_kg, top_level_schema_namespace, data_entity)</code>","text":"<p>Adds a data entity instance to the knowledge graph.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to add the data entity instance to.</p> required <code>data</code> <code>Entity</code> <p>The data entity instance to be added.</p> required <code>top_level_kg</code> <code>Graph</code> <p>The top-level knowledge graph.</p> required <code>top_level_schema_namespace</code> <code>Namespace</code> <p>The namespace for the top-level schema.</p> required <code>data_entity</code> <code>DataEntity</code> <p>The data entity object.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>exe_kg_lib/utils/kg_creation_utils.py</code> <pre><code>def add_data_entity_instance(\n    kg: Graph,\n    data: Entity,\n    top_level_kg: Graph,\n    top_level_schema_namespace: Namespace,\n    data_entity: DataEntity,\n) -&gt; None:\n    \"\"\"\n    Adds a data entity instance to the knowledge graph.\n\n    Args:\n        kg (Graph): The knowledge graph to add the data entity instance to.\n        data (Entity): The data entity instance to be added.\n        top_level_kg (Graph): The top-level knowledge graph.\n        top_level_schema_namespace (Namespace): The namespace for the top-level schema.\n        data_entity (DataEntity): The data entity object.\n\n    Returns:\n        None\n    \"\"\"\n    add_instance(kg, data_entity)\n\n    if data_entity.source:\n        # has_source_iri, range_iri = get_first_query_result_if_exists(\n        #     get_method_params_plus_inherited, data_entity.parent_entity.iri, top_level_kg\n        # )\n\n        source_literal = Literal(\n            lexical_or_value=data_entity.source,\n            datatype=XSD.string,\n        )\n\n        add_literal(kg, data_entity, top_level_schema_namespace.hasSource, source_literal)\n\n    if data_entity.data_structure:\n        add_relation(\n            kg,\n            data_entity,\n            RDF.type,\n            Entity(data_entity.data_structure),\n        )\n\n    if data_entity.data_semantics:\n        add_relation(\n            kg,\n            data_entity,\n            RDF.type,\n            Entity(data_entity.data_semantics),\n        )\n\n    if data_entity.reference:\n        add_relation(\n            kg,\n            data_entity,\n            top_level_schema_namespace.hasReference,\n            Entity(data_entity.reference),\n        )\n</code></pre>"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.add_instance","title":"<code>add_instance(kg, entity_instance, extra_parent_iri=None)</code>","text":"<p>Adds an instance of an entity to the knowledge graph.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to add the instance to.</p> required <code>entity_instance</code> <code>Entity</code> <p>The entity instance to be added.</p> required <code>extra_parent_iri</code> <code>str</code> <p>An extra parent IRI to add to the instance.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>exe_kg_lib/utils/kg_creation_utils.py</code> <pre><code>def add_instance(kg: Graph, entity_instance: Entity, extra_parent_iri: str = None) -&gt; None:\n    \"\"\"\n    Adds an instance of an entity to the knowledge graph.\n\n    Parameters:\n        kg (Graph): The knowledge graph to add the instance to.\n        entity_instance (Entity): The entity instance to be added.\n        extra_parent_iri (str): An extra parent IRI to add to the instance.\n\n    Returns:\n        None\n    \"\"\"\n    kg.add((entity_instance.iri, RDF.type, entity_instance.parent_entity.iri))\n    if extra_parent_iri:\n        kg.add((entity_instance.iri, RDF.type, URIRef(extra_parent_iri)))\n</code></pre>"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.add_instance_from_parent_with_relation","title":"<code>add_instance_from_parent_with_relation(namespace, kg, parent_entity, relation_iri, related_entity, instance_name, extra_parent_iri=None)</code>","text":"<p>Adds an instance to the knowledge graph with a relation to a given entity.</p> <p>Parameters:</p> Name Type Description Default <code>namespace</code> <code>Namespace</code> <p>The namespace for the instance.</p> required <code>kg</code> <code>Graph</code> <p>The knowledge graph.</p> required <code>parent_entity</code> <code>Entity</code> <p>The parent entity of the instance.</p> required <code>relation_iri</code> <code>str</code> <p>The IRI of the relation between the related entity and the instance.</p> required <code>related_entity</code> <code>Entity</code> <p>The related entity.</p> required <code>instance_name</code> <code>str</code> <p>The name of the instance.</p> required <code>extra_parent_iri</code> <code>str</code> <p>An extra parent IRI to add to the instance.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Entity</code> <code>Entity</code> <p>The created instance.</p> Source code in <code>exe_kg_lib/utils/kg_creation_utils.py</code> <pre><code>def add_instance_from_parent_with_relation(\n    namespace: Namespace,\n    kg: Graph,\n    parent_entity: Entity,\n    relation_iri: str,\n    related_entity: Entity,\n    instance_name: str,\n    extra_parent_iri: str = None,\n) -&gt; Entity:\n    \"\"\"\n    Adds an instance to the knowledge graph with a relation to a given entity.\n\n    Args:\n        namespace (Namespace): The namespace for the instance.\n        kg (Graph): The knowledge graph.\n        parent_entity (Entity): The parent entity of the instance.\n        relation_iri (str): The IRI of the relation between the related entity and the instance.\n        related_entity (Entity): The related entity.\n        instance_name (str): The name of the instance.\n        extra_parent_iri (str): An extra parent IRI to add to the instance.\n\n    Returns:\n        Entity: The created instance.\n    \"\"\"\n    entity_iri = namespace + instance_name\n    instance = Entity(entity_iri, parent_entity)\n\n    add_instance(kg, instance, extra_parent_iri)\n    add_relation(kg, related_entity, relation_iri, instance)\n\n    return instance\n</code></pre>"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.add_literal","title":"<code>add_literal(kg, from_entity, relation_iri, literal)</code>","text":"<p>Adds a literal value to the knowledge graph.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to add the literal to.</p> required <code>from_entity</code> <code>Entity</code> <p>The entity from which the relation originates.</p> required <code>relation_iri</code> <code>str</code> <p>The IRI of the relation.</p> required <code>literal</code> <code>Literal</code> <p>The literal value to add.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>exe_kg_lib/utils/kg_creation_utils.py</code> <pre><code>def add_literal(kg: Graph, from_entity: Entity, relation_iri: str, literal: Literal) -&gt; None:\n    \"\"\"\n    Adds a literal value to the knowledge graph.\n\n    Parameters:\n        kg (Graph): The knowledge graph to add the literal to.\n        from_entity (Entity): The entity from which the relation originates.\n        relation_iri (str): The IRI of the relation.\n        literal (Literal): The literal value to add.\n\n    Returns:\n        None\n    \"\"\"\n    kg.add((from_entity.iri, URIRef(relation_iri), literal))\n</code></pre>"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.add_relation","title":"<code>add_relation(kg, from_entity, relation_iri, to_entity)</code>","text":"<p>Adds a relation between two entities in the knowledge graph.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to add the relation to.</p> required <code>from_entity</code> <code>Entity</code> <p>The entity from which the relation originates.</p> required <code>relation_iri</code> <code>str</code> <p>The IRI of the relation.</p> required <code>to_entity</code> <code>Entity</code> <p>The entity to which the relation points.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>exe_kg_lib/utils/kg_creation_utils.py</code> <pre><code>def add_relation(kg: Graph, from_entity: Entity, relation_iri: str, to_entity: Entity) -&gt; None:\n    \"\"\"\n    Adds a relation between two entities in the knowledge graph.\n\n    Args:\n        kg (Graph): The knowledge graph to add the relation to.\n        from_entity (Entity): The entity from which the relation originates.\n        relation_iri (str): The IRI of the relation.\n        to_entity (Entity): The entity to which the relation points.\n\n    Returns:\n        None\n    \"\"\"\n    kg.add(\n        (\n            from_entity.iri,\n            URIRef(relation_iri),\n            to_entity.iri,\n        )\n    )\n</code></pre>"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.create_pipeline_task","title":"<code>create_pipeline_task(top_level_schema_namespace, parent_entity, kg, pipeline_name, input_data_path, plots_output_dir)</code>","text":"<p>Create a pipeline task in the knowledge graph.</p> <p>Parameters:</p> Name Type Description Default <code>top_level_schema_namespace</code> <code>Namespace</code> <p>The top-level schema namespace.</p> required <code>parent_entity</code> <code>Entity</code> <p>The parent entity of the pipeline task.</p> required <code>kg</code> <code>Graph</code> <p>The knowledge graph.</p> required <code>pipeline_name</code> <code>str</code> <p>The name of the pipeline.</p> required <code>input_data_path</code> <code>str</code> <p>The path to the input data for the pipeline.</p> required <code>plots_output_dir</code> <code>str</code> <p>The directory to store the output plots when executing the pipeline.</p> required <p>Returns:</p> Name Type Description <code>Task</code> <code>Task</code> <p>The created pipeline task.</p> Source code in <code>exe_kg_lib/utils/kg_creation_utils.py</code> <pre><code>def create_pipeline_task(\n    top_level_schema_namespace: Namespace,\n    parent_entity: Entity,\n    kg: Graph,\n    pipeline_name: str,\n    input_data_path: str,\n    plots_output_dir: str,\n) -&gt; Task:\n    \"\"\"\n    Create a pipeline task in the knowledge graph.\n\n    Args:\n        top_level_schema_namespace (Namespace): The top-level schema namespace.\n        parent_entity (Entity): The parent entity of the pipeline task.\n        kg (Graph): The knowledge graph.\n        pipeline_name (str): The name of the pipeline.\n        input_data_path (str): The path to the input data for the pipeline.\n        plots_output_dir (str): The directory to store the output plots when executing the pipeline.\n\n    Returns:\n        Task: The created pipeline task.\n    \"\"\"\n    pipeline = Task(top_level_schema_namespace + pipeline_name, parent_entity)\n    add_instance(kg, pipeline)\n\n    input_data_path_literal = Literal(lexical_or_value=input_data_path, datatype=XSD.string)\n    add_literal(kg, pipeline, top_level_schema_namespace.hasInputDataPath, input_data_path_literal)\n\n    plots_output_dir_literal = Literal(lexical_or_value=plots_output_dir, datatype=XSD.string)\n    add_literal(kg, pipeline, top_level_schema_namespace.hasPlotsOutputDir, plots_output_dir_literal)\n\n    return pipeline\n</code></pre>"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.deserialize_input_entity_info_dict","title":"<code>deserialize_input_entity_info_dict(input_entity_info_dict, data_entities_dict, task_output_dicts, pipeline_name, namespace)</code>","text":"<p>Deserializes the serialized input entity dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>input_entity_info_dict</code> <code>Dict[str, Union[List[str], Method]]</code> <p>The serialized input entity dictionary.</p> required <code>data_entities_dict</code> <code>Dict[str, DataEntity]</code> <p>The dictionary of data entities.</p> required <code>task_output_dicts</code> <code>Dict[str, Task]</code> <p>The dictionary of task output objects.</p> required <code>pipeline_name</code> <code>str</code> <p>The name of the pipeline.</p> required <p>Returns:</p> Type Description <code>Dict[str, Union[List[DataEntity], Method]]</code> <p>Dict[str, Union[List[DataEntity], Method]]: The deserialized input data entity dictionary.</p> Source code in <code>exe_kg_lib/utils/kg_creation_utils.py</code> <pre><code>def deserialize_input_entity_info_dict(\n    input_entity_info_dict: Dict[str, Union[List[str], MethodSerializable]],\n    data_entities_dict: Dict[str, DataEntity],\n    task_output_dicts: Dict[str, TaskSerializable],\n    pipeline_name: str,\n    namespace: Namespace,\n) -&gt; Dict[str, Union[List[DataEntity], Method]]:\n    \"\"\"\n    Deserializes the serialized input entity dictionary.\n\n    Args:\n        input_entity_info_dict (Dict[str, Union[List[str], MethodSerializable]]): The serialized input entity dictionary.\n        data_entities_dict (Dict[str, DataEntity]): The dictionary of data entities.\n        task_output_dicts (Dict[str, TaskSerializable]): The dictionary of task output objects.\n        pipeline_name (str): The name of the pipeline.\n\n    Returns:\n        Dict[str, Union[List[DataEntity], Method]]: The deserialized input data entity dictionary.\n    \"\"\"\n    input_entity_dict: Dict[str, List[DataEntity]] = {}\n    for input_name, input_value in input_entity_info_dict.items():\n        if isinstance(input_value, MethodSerializable):  # provided input is a method\n            input_method = input_value\n            input_entity_dict[input_name] = Method(\n                namespace + input_method.method_type, parent_entity=None, params_dict=input_method.params_dict\n            )\n        elif isinstance(input_value, list) and all(\n            isinstance(elem, str) for elem in input_value\n        ):  # provided input is list of data entity names\n            input_data_entity_names = input_value\n            input_entity_dict[input_name] = []\n            for data_entity_name in input_data_entity_names:\n                match = re.match(TASK_OUTPUT_NAME_REGEX, data_entity_name)\n                if match:\n                    # input entity refers to a data entity that is an output of a previous task\n                    prev_task_output_name = match.group(1)\n                    prev_task_type = match.group(2)\n                    prev_task_instance_number = int(match.group(3))\n\n                    try:\n                        # regex matched so assume that the data_entity_name is an output of a previous task\n                        prev_task_name = get_instance_name(prev_task_type, prev_task_instance_number, pipeline_name)\n                        input_entity_dict[input_name].append(task_output_dicts[prev_task_name][prev_task_output_name])\n                    except KeyError:\n                        # regex matched but the data_entity_name is NOT an output of a previous task\n                        input_entity_dict[input_name].append(data_entities_dict[data_entity_name])\n                else:\n                    input_entity_dict[input_name].append(data_entities_dict[data_entity_name])\n\n    return input_entity_dict\n</code></pre>"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.field_value_to_literal","title":"<code>field_value_to_literal(field_value)</code>","text":"<p>Converts a Python field value to a Literal object with the appropriate datatype.</p> <p>Parameters:</p> Name Type Description Default <code>field_value</code> <code>Union[str, int, float, bool]</code> <p>The value to be converted.</p> required <p>Returns:</p> Name Type Description <code>Literal</code> <code>Literal</code> <p>The converted Literal object.</p> Source code in <code>exe_kg_lib/utils/kg_creation_utils.py</code> <pre><code>def field_value_to_literal(field_value: Union[str, int, float, bool]) -&gt; Literal:\n    \"\"\"\n    Converts a Python field value to a Literal object with the appropriate datatype.\n\n    Args:\n        field_value (Union[str, int, float, bool]): The value to be converted.\n\n    Returns:\n        Literal: The converted Literal object.\n\n    \"\"\"\n    if isinstance(field_value, str):\n        return Literal(field_value, datatype=XSD.string)\n    elif isinstance(field_value, bool):\n        return Literal(field_value, datatype=XSD.boolean)\n    elif isinstance(field_value, int):\n        return Literal(field_value, datatype=XSD.int)\n    elif isinstance(field_value, float):\n        return Literal(field_value, datatype=XSD.float)\n    else:\n        return Literal(str(field_value), datatype=XSD.string)\n</code></pre>"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.load_exe_kg","title":"<code>load_exe_kg(input_path, exe_kg_from_json_method)</code>","text":"<p>Loads the ExeKG from the specified input path.</p> <p>Parameters:</p> Name Type Description Default <code>input_path</code> <code>str</code> <p>The path to the ExeKG file.</p> required <code>exe_kg_from_json_method</code> <code>Callable[[str], Graph]</code> <p>The method to convert a simplified serialized pipeline to ExeKG.</p> required <p>Returns:</p> Name Type Description <code>Graph</code> <code>Graph</code> <p>The loaded ExeKG.</p> Source code in <code>exe_kg_lib/utils/kg_creation_utils.py</code> <pre><code>def load_exe_kg(input_path: str, exe_kg_from_json_method: Callable[[Union[Path, TextIOWrapper, str]], Graph]) -&gt; Graph:\n    \"\"\"\n    Loads the ExeKG from the specified input path.\n\n    Args:\n        input_path (str): The path to the ExeKG file.\n        exe_kg_from_json_method (Callable[[str], Graph]): The method to convert a simplified serialized pipeline to ExeKG.\n\n    Returns:\n        Graph: The loaded ExeKG.\n    \"\"\"\n    input_exe_kg = Graph(bind_namespaces=\"rdflib\")\n    if input_path.endswith(\".ttl\"):\n        # parse ExeKG from Turtle file\n        input_exe_kg.parse(input_path, format=\"n3\")\n    elif input_path.endswith(\".json\"):\n        # convert simplified serialized pipeline to ExeKG\n        input_exe_kg = exe_kg_from_json_method(input_path)\n\n    return input_exe_kg\n</code></pre>"},{"location":"reference/utils/kg_edit_utils/","title":"kg_edit_utils","text":""},{"location":"reference/utils/kg_edit_utils/#exe_kg_lib.utils.kg_edit_utils.update_metric_values","title":"<code>update_metric_values(exe_kg, task_output_dict, bottom_level_namespace, top_level_namespace)</code>","text":"<p>Updates the metric values in the given ExeKG.</p> <p>Parameters:</p> Name Type Description Default <code>exe_kg</code> <code>Graph</code> <p>The knowledge graph to update.</p> required <code>task_output_dict</code> <code>Dict[str, Union[str, int, float, bool]]</code> <p>A dictionary containing the task output names and values.</p> required <code>bottom_level_namespace</code> <code>Namespace</code> <p>The bottom level namespace for the output entity IRI.</p> required <code>top_level_namespace</code> <code>Namespace</code> <p>The top level namespace for the hasValue property.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>exe_kg_lib/utils/kg_edit_utils.py</code> <pre><code>def update_metric_values(\n    exe_kg: Graph,\n    task_output_dict: Dict[str, Union[str, int, float, bool]],\n    bottom_level_namespace: Namespace,\n    top_level_namespace: Namespace,\n) -&gt; None:\n    \"\"\"\n    Updates the metric values in the given ExeKG.\n\n    Args:\n        exe_kg (Graph): The knowledge graph to update.\n        task_output_dict (Dict[str, Union[str, int, float, bool]]): A dictionary containing the task output names and values.\n        bottom_level_namespace (Namespace): The bottom level namespace for the output entity IRI.\n        top_level_namespace (Namespace): The top level namespace for the hasValue property.\n\n    Returns:\n        None\n    \"\"\"\n    for task_output_name, task_output_value in task_output_dict.items():\n        if \"DataOutScore\" in task_output_name:\n            output_entity_iri = URIRef(bottom_level_namespace + task_output_name)\n            exe_kg.remove(\n                (\n                    output_entity_iri,\n                    URIRef(top_level_namespace.hasValue),\n                    None,\n                )\n            )\n            exe_kg.add(\n                (\n                    output_entity_iri,\n                    URIRef(top_level_namespace.hasValue),\n                    field_value_to_literal(task_output_value),\n                )\n            )\n</code></pre>"},{"location":"reference/utils/kg_edit_utils/#exe_kg_lib.utils.kg_edit_utils.update_pipeline_input_path","title":"<code>update_pipeline_input_path(exe_kg, pipeline_iri, new_input_data_path, top_level_namespace)</code>","text":"<p>Updates the input data path of a pipeline in the given ExeKG.</p> <p>Parameters:</p> Name Type Description Default <code>exe_kg</code> <code>Graph</code> <p>The knowledge graph to update.</p> required <code>pipeline_iri</code> <code>Union[str, URIRef]</code> <p>The IRI of the pipeline to update.</p> required <code>new_input_data_path</code> <code>str</code> <p>The new input data path to set for the pipeline.</p> required <code>top_level_namespace</code> <code>Namespace</code> <p>The namespace containing the relevant RDF predicates.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>exe_kg_lib/utils/kg_edit_utils.py</code> <pre><code>def update_pipeline_input_path(\n    exe_kg: Graph,\n    pipeline_iri: Union[str, URIRef],\n    new_input_data_path: str,\n    top_level_namespace: Namespace,\n) -&gt; None:\n    \"\"\"\n    Updates the input data path of a pipeline in the given ExeKG.\n\n    Args:\n        exe_kg (Graph): The knowledge graph to update.\n        pipeline_iri (Union[str, URIRef]): The IRI of the pipeline to update.\n        new_input_data_path (str): The new input data path to set for the pipeline.\n        top_level_namespace (Namespace): The namespace containing the relevant RDF predicates.\n\n    Returns:\n        None\n    \"\"\"\n    exe_kg.remove(\n        (\n            URIRef(pipeline_iri),\n            URIRef(top_level_namespace.hasInputDataPath),\n            None,\n        )\n    )\n    exe_kg.add(\n        (\n            URIRef(pipeline_iri),\n            URIRef(top_level_namespace.hasInputDataPath),\n            field_value_to_literal(new_input_data_path),\n        )\n    )\n</code></pre>"},{"location":"reference/utils/kg_validation_utils/","title":"kg_validation_utils","text":""},{"location":"reference/utils/kg_validation_utils/#exe_kg_lib.utils.kg_validation_utils.check_kg_executability","title":"<code>check_kg_executability(kg, shacl_shapes_s)</code>","text":"<p>Checks the executability of a KG by validating it against a set of SHACL shapes.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Union[Graph, str]</code> <p>The KG to be validated. It can be either an rdflib.Graph object or a string representing the path to the KG file.</p> required <code>shacl_shapes_s</code> <code>str</code> <p>The SHACL shapes to validate the KG against.</p> required <p>Raises:</p> Type Description <code>KGValidationError</code> <p>If the KG is not executable, an exception is raised with an error message.</p> <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>This function does not return any value.</p> Source code in <code>exe_kg_lib/utils/kg_validation_utils.py</code> <pre><code>def check_kg_executability(kg: Union[rdflib.Graph, str], shacl_shapes_s: str) -&gt; None:\n    \"\"\"\n    Checks the executability of a KG by validating it against a set of SHACL shapes.\n\n    Args:\n        kg (Union[rdflib.Graph, str]): The KG to be validated. It can be either an rdflib.Graph object or a string representing the path to the KG file.\n        shacl_shapes_s (str): The SHACL shapes to validate the KG against.\n\n    Raises:\n        KGValidationError: If the KG is not executable, an exception is raised with an error message.\n\n    Returns:\n        None: This function does not return any value.\n    \"\"\"\n    r = validate(data_graph=kg, shacl_graph=shacl_shapes_s)\n    conforms, _, results_text = r\n    if not conforms:\n        raise KGValidationError(\n            f\"{results_text}\\n\\nThe KG is not executable. To ensure executability of the KG as an ML pipeline, please fix the above error(s) and try again.\"\n        )\n    return\n</code></pre>"},{"location":"reference/utils/query_utils/","title":"query_utils","text":""},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.get_converted_module_hierarchy_chain","title":"<code>get_converted_module_hierarchy_chain(kg, namespace_prefix, method_iri)</code>","text":"<p>Retrieves the module hierarchy chain for a given method IRI and converts it to a list of module names.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix to use in queries.</p> required <code>method_iri</code> <code>str</code> <p>The IRI of the method.</p> required <p>Returns:</p> Name Type Description <code>List</code> <code>List</code> <p>The list of module names in the module hierarchy chain, in the correct order.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def get_converted_module_hierarchy_chain(\n    kg: Graph,\n    namespace_prefix: str,\n    method_iri: str,\n) -&gt; List:\n    \"\"\"\n    Retrieves the module hierarchy chain for a given method IRI and converts it to a list of module names.\n\n    Args:\n        kg (Graph): The knowledge graph to query.\n        namespace_prefix (str): The namespace prefix to use in queries.\n        method_iri (str): The IRI of the method.\n\n    Returns:\n        List: The list of module names in the module hierarchy chain, in the correct order.\n    \"\"\"\n    module_chain_names = None\n    try:\n        module_chain_names = get_module_hierarchy_chain(kg, namespace_prefix, method_iri)\n    except NoResultsError:\n        print(f\"Cannot retrieve module chain for method class: {method_iri}. Proceeding without it...\")\n\n    if module_chain_names:\n        # convert KG class names to module names and reverse the module chain to store it in the correct order\n        module_chain_names = [class_name_to_module_name(name) for name in module_chain_names]\n        module_chain_names = [class_name_to_method_name(method_iri.split(\"#\")[-1])] + module_chain_names\n        module_chain_names.reverse()\n\n    return module_chain_names\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.get_first_query_result_if_exists","title":"<code>get_first_query_result_if_exists(query_method, *args)</code>","text":"<p>Executes the given query method with the provided arguments and returns the first result if it exists.</p> <p>Parameters:</p> Name Type Description Default <code>query_method</code> <code>Callable</code> <p>The query method to execute.</p> required <code>*args</code> <p>Variable number of arguments to pass to the query method.</p> <code>()</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: The first query result if it exists, otherwise None.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def get_first_query_result_if_exists(query_method: Callable, *args) -&gt; Optional[str]:\n    \"\"\"\n    Executes the given query method with the provided arguments and returns the first result if it exists.\n\n    Args:\n        query_method (Callable): The query method to execute.\n        *args: Variable number of arguments to pass to the query method.\n\n    Returns:\n        Optional[str]: The first query result if it exists, otherwise None.\n    \"\"\"\n    query_result = next(\n        iter(list(query_method(*args))),\n        None,\n    )\n\n    if query_result is None:\n        return None\n\n    return query_result\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.get_grouped_inherited_inputs","title":"<code>get_grouped_inherited_inputs(input_kg, namespace_prefix, entity_iri)</code>","text":"<p>Retrieves the inherited inputs for a given entity, grouped by data entity IRI.</p> <p>Parameters:</p> Name Type Description Default <code>input_kg</code> <code>Graph</code> <p>The input knowledge graph.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix for the entity.</p> required <code>entity_iri</code> <code>str</code> <p>The IRI of the entity.</p> required <p>Returns:</p> Type Description <code>List[Tuple[str, List[str]]]</code> <p>List[Tuple[str, List[str]]]: A list of tuples, where each tuple contains a property name and a list of input values.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def get_grouped_inherited_inputs(\n    input_kg: Graph, namespace_prefix: str, entity_iri: str\n) -&gt; List[Tuple[str, List[str]]]:\n    \"\"\"\n    Retrieves the inherited inputs for a given entity, grouped by data entity IRI.\n\n    Args:\n        input_kg (Graph): The input knowledge graph.\n        namespace_prefix (str): The namespace prefix for the entity.\n        entity_iri (str): The IRI of the entity.\n\n    Returns:\n        List[Tuple[str, List[str]]]: A list of tuples, where each tuple contains a property name and a list of input values.\n\n    \"\"\"\n    property_list = list(query_inherited_inputs(input_kg, namespace_prefix, entity_iri))\n    property_list = sorted(property_list, key=lambda elem: elem[0])  # prepare for grouping\n    property_list = [\n        (key, [(elem[1], elem[2]) for elem in group])\n        for key, group in itertools.groupby(property_list, key=lambda elem: elem[0])\n    ]\n\n    return property_list\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.get_grouped_inherited_outputs","title":"<code>get_grouped_inherited_outputs(input_kg, namespace_prefix, entity_iri)</code>","text":"<p>Retrieves the inherited outputs for a given entity, grouped by data entity IRI.</p> <p>Parameters:</p> Name Type Description Default <code>input_kg</code> <code>Graph</code> <p>The input knowledge graph.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix for the entity.</p> required <code>entity_iri</code> <code>str</code> <p>The IRI of the entity.</p> required <p>Returns:</p> Type Description <code>List[Tuple[str, List[str]]]</code> <p>List[Tuple[str, List[str]]]: A list of tuples, where each tuple contains a property name and a list of input values.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def get_grouped_inherited_outputs(\n    input_kg: Graph, namespace_prefix: str, entity_iri: str\n) -&gt; List[Tuple[str, List[str]]]:\n    \"\"\"\n    Retrieves the inherited outputs for a given entity, grouped by data entity IRI.\n\n    Args:\n        input_kg (Graph): The input knowledge graph.\n        namespace_prefix (str): The namespace prefix for the entity.\n        entity_iri (str): The IRI of the entity.\n\n    Returns:\n        List[Tuple[str, List[str]]]: A list of tuples, where each tuple contains a property name and a list of input values.\n    \"\"\"\n    property_list = list(query_inherited_outputs(input_kg, namespace_prefix, entity_iri))\n    property_list = sorted(property_list, key=lambda elem: elem[0])  # prepare for grouping\n    property_list = [\n        (key, [(elem[1], elem[2]) for elem in group])\n        for key, group in itertools.groupby(property_list, key=lambda elem: elem[0])\n    ]\n\n    return property_list\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.get_method_by_task_iri","title":"<code>get_method_by_task_iri(kg, namespace_prefix, namespace, task_iri)</code>","text":"<p>Retrieves the method associated with a given task IRI from the knowledge graph.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix.</p> required <code>namespace</code> <code>Namespace</code> <p>The namespace.</p> required <code>task_iri</code> <code>str</code> <p>The IRI of the task.</p> required <p>Returns:</p> Type Description <code>Optional[Method]</code> <p>Optional[Method]: The method object associated with the task IRI, or None if no method is found.</p> <p>Raises:</p> Type Description <code>NoResultsError</code> <p>If the task with the given IRI is not connected with any method in the KG.</p> <code>NoResultsError</code> <p>If the method with the retrieved IRI doesn't have a type that is a subclass of <code>namespace.AtomicMethod</code>.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def get_method_by_task_iri(\n    kg: Graph,\n    namespace_prefix: str,\n    namespace: Namespace,\n    task_iri: str,\n) -&gt; Optional[Method]:\n    \"\"\"\n    Retrieves the method associated with a given task IRI from the knowledge graph.\n\n    Args:\n        kg (Graph): The knowledge graph.\n        namespace_prefix (str): The namespace prefix.\n        namespace (Namespace): The namespace.\n        task_iri (str): The IRI of the task.\n\n    Returns:\n        Optional[Method]: The method object associated with the task IRI, or None if no method is found.\n\n    Raises:\n        NoResultsError: If the task with the given IRI is not connected with any method in the KG.\n        NoResultsError: If the method with the retrieved IRI doesn't have a type that is a subclass of `namespace.AtomicMethod`.\n    \"\"\"\n\n    query_result = get_first_query_result_if_exists(\n        query_method_iri_by_task_iri,\n        kg,\n        namespace_prefix,\n        task_iri,\n    )\n    if query_result is None:\n        raise NoResultsError(f\"Task with IRI {task_iri} isn't connected with any method in the KG\")\n\n    method_iri = str(query_result[0])\n\n    query_result = get_first_query_result_if_exists(\n        query_instance_parent_iri,\n        kg,\n        method_iri,\n        namespace.AtomicMethod,\n    )\n\n    if query_result is None:\n        raise NoResultsError(\n            f\"Method with IRI {method_iri} doesn't have a type that is a subclass of {str(namespace.AtomicMethod)}\"\n        )\n\n    method_parent_iri = str(query_result[0])\n\n    return Method(method_iri, Entity(method_parent_iri))\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.get_method_grouped_params","title":"<code>get_method_grouped_params(method_iri, namespace_prefix, kg, inherited=False)</code>","text":"<p>Retrieves the (inherited) parameters for a given method, grouped by property IRI.</p> <p>Parameters:</p> Name Type Description Default <code>method_iri</code> <code>str</code> <p>The IRI of the method.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix.</p> required <code>kg</code> <code>Graph</code> <p>The knowledge graph.</p> required <p>Returns:</p> Type Description <code>List[Tuple[str, List[str]]]</code> <p>List[Tuple[str, List[str]]]: A list of tuples, where each tuple contains a parameter name and a list of its values.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def get_method_grouped_params(\n    method_iri: str, namespace_prefix: str, kg: Graph, inherited: bool = False\n) -&gt; List[Tuple[str, List[str]]]:\n    \"\"\"\n    Retrieves the (inherited) parameters for a given method, grouped by property IRI.\n\n    Args:\n        method_iri (str): The IRI of the method.\n        namespace_prefix (str): The namespace prefix.\n        kg (Graph): The knowledge graph.\n\n    Returns:\n        List[Tuple[str, List[str]]]: A list of tuples, where each tuple contains a parameter name and a list of its values.\n    \"\"\"\n    property_list = list(query_method_params_plus_inherited(method_iri, namespace_prefix, kg, inherited))\n    property_list = sorted(property_list, key=lambda elem: elem[0])  # prepare for grouping\n    property_list = [\n        (key, [pair[1] for pair in group]) for key, group in itertools.groupby(property_list, lambda elem: elem[0])\n    ]\n\n    return property_list\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.get_module_hierarchy_chain","title":"<code>get_module_hierarchy_chain(kg, namespace_prefix, method_iri)</code>","text":"<p>Retrieves the hierarchy chain of the modules starting from the module connected to the given method IRI.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix of the module.</p> required <code>method_iri</code> <code>str</code> <p>The IRI of the method.</p> required <p>Returns:</p> Name Type Description <code>List</code> <code>List</code> <p>The hierarchy chain of the module, represented as a list of module names.</p> <p>Raises:</p> Type Description <code>NoResultsError</code> <p>If the method doesn't have a subclass that is a subclass of {namespace_prefix}:Module.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def get_module_hierarchy_chain(\n    kg: Graph,\n    namespace_prefix: str,\n    method_iri: str,\n) -&gt; List:\n    \"\"\"\n    Retrieves the hierarchy chain of the modules starting from the module connected to the given method IRI.\n\n    Args:\n        kg (Graph): The knowledge graph.\n        namespace_prefix (str): The namespace prefix of the module.\n        method_iri (str): The IRI of the method.\n\n    Returns:\n        List: The hierarchy chain of the module, represented as a list of module names.\n\n    Raises:\n        NoResultsError: If the method doesn't have a subclass that is a subclass of {namespace_prefix}:Module.\n    \"\"\"\n\n    query_result = get_first_query_result_if_exists(\n        query_module_iri_by_method_iri,\n        kg,\n        method_iri,\n        namespace_prefix,\n    )\n\n    if query_result is None:\n        raise NoResultsError(\n            f\"Method with IRI {method_iri} doesn't have a subclass that is subclass of {namespace_prefix}:Module\"\n        )\n\n    module_iri = str(query_result[0])\n    module_chain_query_res = list(query_hierarchy_chain(kg, module_iri))\n    module_chain_query_res = [str(x[0]) for x in module_chain_query_res]\n    module_chain_iris = [module_iri] + module_chain_query_res[:-1]\n    module_chain_names = [iri.split(\"#\")[-1] for iri in module_chain_iris]\n\n    return module_chain_names\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.get_pipeline_and_first_task_iri","title":"<code>get_pipeline_and_first_task_iri(kg, namespace_prefix)</code>","text":"<p>Retrieves the pipeline and first task IRI from the knowledge graph.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the KG.</p> required <p>Returns:</p> Type Description <code>Tuple[str, str, str]</code> <p>Tuple[str, str, str]: A tuple containing the pipeline IRI, input data path, plots output directory, and task IRI.</p> <p>Raises:</p> Type Description <code>NoResultsError</code> <p>If the pipeline info is not found in the KG.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def get_pipeline_and_first_task_iri(kg: Graph, namespace_prefix: str) -&gt; Tuple[str, str, str]:\n    \"\"\"\n    Retrieves the pipeline and first task IRI from the knowledge graph.\n\n    Args:\n        kg (Graph): The knowledge graph to query.\n        namespace_prefix (str): The namespace prefix used in the KG.\n\n    Returns:\n        Tuple[str, str, str]: A tuple containing the pipeline IRI, input data path, plots output directory, and task IRI.\n\n    Raises:\n        NoResultsError: If the pipeline info is not found in the KG.\n    \"\"\"\n\n    # assume one pipeline per file\n    query_result = get_first_query_result_if_exists(\n        query_pipeline_info,\n        kg,\n        namespace_prefix,\n    )\n    if query_result is None:\n        raise NoResultsError(\"Pipeline info not found in the KG\")\n\n    pipeline_iri, input_data_path, plots_output_dir, task_iri = query_result\n\n    return str(pipeline_iri), str(input_data_path), str(plots_output_dir), str(task_iri)\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.query_data_entity_reference_iri","title":"<code>query_data_entity_reference_iri(kg, namespace_prefix, entity_iri)</code>","text":"<p>Queries the knowledge graph for the reference IRIs associated with a given entity.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the query.</p> required <code>entity_iri</code> <code>str</code> <p>The IRI of the entity to query.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_data_entity_reference_iri(kg: Graph, namespace_prefix, entity_iri: str) -&gt; query.Result:\n    \"\"\"\n    Queries the knowledge graph for the reference IRIs associated with a given entity.\n\n    Args:\n        kg (Graph): The knowledge graph to query.\n        namespace_prefix (str): The namespace prefix used in the query.\n        entity_iri (str): The IRI of the entity to query.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return kg.query(\n        f\"SELECT ?r WHERE {{ ?entity {namespace_prefix}:hasReference ?r . }}\",\n        initBindings={\n            \"entity\": URIRef(entity_iri),\n        },\n    )\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.query_hierarchy_chain","title":"<code>query_hierarchy_chain(kg, entity_iri)</code>","text":"<p>Queries the class hierarchy chain of a given entity in a knowledge graph.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <code>entity_iri</code> <code>str</code> <p>The IRI of the entity.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_hierarchy_chain(kg: Graph, entity_iri: str) -&gt; query.Result:\n    \"\"\"\n    Queries the class hierarchy chain of a given entity in a knowledge graph.\n\n    Args:\n        kg (Graph): The knowledge graph to query.\n        entity_iri (str): The IRI of the entity.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return kg.query(\n        f\"SELECT ?m2 WHERE {{ ?m1 rdfs:subClassOf+ ?m2 . }}\",\n        initBindings={\n            \"m1\": URIRef(entity_iri),\n        },\n    )\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.query_inherited_inputs","title":"<code>query_inherited_inputs(input_kg, namespace_prefix, entity_iri)</code>","text":"<p>Queries the input knowledge graph to find (inherited) inputs, their structure and the properties that connect them to the given entity.</p> <p>Parameters:</p> Name Type Description Default <code>input_kg</code> <code>Graph</code> <p>The input knowledge graph.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the SPARQL query.</p> required <code>entity_iri</code> <code>str</code> <p>The IRI of the entity for which inherited inputs are to be found.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the SPARQL query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_inherited_inputs(input_kg: Graph, namespace_prefix: str, entity_iri: str) -&gt; query.Result:\n    \"\"\"\n    Queries the input knowledge graph to find (inherited) inputs, their structure and the properties that connect them to the given entity.\n\n    Args:\n        input_kg (Graph): The input knowledge graph.\n        namespace_prefix (str): The namespace prefix used in the SPARQL query.\n        entity_iri (str): The IRI of the entity for which inherited inputs are to be found.\n\n    Returns:\n        query.Result: The result of the SPARQL query.\n\n    \"\"\"\n    return input_kg.query(\n        \"\\nSELECT ?m ?s ?p WHERE {?entity_iri rdfs:subClassOf* ?parent . \"\n        \"?p rdfs:domain ?parent .\"\n        \"?p rdfs:range ?m .\"\n        \"?p rdfs:subPropertyOf+ \" + namespace_prefix + \":hasInput .\"\n        \"OPTIONAL { ?m rdfs:subClassOf ?s . }\"\n        \"OPTIONAL { ?s rdfs:subClassOf+ \" + namespace_prefix + \":DataStructure . }\"\n        \"FILTER(?s != \" + namespace_prefix + \":DataEntity) . }\",\n        initBindings={\"entity_iri\": URIRef(entity_iri)},\n    )\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.query_inherited_outputs","title":"<code>query_inherited_outputs(input_kg, namespace_prefix, entity_iri)</code>","text":"<p>Queries the input knowledge graph to find (inherited) outputs, their structure and the properties that connect them to the given entity.</p> <p>Parameters:</p> Name Type Description Default <code>input_kg</code> <code>Graph</code> <p>The input knowledge graph.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the SPARQL query.</p> required <code>entity_iri</code> <code>str</code> <p>The IRI of the entity for which inherited inputs are to be found.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the SPARQL query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_inherited_outputs(input_kg: Graph, namespace_prefix: str, entity_iri: str) -&gt; query.Result:\n    \"\"\"\n    Queries the input knowledge graph to find (inherited) outputs, their structure and the properties that connect them to the given entity.\n\n    Args:\n        input_kg (Graph): The input knowledge graph.\n        namespace_prefix (str): The namespace prefix used in the SPARQL query.\n        entity_iri (str): The IRI of the entity for which inherited inputs are to be found.\n\n    Returns:\n        query.Result: The result of the SPARQL query.\n\n    \"\"\"\n    return input_kg.query(\n        \"\\nSELECT ?m ?s ?p WHERE {?entity_iri rdfs:subClassOf* ?parent . \"\n        \"?p rdfs:domain ?parent .\"\n        \"?p rdfs:range ?m .\"\n        \"?p rdfs:subPropertyOf+ \" + namespace_prefix + \":hasOutput .\"\n        \"?m rdfs:subClassOf ?s .\"\n        \"?s rdfs:subClassOf+ \" + namespace_prefix + \":DataStructure . \"\n        \"FILTER(?s != \" + namespace_prefix + \":DataEntity) . }\",\n        initBindings={\"entity_iri\": URIRef(entity_iri)},\n    )\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.query_input_triples","title":"<code>query_input_triples(kg, namespace_prefix, entity_iri)</code>","text":"<p>Queries the triples that connect the given entity with its inputs.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the query.</p> required <code>entity_iri</code> <code>str</code> <p>The IRI of the entity to query input triples for.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_input_triples(kg: Graph, namespace_prefix: str, entity_iri: str) -&gt; query.Result:\n    \"\"\"\n    Queries the triples that connect the given entity with its inputs.\n\n    Args:\n        kg (Graph): The knowledge graph to query.\n        namespace_prefix (str): The namespace prefix used in the query.\n        entity_iri (str): The IRI of the entity to query input triples for.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return kg.query(\n        f\"\"\"\n        SELECT DISTINCT ?s ?p ?o\n        WHERE {{\n            {{ ?s ?p ?o . FILTER(?p = {namespace_prefix}:hasInput) }}\n            UNION\n            {{ ?s ?p ?o . ?p rdfs:subPropertyOf* {namespace_prefix}:hasInput . }}\n        }}\n        \"\"\",\n        initBindings={\"s\": URIRef(entity_iri)},\n    )\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.query_instance_parent_iri","title":"<code>query_instance_parent_iri(kg, entity_iri, upper_class_uri_ref, negation_of_inheritance=False)</code>","text":"<p>Queries the knowledge graph to find the types of a given entity, that are subclasses of a given upper class.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <code>entity_iri</code> <code>str</code> <p>The IRI of the entity.</p> required <code>upper_class_uri_ref</code> <code>URIRef</code> <p>The URI reference of the upper class.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_instance_parent_iri(\n    kg: Graph, entity_iri: str, upper_class_uri_ref: URIRef, negation_of_inheritance: bool = False\n) -&gt; query.Result:\n    \"\"\"\n    Queries the knowledge graph to find the types of a given entity, that are subclasses of a given upper class.\n\n    Args:\n        kg (Graph): The knowledge graph to query.\n        entity_iri (str): The IRI of the entity.\n        upper_class_uri_ref (URIRef): The URI reference of the upper class.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    query_string = f\"SELECT ?t WHERE {{ ?entity rdf:type ?t .\"\n\n    if negation_of_inheritance:\n        query_string += f\"FILTER NOT EXISTS {{ ?t rdfs:subClassOf* ?upper_class . }} }}\"\n    else:\n        query_string += f\"?t rdfs:subClassOf* ?upper_class . }}\"\n\n    return kg.query(\n        query_string,\n        initBindings={\n            \"entity\": URIRef(entity_iri),\n            \"upper_class\": upper_class_uri_ref,\n        },\n    )\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.query_linked_task_and_property","title":"<code>query_linked_task_and_property(kg, namespace_prefix, method_iri)</code>","text":"<p>Queries the linked task and linking property based on the given method IRI.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The RDF graph to query.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix for the AtomicTask.</p> required <code>method_iri</code> <code>str</code> <p>The IRI of the method.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_linked_task_and_property(kg: Graph, namespace_prefix, method_iri: str) -&gt; query.Result:\n    \"\"\"\n    Queries the linked task and linking property based on the given method IRI.\n\n    Args:\n        kg (Graph): The RDF graph to query.\n        namespace_prefix (str): The namespace prefix for the AtomicTask.\n        method_iri (str): The IRI of the method.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return kg.query(\n        f\"SELECT ?task WHERE {{ ?task ?m_property ?m .\"\n        f\"                      ?task rdfs:subPropertyOf* {namespace_prefix}:AtomicTask .}}\",\n        initBindings={\"m\": URIRef(method_iri)},\n    )\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.query_method_iri_by_task_iri","title":"<code>query_method_iri_by_task_iri(kg, namespace_prefix, task_iri)</code>","text":"<p>Queries the method IRI associated with a given task IRI.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The RDF graph to query.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix for the method property.</p> required <code>task_iri</code> <code>str</code> <p>The IRI of the task.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_method_iri_by_task_iri(kg: Graph, namespace_prefix, task_iri: str) -&gt; query.Result:\n    \"\"\"\n    Queries the method IRI associated with a given task IRI.\n\n    Args:\n        kg (Graph): The RDF graph to query.\n        namespace_prefix (str): The namespace prefix for the method property.\n        task_iri (str): The IRI of the task.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return kg.query(\n        f\"SELECT ?m WHERE {{ ?task ?m_property ?m .\"\n        f\"                   ?m_property rdfs:subPropertyOf* {namespace_prefix}:hasMethod .}}\",\n        initBindings={\"task\": URIRef(task_iri)},\n    )\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.query_method_params","title":"<code>query_method_params(method_iri, namespace_prefix, kg)</code>","text":"<p>Queries the parameters and their ranges for a given method IRI.</p> <p>Parameters:</p> Name Type Description Default <code>method_iri</code> <code>str</code> <p>The IRI (Internationalized Resource Identifier) of the method.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the knowledge graph.</p> required <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query, containing the parameters of the method.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_method_params(method_iri: str, namespace_prefix: str, kg: Graph) -&gt; query.Result:\n    \"\"\"\n    Queries the parameters and their ranges for a given method IRI.\n\n    Args:\n        method_iri (str): The IRI (Internationalized Resource Identifier) of the method.\n        namespace_prefix (str): The namespace prefix used in the knowledge graph.\n        kg (Graph): The knowledge graph to query.\n\n    Returns:\n        query.Result: The result of the query, containing the parameters of the method.\n    \"\"\"\n    return kg.query(\n        f\"\\nSELECT ?p ?r WHERE {{?p rdfs:domain ?task_iri . \"\n        f\"?p rdfs:range ?r . \"\n        f\"?p rdfs:subPropertyOf {namespace_prefix}:hasParameter . }}\",\n        initBindings={\"task_iri\": URIRef(method_iri)},\n    )\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.query_method_params_plus_inherited","title":"<code>query_method_params_plus_inherited(method_iri, namespace_prefix, kg, inherited=False)</code>","text":"<p>Queries the parameters and their ranges for a given method IRI, including inherited parameters.</p> <p>Parameters:</p> Name Type Description Default <code>method_iri</code> <code>str</code> <p>The IRI of the method.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix for the <code>hasParameter</code> property.</p> required <code>kg</code> <code>Graph</code> <p>The RDF graph to query.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_method_params_plus_inherited(\n    method_iri: str, namespace_prefix: str, kg: Graph, inherited=False\n) -&gt; query.Result:\n    \"\"\"\n    Queries the parameters and their ranges for a given method IRI, including inherited parameters.\n\n    Args:\n        method_iri (str): The IRI of the method.\n        namespace_prefix (str): The namespace prefix for the `hasParameter` property.\n        kg (Graph): The RDF graph to query.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    if inherited:\n        return kg.query(\n            f\"\\nSELECT ?p ?r WHERE {{?p rdfs:domain ?domain . \"\n            f\"?method_iri rdfs:subClassOf* ?domain . \"\n            f\"?p rdfs:range ?r . \"\n            f\"?p rdfs:subPropertyOf {namespace_prefix}:hasParameter . }}\",\n            initBindings={\"method_iri\": URIRef(method_iri)},\n        )\n\n    return kg.query(\n        f\"\\nSELECT ?p ?r WHERE {{?p rdfs:domain ?method_iri . \"\n        f\"?p rdfs:range ?r . \"\n        f\"?p rdfs:subPropertyOf {namespace_prefix}:hasParameter . }}\",\n        initBindings={\"method_iri\": URIRef(method_iri)},\n    )\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.query_method_properties_and_methods","title":"<code>query_method_properties_and_methods(input_kg, namespace_prefix, entity_parent_iri)</code>","text":"<p>Queries the input knowledge graph for methods and the properties that connect them to the given entity.</p> <p>Parameters:</p> Name Type Description Default <code>input_kg</code> <code>Graph</code> <p>The input knowledge graph to query.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the query.</p> required <code>entity_parent_iri</code> <code>str</code> <p>The IRI of the parent entity.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_method_properties_and_methods(input_kg: Graph, namespace_prefix: str, entity_parent_iri: str) -&gt; query.Result:\n    \"\"\"\n    Queries the input knowledge graph for methods and the properties that connect them to the given entity.\n\n    Args:\n        input_kg (Graph): The input knowledge graph to query.\n        namespace_prefix (str): The namespace prefix used in the query.\n        entity_parent_iri (str): The IRI of the parent entity.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return input_kg.query(\n        \"\\nSELECT ?p ?m WHERE {?p rdfs:domain ?entity_iri . \"\n        \"?p rdfs:range ?m . \"\n        \"?m rdfs:subClassOf \" + namespace_prefix + \":AtomicMethod . }\",\n        initBindings={\"entity_iri\": URIRef(entity_parent_iri)},\n    )\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.query_module_iri_by_method_iri","title":"<code>query_module_iri_by_method_iri(kg, method_iri, namespace_prefix)</code>","text":"<p>Queries the knowledge graph to retrieve the module IRI associated with a given method IRI.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The Knowledge Graph to query.</p> required <code>method_iri</code> <code>str</code> <p>The IRI of the method.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the query.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_module_iri_by_method_iri(\n    kg: Graph,\n    method_iri: str,\n    namespace_prefix: str,\n) -&gt; query.Result:\n    \"\"\"\n    Queries the knowledge graph to retrieve the module IRI associated with a given method IRI.\n\n    Args:\n        kg (Graph): The Knowledge Graph to query.\n        method_iri (str): The IRI of the method.\n        namespace_prefix (str): The namespace prefix used in the query.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return kg.query(\n        f\"SELECT ?module WHERE {{ ?method rdfs:subClassOf ?module . \"\n        f\"                        ?module rdfs:subClassOf+ {namespace_prefix}:Module . \"\n        f\"                        FILTER NOT EXISTS {{ ?module rdfs:subClassOf+ {namespace_prefix}:Method . }} . }}\",\n        initBindings={\"method\": URIRef(method_iri)},\n    )\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.query_output_triples","title":"<code>query_output_triples(kg, namespace_prefix, entity_iri)</code>","text":"<p>Queries the triples that connect the given entity with its outputs.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the query.</p> required <code>entity_iri</code> <code>str</code> <p>The IRI of the entity to query input triples for.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_output_triples(kg: Graph, namespace_prefix: str, entity_iri: str) -&gt; query.Result:\n    \"\"\"\n    Queries the triples that connect the given entity with its outputs.\n\n    Args:\n        kg (Graph): The knowledge graph to query.\n        namespace_prefix (str): The namespace prefix used in the query.\n        entity_iri (str): The IRI of the entity to query input triples for.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return kg.query(\n        f\"\"\"\n        SELECT DISTINCT ?s ?p ?o\n        WHERE {{\n            {{ ?s ?p ?o . FILTER(?p = {namespace_prefix}:hasOutput) }}\n            UNION\n            {{ ?s ?p ?o . ?p rdfs:subPropertyOf* {namespace_prefix}:hasOutput . }}\n        }}\n        \"\"\",\n        initBindings={\"s\": URIRef(entity_iri)},\n    )\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.query_parameters_triples","title":"<code>query_parameters_triples(kg, namespace_prefix, entity_iri)</code>","text":"<p>Queries the triples that connect the given entity with its parameters.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the query.</p> required <code>entity_iri</code> <code>str</code> <p>The IRI of the entity to query input triples for.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_parameters_triples(kg: Graph, namespace_prefix: str, entity_iri: str) -&gt; query.Result:\n    \"\"\"\n    Queries the triples that connect the given entity with its parameters.\n\n    Args:\n        kg (Graph): The knowledge graph to query.\n        namespace_prefix (str): The namespace prefix used in the query.\n        entity_iri (str): The IRI of the entity to query input triples for.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return kg.query(\n        f\"\"\"\n        SELECT ?s ?p ?o\n        WHERE {{\n            {{ ?s ?p ?o . ?p rdfs:subPropertyOf* {namespace_prefix}:hasParameter . }}\n        }}\n        \"\"\",\n        initBindings={\"s\": URIRef(entity_iri)},\n    )\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.query_parent_classes","title":"<code>query_parent_classes(kg, entity_iri)</code>","text":"<p>Queries the knowledge graph to retrieve the parent classes of a given entity.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <code>entity_iri</code> <code>str</code> <p>The IRI of the entity.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_parent_classes(kg: Graph, entity_iri: str) -&gt; query.Result:\n    \"\"\"\n    Queries the knowledge graph to retrieve the parent classes of a given entity.\n\n    Args:\n        kg (Graph): The knowledge graph to query.\n        entity_iri (str): The IRI of the entity.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return kg.query(\n        f\"SELECT ?c WHERE {{ ?entity rdfs:subClassOf ?c . }}\",\n        initBindings={\"entity\": URIRef(entity_iri)},\n    )\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.query_pipeline_info","title":"<code>query_pipeline_info(kg, namespace_prefix)</code>","text":"<p>Queries the knowledge graph for pipeline information.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the query.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_pipeline_info(kg: Graph, namespace_prefix: str) -&gt; query.Result:\n    \"\"\"\n    Queries the knowledge graph for pipeline information.\n\n    Args:\n        kg (Graph): The knowledge graph to query.\n        namespace_prefix (str): The namespace prefix used in the query.\n\n    Returns:\n        query.Result: The result of the query.\n\n    \"\"\"\n    return kg.query(\n        f\"\\nSELECT ?p ?i ?o ?t WHERE {{?p rdf:type {namespace_prefix}:Pipeline ;\"\n        f\"                          {namespace_prefix}:hasInputDataPath ?i ;\"\n        f\"                          {namespace_prefix}:hasPlotsOutputDir ?o ;\"\n        f\"                          {namespace_prefix}:hasStartTask ?t . }}\"\n    )\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.query_subclasses_of","title":"<code>query_subclasses_of(class_iri, kg)</code>","text":"<p>Queries the knowledge graph to retrieve the subclasses of a given class.</p> <p>Parameters:</p> Name Type Description Default <code>class_iri</code> <code>str</code> <p>The IRI of the class.</p> required <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_subclasses_of(class_iri: str, kg: Graph) -&gt; query.Result:\n    \"\"\"\n    Queries the knowledge graph to retrieve the subclasses of a given class.\n\n    Args:\n        class_iri (str): The IRI of the class.\n        kg (Graph): The knowledge graph to query.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return kg.query(\n        \"\\nSELECT ?t WHERE {?t rdfs:subClassOf ?class_iri . }\",\n        initBindings={\"class_iri\": class_iri},\n    )\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.query_top_level_task_iri","title":"<code>query_top_level_task_iri(kg, task_iri, namespace_prefix)</code>","text":"<p>Queries the knowledge graph to find the top-level task for a given task.</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>The knowledge graph to query.</p> required <code>task_iri</code> <code>str</code> <p>The IRI of the task.</p> required <code>namespace_prefix</code> <code>str</code> <p>The namespace prefix used in the query.</p> required <p>Returns:</p> Type Description <code>Result</code> <p>query.Result: The result of the query.</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def query_top_level_task_iri(kg: Graph, task_iri: str, namespace_prefix: str) -&gt; query.Result:\n    \"\"\"\n    Queries the knowledge graph to find the top-level task for a given task.\n\n    Args:\n        kg (Graph): The knowledge graph to query.\n        task_iri (str): The IRI of the task.\n        namespace_prefix (str): The namespace prefix used in the query.\n\n    Returns:\n        query.Result: The result of the query.\n    \"\"\"\n    return kg.query(\n        f\"SELECT ?t2 WHERE {{ ?t1 rdfs:subClassOf* ?t2 .\"\n        f\"                    ?t2 rdfs:subClassOf {namespace_prefix}:Task . \"\n        f\"                    FILTER(?t2 != {namespace_prefix}:AtomicTask) . }}\",\n        initBindings={\n            \"t1\": URIRef(task_iri),\n        },\n    )\n</code></pre>"},{"location":"reference/utils/string_utils/","title":"string_utils","text":""},{"location":"reference/utils/string_utils/#exe_kg_lib.utils.string_utils.camel_to_snake","title":"<code>camel_to_snake(text)</code>","text":"<p>Converts a camel case string to snake case.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The camel case string to be converted.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The snake case version of the input string.</p> Source code in <code>exe_kg_lib/utils/string_utils.py</code> <pre><code>def camel_to_snake(text: str) -&gt; str:\n    \"\"\"\n    Converts a camel case string to snake case.\n\n    Args:\n        text (str): The camel case string to be converted.\n\n    Returns:\n        str: The snake case version of the input string.\n    \"\"\"\n    text = re.sub(\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", text)\n    return re.sub(\"([a-z0-9])([A-Z])\", r\"\\1_\\2\", text).lower()\n</code></pre>"},{"location":"reference/utils/string_utils/#exe_kg_lib.utils.string_utils.class_name_to_method_name","title":"<code>class_name_to_method_name(class_name)</code>","text":"<p>Converts a class name to a method name by removing the word \"Method\" from the end of the class name.</p> <p>Parameters:</p> Name Type Description Default <code>class_name</code> <code>str</code> <p>The class name to convert.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The converted method name.</p> Source code in <code>exe_kg_lib/utils/string_utils.py</code> <pre><code>def class_name_to_method_name(class_name: str) -&gt; str:\n    \"\"\"\n    Converts a class name to a method name by removing the word \"Method\" from the end of the class name.\n\n    Args:\n        class_name (str): The class name to convert.\n\n    Returns:\n        str: The converted method name.\n    \"\"\"\n    name = re.sub(\"Method$\", \"\", class_name)\n    return name\n</code></pre>"},{"location":"reference/utils/string_utils/#exe_kg_lib.utils.string_utils.class_name_to_module_name","title":"<code>class_name_to_module_name(class_name)</code>","text":"<p>Converts a class name to a module name by removing the \"Module\" suffix and converting it to snake case.</p> <p>Parameters:</p> Name Type Description Default <code>class_name</code> <code>str</code> <p>The class name to convert.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The converted module name.</p> Source code in <code>exe_kg_lib/utils/string_utils.py</code> <pre><code>def class_name_to_module_name(class_name: str) -&gt; str:\n    \"\"\"\n    Converts a class name to a module name by removing the \"Module\" suffix and converting it to snake case.\n\n    Args:\n        class_name (str): The class name to convert.\n\n    Returns:\n        str: The converted module name.\n    \"\"\"\n    name = re.sub(\"Module$\", \"\", class_name)\n    return camel_to_snake(name)\n</code></pre>"},{"location":"reference/utils/string_utils/#exe_kg_lib.utils.string_utils.concat_paths","title":"<code>concat_paths(*paths)</code>","text":"<p>Concatenates multiple paths into a single path.</p> <p>Parameters:</p> Name Type Description Default <code>*paths</code> <code>Union[str, Path]</code> <p>Variable number of paths to be concatenated.</p> <code>()</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The concatenated path.</p> Example <p>concat_paths('path1', 'path2', 'path3') 'path1/path2/path3'</p> Source code in <code>exe_kg_lib/utils/string_utils.py</code> <pre><code>def concat_paths(*paths: Union[str, Path]) -&gt; str:\n    \"\"\"\n    Concatenates multiple paths into a single path.\n\n    Args:\n        *paths: Variable number of paths to be concatenated.\n\n    Returns:\n        str: The concatenated path.\n\n    Example:\n        &gt;&gt;&gt; concat_paths('path1', 'path2', 'path3')\n        'path1/path2/path3'\n    \"\"\"\n    output_path = \"\"\n    for path in paths:\n        if not output_path:\n            output_path = path\n        else:\n            output_path = (\n                output_path / path\n                if isinstance(output_path, Path) or isinstance(path, Path)\n                else f\"{output_path}/{path}\"\n            )\n\n    return str(output_path)\n</code></pre>"},{"location":"reference/utils/string_utils/#exe_kg_lib.utils.string_utils.get_instance_name","title":"<code>get_instance_name(instance_type, instance_number, pipeline_name)</code>","text":"<p>Generates a unique instance name based on the instance type and number.</p> <p>Parameters:</p> Name Type Description Default <code>instance_type</code> <code>str</code> <p>The type of the instance.</p> required <code>instance_number</code> <code>int</code> <p>The number of the instance for this type.</p> required <code>pipeline_name</code> <code>str</code> <p>The name of the pipeline.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The generated instance name.</p> Source code in <code>exe_kg_lib/utils/string_utils.py</code> <pre><code>def get_instance_name(instance_type: str, instance_number: int, pipeline_name: str) -&gt; str:\n    \"\"\"\n    Generates a unique instance name based on the instance type and number.\n\n    Args:\n        instance_type (str): The type of the instance.\n        instance_number (int): The number of the instance for this type.\n        pipeline_name (str): The name of the pipeline.\n\n    Returns:\n        str: The generated instance name.\n    \"\"\"\n    return f\"{instance_type}{str(instance_number)}_{pipeline_name}\"\n</code></pre>"},{"location":"reference/utils/string_utils/#exe_kg_lib.utils.string_utils.get_task_output_name","title":"<code>get_task_output_name(output_type, task_instance_name, method_type)</code>","text":"<p>Generates the name for a task's output based on the output type, task instance name, and method type.</p> <p>Parameters:</p> Name Type Description Default <code>output_type</code> <code>str</code> <p>The type of the output.</p> required <code>task_instance_name</code> <code>str</code> <p>The name of the task instance.</p> required <code>method_type</code> <code>str</code> <p>The type of the method.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The generated task output name that follows the format \"DataOutNameEx_TaskTypeEx1_PipelineName_MethodEx\" (see TASK_OUTPUT_NAME_REGEX above for details).</p> Source code in <code>exe_kg_lib/utils/string_utils.py</code> <pre><code>def get_task_output_name(output_type: str, task_instance_name: str, method_type: str) -&gt; str:\n    \"\"\"\n    Generates the name for a task's output based on the output type, task instance name, and method type.\n\n    Args:\n        output_type (str): The type of the output.\n        task_instance_name (str): The name of the task instance.\n        method_type (str): The type of the method.\n\n    Returns:\n        str: The generated task output name that follows the format \"DataOutNameEx_TaskTypeEx1_PipelineName_MethodEx\" (see TASK_OUTPUT_NAME_REGEX above for details).\n    \"\"\"\n    return f\"{output_type}_{task_instance_name}_{method_type}\"\n</code></pre>"},{"location":"reference/utils/string_utils/#exe_kg_lib.utils.string_utils.prettify_data_entity_name","title":"<code>prettify_data_entity_name(data_entity_name)</code>","text":"<p>Prettifies the given data entity name by removing unnecessary prefixes and components.</p> <p>Parameters:</p> Name Type Description Default <code>data_entity_name</code> <code>str</code> <p>The name of the data entity.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The prettified data entity name.</p> Source code in <code>exe_kg_lib/utils/string_utils.py</code> <pre><code>def prettify_data_entity_name(data_entity_name: str) -&gt; str:\n    \"\"\"\n    Prettifies the given data entity name by removing unnecessary prefixes and components.\n\n    Args:\n        data_entity_name (str): The name of the data entity.\n\n    Returns:\n        str: The prettified data entity name.\n    \"\"\"\n    match = re.match(TASK_OUTPUT_NAME_REGEX, data_entity_name)\n    if match:\n        # data_entity_name refers to a data entity that is an output of a previous task\n        task_output_name = match.group(1)\n        task_output_name = re.sub(r\"^DataOut\", \"\", task_output_name)\n        task_name = match.group(2)\n        task_instance_number = match.group(3)\n        method_type = match.group(5)\n\n        return f\"{task_name}{task_instance_number} {method_type} {task_output_name}\"\n\n    return data_entity_name\n</code></pre>"},{"location":"reference/utils/string_utils/#exe_kg_lib.utils.string_utils.property_iri_to_field_name","title":"<code>property_iri_to_field_name(property_iri)</code>","text":"<p>Converts a property IRI to a Python field name.</p> <p>Parameters:</p> Name Type Description Default <code>property_iri</code> <code>str</code> <p>The property IRI.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The converted field name.</p> Source code in <code>exe_kg_lib/utils/string_utils.py</code> <pre><code>def property_iri_to_field_name(property_iri: str) -&gt; str:\n    \"\"\"\n    Converts a property IRI to a Python field name.\n\n    Args:\n        property_iri (str): The property IRI.\n\n    Returns:\n        str: The converted field name.\n    \"\"\"\n    snake_case = camel_to_snake(property_iri.split(\"#\")[1])\n    snake_case = re.sub(\"^has_\", \"\", snake_case)\n    snake_case = re.sub(\"^param_\", \"\", snake_case)\n    return snake_case\n</code></pre>"}]}