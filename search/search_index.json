{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Python library for conveniently constructing and executing Machine Learning (ML) pipelines represented by Knowledge Graphs (KGs). It features a coding interface and a CLI, and allows the user to:</p> <ol> <li>Construct an ML pipeline that gets a CSV as input and processes the data using any of the available tasks and methods.</li> <li>Save the constructed pipeline as a KG in Turtle format.</li> <li>Execute the generated KG.</li> </ol> <p>The coding interface is demonstrated with three sample Python files. The pipelines represented by the generated sample KGs are briefly explained below:</p> <ol> <li>ML pipeline: Loads features and labels from an input CSV dataset, splits the data, trains and tests a k-NN model, and visualizes the prediction errors.</li> <li>Statistics pipeline: Loads a feature from an input CSV dataset, normalizes it, and plots its values (before and after normalization) using a scatter plot.</li> <li>Visualization pipeline: Loads a feature from an input CSV dataset and plots its values using a line plot.</li> </ol> <p>Under the hood, ExeKGLib uses well-known Python libraries for data processing and visualization and performing predictions such as pandas, matplotlib, and scikit-learn.</p> <p>ExeKGLib is part of the following paper submitted to ESWC 2023: Klironomos A., Zhou B., Tan Z., Zheng Z., Gad-Elrab M., Paulheim H., Kharlamov E.: ExeKGLib: A Python Library for Machine Learning Analytics based on Knowledge Graphs</p>"},{"location":"adding-new-task-and-method/","title":"Adding a new ML-related task and method","text":""},{"location":"adding-new-task-and-method/#adding-a-new-ml-related-task-and-method","title":"Adding a new ML-related task and method","text":""},{"location":"adding-new-task-and-method/#adding-semantic-components-to-a-bottom-level-kg-schema","title":"Adding semantic components to a bottom-level KG schema","text":"<p>When extending an existing bottom-level KG schema, naming conventions should be followed and can be inferred by the below example code snippets. The placeholders used are specified below each snippet. For the sake of example, the namespace prefix of the ML KG schema (<code>ml</code>) is used in the following code snippets.</p> <p>To add the required semantic components, the following steps should be followed:</p> <ol> <li>Open the <code>.ttl</code> file of the desired bottom-level KG schema, found in the relevant repo.</li> <li> <p>Add a new sub-class of ds:AtomicTask.</p> <p><pre><code>ml:NewTask\n    rdf:type        owl:Class ;\n    rdfs:subClassOf ds:AtomicTask .\n</code></pre> In the above example, <code>NewTask</code> should be replaced with the desired task name. 3. Add a new sub-class of ds:AtomicMethod.</p> <p><pre><code>ml:NewMethod\n    rdf:type        owl:Class ;\n    rdfs:subClassOf ds:AtomicMethod .\n</code></pre> In the above example, <code>NewMethod</code> should be replaced with the desired method name. 4. Add a new sub-property of ds:hasMethod.</p> <p><pre><code>ml:hasNewMethod\n    rdf:type           owl:ObjectProperty ;\n    rdfs:subPropertyOf ds:hasMethod ;\n    rdfs:domain        ml:NewTask ;\n    rdfs:range         ml:NewMethod .\n</code></pre> In the above example, <code>NewMethod</code> and <code>NewTask</code> should be replaced with the desired method and task names respectively. 5. Add and link the desired input and output entities for the new task.</p> <p><pre><code>ml:DataIn1NewTask\n    rdf:type        owl:Class ;\n    rdfs:subClassOf ds:DataEntity .\n\n...\n\nml:DataOut1NewTask\n    rdf:type        owl:Class ;\n    rdfs:subClassOf ds:DataEntity .\n\n...\n\nml:hasNewTaskInput\n    rdf:type           owl:ObjectProperty ;\n    rdfs:subPropertyOf ds:hasInput ;\n    rdfs:domain        ml:NewTask ;\n    rdfs:range         ml:DataIn1NewTask, ... .\n\nml:hasNewTaskOutput\n    rdf:type           owl:ObjectProperty ;\n    rdfs:subPropertyOf ds:hasOutput ;\n    rdfs:domain        ml:NewTask ;\n    rdfs:range         ml:DataOut1NewTask, ... .\n</code></pre>    In the above example, the occurences of number <code>1</code> in the input and output entity names should be replaced with the desired input and output names respectively. Also, <code>NewTask</code> should be replaced with the desired task name. 6. Add the desired data properties for the new method.</p> <p><pre><code>ml:hasNewProperty1\n    rdf:type    owl:DatatypeProperty ;\n    rdfs:domain ml:NewMethod ;\n    rdfs:range  xsd:float .\n\nml:hasNewProperty2\n    rdf:type    owl:DatatypeProperty ;\n    rdfs:domain ml:NewMethod ;\n    rdfs:range  xsd:string .\n</code></pre> In the above example, <code>NewProperty1</code> and <code>NewProperty2</code> should be replaced with the desired property names.</p> </li> </ol>"},{"location":"adding-new-task-and-method/#adding-a-relevant-python-class","title":"Adding a relevant Python class","text":"<p>To achieve this, a sub-class of <code>exe_kg_lib.classes.task.Task</code> should be added to an existing module of <code>exe_kg_lib.classes.tasks</code> package according to the conventions mentioned in the package's documentation.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#tldr-10-steps-to-your-first-pull-request","title":"TL;DR: 10 Steps To Your First Pull Request","text":"<p>Ok, this is a long document so let's TL;DR this. The following recipe quickly outlines ten steps to your first successful contribution in the form of a pull request.</p> <ol> <li>First, create an issue in our issue tracker and describe the contribution you intend to make.</li> <li>Before you start coding, create a fork and a local branch, on which you will make    your changes.</li> <li>Make the changes in your local git repository and commit.</li> <li>When you'd like to share your code and/or start a pull request to get feedback, push your commits to the repository.</li> <li>Open the Branches view in GitHub. Your newly pushed branch should show up there. Usually, all repositories have an    associated build job which will pick up your new branch and build it once you open a PR.</li> <li>If the build fails and you know how to fix it, please do. If you don't, go ahead and contact us via the pull request    to allow us to help you make the build green.</li> <li>Enter a meaningful title, prefixed with the issue number and possibly a slightly longer version of your branch name.    Here is an example: <code>#1 - Add missing documentation</code></li> <li>Briefly describe the changes you are submitting in the Description field. The goal here is to make the life of the    reviewers as easy as possible by explaining what you did and why. The description can be formatted as markdown, so    feel free to format, add code examples, link to specific lines of code or even add sketches or diagrams. You can also    @-mention anyone on GitHub to inform them of the PR (usually we do that by prefixing the @-mention with <code>/CC</code> or <code>/FYI</code>).</li> <li>Every pull request will be reviewed and approved by at least one maintainer (see <code>README.md</code>) before it is merged.</li> <li>Add at least one of the maintainers as reviewer.</li> </ol> <p>This is, in a nutshell, how you make contributions to this community. It may sound complicated at first, but you'll quickly internalize the steps and will be able to create a pull request in mere minutes or less. Please find a detailed description in the How to Contribute section.</p>"},{"location":"contributing/#whom-to-contact-in-case-of-questions","title":"Whom to Contact in Case of Questions?","text":"<p>Communication is usually done via Issues and PRs. If, for some reason, you prefer kicking off the collaboration in a personal conversation, please contact the maintainers of this repository, which are listed in this repository's <code>README.md</code>.</p>"},{"location":"contributing/#how-to-submit-a-bug-report","title":"How to Submit a Bug Report?","text":"<p>Found a bug? Great! A core task in improving our product is to identify any flaws that may be present. The best place to report a bug is to create an issue in our issue tracker.</p>"},{"location":"contributing/#how-to-submit-a-feature-request","title":"How to Submit a Feature Request?","text":"<p>If you have suggestions for us on how to improve our code or our documentation or have a new feature in mind, please by all means do let us know. The same rules apply as for bug reports: add a new issue outlining your suggestion in our issue tracker.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute?","text":"<p>If you have fixed a bug or have developed that new feature you would like to make available to your fellow users, or even if you have fixed whitespace or formatting issues, we'd like to encourage you to contribute that to our codebase. In this repository, we use pull requests to facilitate all contributions. Every pull request will be peer-reviewed by at least one community member, which is a great way to get in touch with each other.</p>"},{"location":"contributing/#clean-code","title":"Clean Code","text":"<p>More important than writing code that adheres to our styleguide is writing Clean Code. We consider code to be clean, if it</p> <ul> <li>works,</li> <li>is easy to understand,</li> <li>is easy to modify and</li> <li>is easy to test.</li> </ul> <p>Any code contribution will be reviewed by us with respect to these criteria. We are more than happy and indeed consider it a core part of being BIOS to invest time mentoring junior developers to help them create cleaner code and to improve future contributions.</p> <p>In addition to these principles of clean code, we also try to design our architectures for participation. That, to us, means to avoid unnecessary complexity, tight coupling or complex dependency relationships.</p>"},{"location":"contributing/#testing-conventions","title":"Testing Conventions","text":"<p>We are convinced that writing testable code and writing tests is a precondition for any software to be maintainable. Even though we do not prescribe fixed coverage thresholds for our tests, we encourage (and often will require) you to write tests for code that needs to be maintainable where the effort is not excessive. This means, that we</p> <ul> <li>aim to write code with testability in mind (following the test first principle)</li> <li>write tests for everything we can test</li> <li>expose a submitted bug with a test first, before we implement a fix.</li> </ul> <p>We also aim to write our tests such that they can be read as a specification (because we usually don't spend time writing those). In practice, this means that we use long, verbose and expressive names for tests which convey the condition being tested.</p> <p>In our experience, writing tests can actually be a lot of fun. As a programmer, you have more leeway to experiment and try new programming approaches when writing tests. That is why we often try out new language features in our test code, first. And if you're following the test first principle, it's always quite rewarding to see those red test cases continue to turn green, once the implementation is complete. Finally, only adequate tests will empower you to continuously improve your codebase with refactoring, as this provides the reassurance that you didn't break anything accidentally.</p>"},{"location":"contributing/#writing-documentation","title":"Writing Documentation","text":"<p>We follow these principles when documenting code:</p> <ul> <li>We aim at keeping documentation as close the the asset being documented as possible. That is, where sensible, we use   inline code documentation.</li> <li>We use Mermaid for specifying diagrams in the code in order to be tool agnostic and allow everybody to adapt and   improve it.</li> <li>We favor Markdown or other text based means of generating documentation and try not to use proprietary   tools, such as Word or PowerPoint for that.</li> <li>We aim at providing our users with easy to understand instructions on how to use our code in each repositories <code>README.md</code>.</li> <li>We favor code examples over analytical descriptions of our codebase.</li> </ul>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<p>Pull requests are our main vehicle for submitting, reviewing and merging new code into our codebase. A pull request is more than just an easy interface to git: it is a powerful collaboration and communication tool. They are especially well suited to share knowledge and onboard new contributors. So if you are new to te community, submitting pull requests is an excellent way for you to engage with us and for us to help you get started. Discussions and the Q&amp;A that often accompanies pull requests are archived and linkable and we thus use them to disseminate knowledge about our codebase.</p>"},{"location":"contributing/#general-tips","title":"General Tips","text":"<ul> <li>Keep your PRs as small as possible. The smaller the PR the higher the velocity of review and acceptance.</li> <li>Avoid conflating multiple issues in one PR.</li> <li>Aside from that usually leading to huge PRs and it making the job of a reviewer unnecessarily harder, it will also   confuse the automated T&amp;R issue state transition feature we use.</li> <li>Write a good description to allow the reviewer to quickly get an overview of your changes.</li> <li>Don't add more than two reviewers if you expect all of them to review. This will most likely block you.</li> </ul>"},{"location":"contributing/#other-contributions","title":"Other Contributions","text":"<p>You don't have to be a coder to make a valuable contribution to this community! There are many contributions that you can make as a non-coder that will be very valuable to the community, such as</p> <ul> <li>giving feedback of any kind,</li> <li>reporting bugs,</li> <li>requesting features,</li> <li>adding new or improvements existing documentation,</li> <li>helping other users to use our software,</li> <li>asking and/or answering questions in our forums,</li> <li>promoting BIOS, Social Coding, our community and our software within Bosch or</li> <li>designing artwork for both our software, our wiki or our Bosch connect presence.</li> </ul> <p>May the source be with you!</p>"},{"location":"extending/","title":"Extending","text":"<p>The library can be extended by adding a new task and method to support new ML-related operations.</p> <p>To perform this type of ExeKGLib extension, there are 3 required steps:</p> <ol> <li>Selection of a relevant bottom-level KG schema (Statistics, ML, or Visualization) according to the type of the new task and method.</li> <li>Addition of new semantic components (entities, properties, etc) to the selected KG schema.</li> <li>Addition of a Python class to the corresponding module of <code>exe_kg_lib.classes.tasks</code> package.</li> </ol> <p>For steps 2 and 3, refer to the relevant page of ExeKGLib's website.</p>"},{"location":"external-resources/","title":"External resources","text":""},{"location":"external-resources/#kg-schemata","title":"KG schemata","text":"<ul> <li>Top-level: Data Science</li> <li>Bottom-level: Visualization | Statistics | Machine Learning</li> </ul> <p>The above KG schemata are included in the ExeKGOntology repository.</p>"},{"location":"external-resources/#dataset-used-in-code-examples","title":"Dataset used in code examples","text":"<p>The dataset was generated using the <code>sklearn.datasets.make_classification()</code> function of the scikit-learn Python library.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#installing-with-pip","title":"Installing with pip","text":"<p>To install, run <code>pip install exe-kg-lib</code>.</p>"},{"location":"installation/#installing-from-source-code","title":"Installing from source code","text":""},{"location":"installation/#step-0-poetry","title":"Step 0: <code>poetry</code>","text":"<p>This project is managed by <code>poetry</code>, a Python packaging and dependency management tool. This means, however, that <code>poetry</code> needs to be installed before you can install this project. To be honest, the official <code>poetry</code> installation docs are great and provide different ways to install <code>poetry</code> on different platforms and under different conditions.</p> <p>However, as some people are lazy, below you can find a few ways to install <code>poetry</code>. As mentioned above:</p> <p>If your required / desired way of installation is not listed, go to the official installation docs before ranting! </p> Linuxconda (not recommended) <p>Run</p> <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre> <p>and follow the instructions. Finally, consider adding <code>poetry</code>'s installation path to your environment <code>PATH</code> (or similar), e.g. via</p> <pre><code>export PATH=$PATH:$HOME/.local/bin\n</code></pre> <p>for <code>poetry</code>'s default installation path.</p> <p>If you really need to go through conda (I know in some cases that's the only option), try this:</p> <pre><code>conda activate some-environment\nconda install pip\npip install pipx\npipx install poetry\nconda deactivate\n</code></pre>"},{"location":"installation/#step-1-dependency-installation","title":"Step 1: Dependency Installation","text":"<p>The installation of the project's dependencies should be piece of  in most cases by running</p> <pre><code>poetry install\n</code></pre> <p>from within the project directory.</p> <p>No project development intended?</p> <p>If you don't need any development setup, you can pass the <code>--no-dev</code> flag to skip the development dependencies.</p> Computer says no\u2026 <p>In some cases, this does not work right away. Please find a collection of failure cases below (thanks for the feedback! )</p> What? Hint \"I get a <code>ConnectionError</code>\" Maybe you have proxy issues. \"I destroyed my poetry environment\" Delete the <code>.venv</code> folder and create a new env."},{"location":"installation/#step-2-pre-commit-git-hooks-installation","title":"Step 2: Pre-commit Git Hooks Installation","text":"<p>To ensure compatibility of each future commit with the project's conventions (e.g. code format), some predefined git hooks should be installed by running the following commands.</p> <pre><code>poetry shell  # use the created poetry environment\npre-commit install\n</code></pre>"},{"location":"license/","title":"License","text":""},{"location":"license/#gnu-affero-general-public-license","title":"GNU AFFERO GENERAL PUBLIC LICENSE","text":"<p>Version 3, 19 November 2007</p> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"license/#preamble","title":"Preamble","text":"<p>The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users.</p> <p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software.</p> <p>A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public.</p> <p>The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version.</p> <p>An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"license/#terms-and-conditions","title":"TERMS AND CONDITIONS","text":""},{"location":"license/#0-definitions","title":"0. Definitions.","text":"<p>\"This License\" refers to version 3 of the GNU Affero General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>"},{"location":"license/#1-source-code","title":"1. Source Code.","text":"<p>The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p>"},{"location":"license/#2-basic-permissions","title":"2. Basic Permissions.","text":"<p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.</p>"},{"location":"license/#3-protecting-users-legal-rights-from-anti-circumvention-law","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law.","text":"<p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p>"},{"location":"license/#4-conveying-verbatim-copies","title":"4. Conveying Verbatim Copies.","text":"<p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p>"},{"location":"license/#5-conveying-modified-source-versions","title":"5. Conveying Modified Source Versions.","text":"<p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <ul> <li>a) The work must carry prominent notices stating that you modified     it, and giving a relevant date.</li> <li>b) The work must carry prominent notices stating that it is     released under this License and any conditions added under     section 7. This requirement modifies the requirement in section 4     to \"keep intact all notices\".</li> <li>c) You must license the entire work, as a whole, under this     License to anyone who comes into possession of a copy. This     License will therefore apply, along with any applicable section 7     additional terms, to the whole of the work, and all its parts,     regardless of how they are packaged. This License gives no     permission to license the work in any other way, but it does not     invalidate such permission if you have separately received it.</li> <li>d) If the work has interactive user interfaces, each must display     Appropriate Legal Notices; however, if the Program has interactive     interfaces that do not display Appropriate Legal Notices, your     work need not make them do so.</li> </ul> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>"},{"location":"license/#6-conveying-non-source-forms","title":"6. Conveying Non-Source Forms.","text":"<p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <ul> <li>a) Convey the object code in, or embodied in, a physical product     (including a physical distribution medium), accompanied by the     Corresponding Source fixed on a durable physical medium     customarily used for software interchange.</li> <li>b) Convey the object code in, or embodied in, a physical product     (including a physical distribution medium), accompanied by a     written offer, valid for at least three years and valid for as     long as you offer spare parts or customer support for that product     model, to give anyone who possesses the object code either (1) a     copy of the Corresponding Source for all the software in the     product that is covered by this License, on a durable physical     medium customarily used for software interchange, for a price no     more than your reasonable cost of physically performing this     conveying of source, or (2) access to copy the Corresponding     Source from a network server at no charge.</li> <li>c) Convey individual copies of the object code with a copy of the     written offer to provide the Corresponding Source. This     alternative is allowed only occasionally and noncommercially, and     only if you received the object code with such an offer, in accord     with subsection 6b.</li> <li>d) Convey the object code by offering access from a designated     place (gratis or for a charge), and offer equivalent access to the     Corresponding Source in the same way through the same place at no     further charge. You need not require recipients to copy the     Corresponding Source along with the object code. If the place to     copy the object code is a network server, the Corresponding Source     may be on a different server (operated by you or a third party)     that supports equivalent copying facilities, provided you maintain     clear directions next to the object code saying where to find the     Corresponding Source. Regardless of what server hosts the     Corresponding Source, you remain obligated to ensure that it is     available for as long as needed to satisfy these requirements.</li> <li>e) Convey the object code using peer-to-peer transmission,     provided you inform other peers where the object code and     Corresponding Source of the work are being offered to the general     public at no charge under subsection 6d.</li> </ul> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p>"},{"location":"license/#7-additional-terms","title":"7. Additional Terms.","text":"<p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <ul> <li>a) Disclaiming warranty or limiting liability differently from the     terms of sections 15 and 16 of this License; or</li> <li>b) Requiring preservation of specified reasonable legal notices or     author attributions in that material or in the Appropriate Legal     Notices displayed by works containing it; or</li> <li>c) Prohibiting misrepresentation of the origin of that material,     or requiring that modified versions of such material be marked in     reasonable ways as different from the original version; or</li> <li>d) Limiting the use for publicity purposes of names of licensors     or authors of the material; or</li> <li>e) Declining to grant rights under trademark law for use of some     trade names, trademarks, or service marks; or</li> <li>f) Requiring indemnification of licensors and authors of that     material by anyone who conveys the material (or modified versions     of it) with contractual assumptions of liability to the recipient,     for any liability that these contractual assumptions directly     impose on those licensors and authors.</li> </ul> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p>"},{"location":"license/#8-termination","title":"8. Termination.","text":"<p>You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p>"},{"location":"license/#9-acceptance-not-required-for-having-copies","title":"9. Acceptance Not Required for Having Copies.","text":"<p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>"},{"location":"license/#10-automatic-licensing-of-downstream-recipients","title":"10. Automatic Licensing of Downstream Recipients.","text":"<p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p>"},{"location":"license/#11-patents","title":"11. Patents.","text":"<p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p>"},{"location":"license/#12-no-surrender-of-others-freedom","title":"12. No Surrender of Others' Freedom.","text":"<p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p>"},{"location":"license/#13-remote-network-interaction-use-with-the-gnu-general-public-license","title":"13. Remote Network Interaction; Use with the GNU General Public License.","text":"<p>Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph.</p> <p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.</p>"},{"location":"license/#14-revised-versions-of-this-license","title":"14. Revised Versions of this License.","text":"<p>The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p>"},{"location":"license/#15-disclaimer-of-warranty","title":"15. Disclaimer of Warranty.","text":"<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"license/#16-limitation-of-liability","title":"16. Limitation of Liability.","text":"<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"license/#17-interpretation-of-sections-15-and-16","title":"17. Interpretation of Sections 15 and 16.","text":"<p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"license/#how-to-apply-these-terms-to-your-new-programs","title":"How to Apply These Terms to Your New Programs","text":"<p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \"Source\" link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements.</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/.</p>"},{"location":"supported-methods/","title":"Ready-to-use ML-related tasks and methods","text":"KG schema (abbreviation) Task Method Properties Input (data structure) Output (data structure) Implemented by Python class Machine Learning (ml) Train KNNTrain - DataInTrainX (Matrix or Vector)DataInTrainY (Matrix or Vector) DataOutPredictedValueTrain (Matrix or Vector)DataOutTrainModel (SingleValue) TrainKNNTrain Machine Learning (ml) Train MLPTrain - DataInTrainX (Matrix or Vector)DataInTrainY (Matrix or Vector) DataOutPredictedValueTrain (Matrix or Vector)DataOutTrainModel (SingleValue) TrainMLPTrain Machine Learning (ml) Train LRTrain - DataInTrainX (Matrix or Vector)DataInTrainY (Matrix or Vector) DataOutPredictedValueTrain (Matrix or Vector)DataOutTrainModel (SingleValue) TrainLRTrain Machine Learning (ml) Test KNNTest - DataInTestModel (SingleValue)DataInTestX (Matrix or Vector) DataOutPredictedValueTest (Matrix or Vector) TestKNNTest Machine Learning (ml) Test MLPTest - DataInTestModel (SingleValue)DataInTestX (Matrix or Vector) DataOutPredictedValueTest (Matrix or Vector) TestMLPTest Machine Learning (ml) Test LRTest - DataInTestModel (SingleValue)DataInTestX (Matrix or Vector) DataOutPredictedValueTest (Matrix or Vector) TestLRTest Machine Learning (ml) PerformanceCalculation PerformanceCalculationMethod - DataInTrainRealY (Matrix or Vector)DataInTrainPredictedY (Matrix or Vector)DataInTestPredictedY (Matrix or Vector)DataInTestRealY (Matrix or Vector) DataOutMLTestErr (Vector)DataOutMLTrainErr (Vector) PerformanceCalculationPerformanceCalculationMethod Machine Learning (ml) Concatenation ConcatenationMethod - DataInConcatenation (list of Vector) DataOutConcatenatedData (Matrix) ConcatenationConcatenationMethod Machine Learning (ml) DataSplitting DataSplittingMethod - DataInDataSplittingX (Matrix or Vector)DataInDataSplittingY (Matrix or Vector) DataOutSplittedTestDataX (Matrix or Vector)DataOutSplittedTrainDataY (Matrix or Vector)DataOutSplittedTrainDataX (Matrix or Vector)DataOutSplittedTestDataY (Matrix or Vector) DataSplittingDataSplittingMethod Visualization (visu) CanvasTask CanvasMethod hasCanvasName (string)hasLayout (string) - - CanvasTaskCanvasMethod Visualization (visu) PlotTask LineplotMethod hasLineStyle (string)hasLineWidth (int)hasLegendName (string) DataInVector (Vector) - PlotTaskLineplotMethod Visualization (visu) PlotTask ScatterplotMethod hasLineStyle (string)hasLineWidth (int)hasScatterSize (int)hasLegendName (string) DataInVector (Vector) - PlotTaskScatterplotMethod Statistics (stats) TrendCalculationTask TrendCalculationMethod - DataInTrendCalculation (Vector) DataOutTrendCalculation (Vector) TrendCalculationTaskTrendCalculationMethod Statistics (stats) NormalizationTask NormalizationMethod - DataInNormalization (Vector) DataOutNormalization (Vector) NormalizationTaskNormalizationMethod Statistics (stats) ScatteringCalculationTask ScatteringCalculationMethod - DataInScatteringCalculation (Vector) DataOutScatteringCalculation (Vector) ScatteringCalculationTaskScatteringCalculationMethod"},{"location":"tasks-package-documentation/","title":"Documentation of exe_kg_lib.classes.tasks package","text":""},{"location":"tasks-package-documentation/#overview","title":"Overview","text":"<p>This package contains classes that correspond to entities of type <code>owl:class</code> that are <code>rdfs:subClassOf AtomicTask</code> in the KG.</p> <p>They implement the abstract <code>run_method()</code> like so:</p> <ol> <li>The input is taken either from outputs of previously executed Tasks (parameter: <code>other_task_output_dict</code>) or a    dataframe (parameter: <code>input_data</code>).</li> <li>An algorithm is executed using the input.</li> </ol> <p>There are two conventions:     - The algorithm is related to ML, Statistics or Visualization, depending on       the Python file's prefix.     - The algorithm's implementation is placed in <code>utils.task_utils</code> package in the Python file with the corresponding prefix. 3. The output is returned as a dictionary with pairs of output name and value.</p>"},{"location":"tasks-package-documentation/#naming-conventions","title":"Naming conventions","text":"<ul> <li> <p>Each class name is a concatenation of 2 strings:</p> <ol> <li>The name of an <code>owl:class</code> that is <code>rdfs:subClassOf AtomicTask</code>.</li> <li>The name of an <code>owl:class</code> that is <code>rdfs:subClassOf AtomicMethod</code> and is associated with the above <code>owl:class</code> via a property that is <code>rdfs:subPropertyOf hasMethod</code>.</li> </ol> <p>For example, the below KG property associates <code>CanvasMethod</code> with <code>CanvasTask</code>. So, the corresponding class name will be <code>CanvasTaskCanvasMethod</code>. <pre><code>visu:hasCanvasMethod\n    a                  owl:ObjectProperty ;\n    rdfs:domain        visu:CanvasTask ;\n    rdfs:range         visu:CanvasMethod ;\n    rdfs:subPropertyOf ds:hasMethod .\n</code></pre></p> </li> <li> <p>The class fields that contain <code>_</code> are the snake-case conversions of the equivalent camel-case property names in the   KG.</p> </li> </ul> <p>e.g. <code>has_split_ratio</code> field corresponds to <code>hasSplitRatio</code> property in the KG.</p> <p>The above conventions are necessary for automatically mapping KG tasks with methods and properties to Python objects while parsing the KG.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#creating-an-ml-pipeline","title":"Creating an ML pipeline","text":"<ul> <li>Via code: See the provided examples. To fetch them to your working directory for easy access, run <code>typer exe_kg_lib.cli.main run get-examples</code>.</li> <li>Step-by-step via CLI: Run <code>typer exe_kg_lib.cli.main run create-pipeline</code>.</li> </ul>"},{"location":"usage/#executing-an-ml-pipeline","title":"Executing an ML pipeline","text":"<ul> <li>Via code: See example code.</li> <li>Via CLI: Run <code>typer exe_kg_lib.cli.main run run-pipeline &lt;pipeline_path&gt;</code>.</li> </ul>"},{"location":"reference/","title":"Code Reference","text":"<p>The structure of this reference (see navigation tree on the left) mimics the structure of the project's code base.</p>"},{"location":"reference/code-nav/","title":"Code nav","text":"<ul> <li>exe_kg_lib</li> <li>classes<ul> <li>data_entity</li> <li>entity</li> <li>exe_kg</li> <li>kg_schema</li> <li>task</li> <li>tasks<ul> <li>ml_tasks</li> <li>statistic_tasks</li> <li>visual_tasks</li> </ul> </li> </ul> </li> <li>cli<ul> <li>main</li> </ul> </li> <li>shacl<ul> <li>base_shape_graph_generator</li> </ul> </li> <li>utils<ul> <li>cli_utils</li> <li>kg_creation_utils</li> <li>kg_validation_utils</li> <li>query_utils</li> <li>string_utils</li> <li>task_utils<ul> <li>ml_utils</li> <li>statistic_utils</li> <li>visual_utils</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/classes/data_entity/","title":"data_entity","text":""},{"location":"reference/classes/data_entity/#exe_kg_lib.classes.data_entity.DataEntity","title":"<code>DataEntity</code>","text":"<p>         Bases: <code>Entity</code></p> <p>Abstraction of owl:class DataEntity.</p> <p>\u2757 Important for contributors \u2757 The fields that contain \"_\" are by convention the snake-case conversions of the equivalent camel-case property names in the KG. e.g. has_source field corresponds to hasSource property in the KG. This is necessary for automatically mapping KG properties to Python object fields while parsing the KG.</p> Source code in <code>exe_kg_lib/classes/data_entity.py</code> <pre><code>class DataEntity(Entity):\n\"\"\"\n    Abstraction of owl:class DataEntity.\n\n    \u2757 Important for contributors \u2757\n    The fields that contain \"_\" are by convention the snake-case conversions of the equivalent camel-case property names in the KG.\n    e.g. has_source field corresponds to hasSource property in the KG.\n    This is necessary for automatically mapping KG properties to Python object fields while parsing the KG.\n    \"\"\"\n\n    def __init__(\n        self,\n        iri: str,\n        parent_entity: Entity,\n        has_source_value: str = None,\n        has_data_semantics_iri: str = None,\n        has_data_structure_iri: str = None,\n        has_reference: str = None,\n    ):\n        super().__init__(iri, parent_entity)\n        self.has_source = has_source_value  # used as column name to retrieve data from the pipeline's input file\n        self.has_data_semantics = has_data_semantics_iri  # IRI of KG entity of type DataSemantics\n        self.has_data_structure = has_data_structure_iri  # IRI of KG entity of type DataStructure\n        self.has_reference = has_reference  # reference to another data entity in the KG, expecting an IRI\n</code></pre>"},{"location":"reference/classes/entity/","title":"entity","text":""},{"location":"reference/classes/entity/#exe_kg_lib.classes.entity.Entity","title":"<code>Entity</code>","text":"<p>Abstraction of a KG entity with basic RDF properties plus its parent_entity (connected in KG with rdf:type).</p> Source code in <code>exe_kg_lib/classes/entity.py</code> <pre><code>class Entity:\n\"\"\"\n    Abstraction of a KG entity with basic RDF properties plus its parent_entity (connected in KG with rdf:type).\n    \"\"\"\n\n    def __init__(self, iri: str, parent_entity: Entity = None):\n        self.iri = URIRef(iri)\n        self.parent_entity = parent_entity\n        self.namespace = self.get_namespace(iri)\n        self.name = self.type = self.get_descriptor(iri)\n        if parent_entity:\n            self.type = parent_entity.name\n\n    @staticmethod\n    def get_namespace(iri: str) -&gt; str:\n        return iri.split(\"#\")[0] + \"#\"\n\n    @staticmethod\n    def get_descriptor(iri: str) -&gt; str:\n        return iri.split(\"#\")[1]\n</code></pre>"},{"location":"reference/classes/exe_kg/","title":"exe_kg","text":""},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG","title":"<code>ExeKG</code>","text":"Source code in <code>exe_kg_lib/classes/exe_kg.py</code> <pre><code>class ExeKG:\n    def __init__(self, input_exe_kg_path: str = None):\n\"\"\"\n\n        Args:\n            input_exe_kg_path: path of KG to be executed\n                               acts as switch for KG execution mode (if filled, mode is on)\n        \"\"\"\n        self.top_level_schema = KGSchema.from_schema_info(KG_SCHEMAS[\"Data Science\"])  # top-level KG schema\n        self.bottom_level_schemata = {}\n\n        # top-level KG schema entities\n        self.atomic_task = Entity(self.top_level_schema.namespace.AtomicTask)\n        self.atomic_method = Entity(self.top_level_schema.namespace.AtomicMethod)\n        self.data_entity = Entity(self.top_level_schema.namespace.DataEntity)\n        self.pipeline = Entity(self.top_level_schema.namespace.Pipeline)\n        self.data = Entity(self.top_level_schema.namespace.Data)\n        self.data_semantics = Entity(self.top_level_schema.namespace.DataSemantics)\n        self.data_structure = Entity(self.top_level_schema.namespace.DataStructure)\n\n        # self.input_kg: KG eventually filled with 3 KG schemas and the input executable KG in case of KG execution\n        self.input_kg = Graph(bind_namespaces=\"rdflib\")\n        if input_exe_kg_path:  # KG execution mode\n            self.input_kg.parse(input_exe_kg_path, format=\"n3\")  # parse input executable KG\n            check_kg_executability(self.input_kg)\n            all_ns = [n for n in self.input_kg.namespace_manager.namespaces()]\n            bottom_level_schema_info_set = False  # flag indicating that a bottom-level schema was found\n            for schema_name, schema_info in KG_SCHEMAS.items():  # search for used bottom-level schema\n                if (\n                    schema_name == \"Data Science\"  # or schema_name == \"Visualization\"\n                ):  # skip top-level KG schema and Visualization schema that is always used\n                    continue\n\n                if (schema_info[\"namespace_prefix\"], URIRef(schema_info[\"namespace\"])) in all_ns:\n                    # bottom-level schema found\n                    self.bottom_level_schemata[schema_info[\"namespace_prefix\"]] = KGSchema.from_schema_info(schema_info)\n                    bottom_level_schema_info_set = True\n\n            if not bottom_level_schema_info_set:  # no bottom-level schema found, input executable KG is invalid\n                print(\"Input executable KG did not have any bottom level KG schemas\")\n                exit(1)\n        else:  # KG construction mode\n            for schema_name, schema_info in KG_SCHEMAS.items():  # search for used bottom-level schema\n                if (\n                    schema_name == \"Data Science\"  # or schema_name == \"Visualization\"\n                ):  # skip top-level KG schema and Visualization schema that is always used\n                    continue\n\n                self.bottom_level_schemata[schema_info[\"namespace_prefix\"]] = KGSchema.from_schema_info(schema_info)\n\n        bottom_level_schemata_kgs = [kg_schema.kg for kg_schema in self.bottom_level_schemata.values()]\n\n        self.input_kg += self.top_level_schema.kg  # + self.visu_schema.kg  # combine all KG schemas in input KG\n\n        for bottom_level_schema_kg in bottom_level_schemata_kgs:\n            self.input_kg += bottom_level_schema_kg\n\n        self.output_kg = Graph(bind_namespaces=\"rdflib\")  # KG to be filled while constructing executable KG\n\n        self._bind_used_namespaces([self.input_kg, self.output_kg])\n\n        # below variables are filled in self._parse_kgs()\n        self.task_type_dict = {}  # dict for uniquely naming each new pipeline task\n        self.method_type_dict = {}  # dict for uniquely naming each new pipeline method\n        self.atomic_task_list = []  # list for storing the available sub-classes of ds:AtomicTask\n        self.atomic_method_list = []  # list for storing the available sub-classes of ds:AtomicMethod\n        self.data_type_list = []  # list for storing the available sub-classes of ds:DataEntity\n        self.data_semantics_list = []  # list for storing the available sub-classes of ds:DataSemantics\n        self.data_structure_list = []  # list for storing the available sub-classes of ds:DataStructure\n\n        self.existing_data_entity_list = (\n            []\n        )  # contains existing data entities that are output entities of previous tasks during KG construction\n        self.last_created_task = (\n            None  # last created pipeline task, for connecting consecutive pipeline tasks during KG construction\n        )\n        self.canvas_task_created = False  # indicates if canvas task was created during KG construction, and used for hiding the other Visualization tasks in CLI\n\n        self._parse_kgs()\n\n    def _bind_used_namespaces(self, kgs: List[Graph]):\n\"\"\"\n        Binds top-level, bottom-level and Visualization KG schemas' namespaces with their prefixes\n        Adds these bindings to the Graphs of kgs list\n        Args:\n            kgs: list of Graph objects to which the namespace bindings are added\n        \"\"\"\n        for kg in kgs:\n            kg.bind(self.top_level_schema.namespace_prefix, self.top_level_schema.namespace)\n            for bottom_level_kg_schema in self.bottom_level_schemata.values():\n                kg.bind(\n                    bottom_level_kg_schema.namespace_prefix,\n                    bottom_level_kg_schema.namespace,\n                )\n\n    def _parse_kgs(self) -&gt; None:\n\"\"\"\n        Fills lists with subclasses of top-level KG schema classes and initializes dicts used for unique naming\n        \"\"\"\n        atomic_task_subclasses = get_subclasses_of(self.atomic_task.iri, self.input_kg)\n        for t in list(atomic_task_subclasses):\n            task = Entity(t[0], self.atomic_task)\n            self.atomic_task_list.append(task)\n            self.task_type_dict[task.name] = 1\n\n        atomic_method_subclasses = get_subclasses_of(self.atomic_method.iri, self.input_kg)\n        for m in list(atomic_method_subclasses):\n            method = Entity(m[0], self.atomic_method)\n            self.atomic_method_list.append(method)\n            self.method_type_dict[method.name] = 1\n\n        data_type_subclasses = get_subclasses_of(self.data_entity.iri, self.input_kg)\n        for d in list(data_type_subclasses):\n            data_type = Entity(d[0], self.data_entity)\n            self.data_type_list.append(data_type)\n\n        data_semantics_subclasses = get_subclasses_of(self.data_semantics.iri, self.top_level_schema.kg)\n        for d in list(data_semantics_subclasses):\n            if d[0] == self.data_entity.iri:\n                continue\n            data_semantics = Entity(d[0], self.data_semantics)\n            self.data_semantics_list.append(data_semantics)\n\n        data_structure_subclasses = get_subclasses_of(self.data_structure.iri, self.top_level_schema.kg)\n        for d in list(data_structure_subclasses):\n            if d[0] == self.data_entity.iri:\n                continue\n            data_structure = Entity(d[0], self.data_structure)\n            self.data_structure_list.append(data_structure)\n\n    def create_pipeline_task(self, pipeline_name: str, input_data_path: str) -&gt; Task:\n\"\"\"\n        Instantiates and adds a new pipeline task entity to self.output_kg\n        Args:\n            pipeline_name: name for the pipeline\n            input_data_path: path for the input data to be used by the pipeline's tasks\n\n        Returns:\n            Task: created pipeline\n        \"\"\"\n        pipeline = create_pipeline_task(\n            self.top_level_schema.namespace,\n            self.pipeline,\n            self.output_kg,\n            pipeline_name,\n            input_data_path,\n        )\n        self.last_created_task = pipeline\n        return pipeline\n\n    def create_data_entity(\n        self,\n        name: str,\n        source_value: str,\n        data_semantics_name: str,\n        data_structure_name: str,\n    ) -&gt; DataEntity:\n\"\"\"\n        Creates a DataEntity object\n        Args:\n            name: name of the data entity\n            source_value: name of the data source corresponding to a column of the data\n            data_semantics_name: name of the data semantics entity\n            data_structure_name: name of the data structure entity\n\n        Returns:\n            DataEntity: object initialized with the given parameter values\n        \"\"\"\n        return DataEntity(\n            self.top_level_schema.namespace + name,\n            self.data_entity,\n            source_value,\n            self.top_level_schema.namespace + data_semantics_name,\n            self.top_level_schema.namespace + data_structure_name,\n        )\n\n    def add_task(\n        self,\n        kg_schema_short: str,\n        task: str,\n        input_data_entity_dict: Dict[str, List[DataEntity]],\n        method: str,\n        properties_dict: Dict[str, Union[str, int, float]],\n    ) -&gt; Task:\n\"\"\"\n        Instantiates and adds a new task entity to self.output_kg\n        Components attached to the task during creation: input and output data entities, and a method with properties\n        Args:\n            kg_schema_short: abbreviated name of the KG schema in which the task and method belong\n            task: task name\n            input_data_entity_dict: keys -&gt; input names of the specified task\n                                    values -&gt; lists of DataEntity objects to be added as input to the task\n            method: method name\n            properties_dict: keys -&gt; property names of the specified method\n                             values -&gt; values to be added as parameters to the method\n\n        Returns:\n            Task: object of the created task\n        \"\"\"\n        kg_schema_to_use = self.bottom_level_schemata[kg_schema_short]\n\n        relation_iri = (\n            self.top_level_schema.namespace.hasNextTask\n            if self.last_created_task.type != \"Pipeline\"\n            else self.top_level_schema.namespace.hasStartTask\n        )  # use relation depending on the previous task\n\n        # instantiate task and link it with the previous one\n        parent_task = Task(kg_schema_to_use.namespace + task, self.atomic_task)\n        added_entity = add_instance_from_parent_with_relation(\n            kg_schema_to_use.namespace,\n            self.output_kg,\n            parent_task,\n            relation_iri,\n            self.last_created_task,\n            name_instance(self.task_type_dict, self.method_type_dict, parent_task),\n        )\n        next_task = Task.from_entity(added_entity)  # create Task object from Entity object\n\n        # instantiate and add given input data entities to the task\n        self._add_inputs_to_task(kg_schema_to_use.namespace, next_task, input_data_entity_dict)\n        # instantiate and add output data entities to the task, as specified in the KG schema\n        self._add_outputs_to_task(next_task)\n\n        method_parent = Entity(kg_schema_to_use.namespace + method, self.atomic_method)\n\n        # fetch compatible methods and their properties from KG schema\n        results = list(\n            get_method_properties_and_methods(\n                self.input_kg,\n                self.top_level_schema.namespace_prefix,\n                next_task.parent_entity.iri,\n            )\n        )\n\n        chosen_property_method = next(\n            filter(lambda pair: pair[1].split(\"#\")[1] == method, results), None\n        )  # match given method_type with query result\n        if chosen_property_method is None:\n            print(f\"Property connecting task of type {task} with method of type {method} not found\")\n            exit(1)\n\n        # instantiate method and link it with the task using the appropriate chosen_property_method[0] relation\n        method_entity = add_instance_from_parent_with_relation(\n            kg_schema_to_use.namespace,\n            self.output_kg,\n            method_parent,\n            chosen_property_method[0],\n            next_task,\n            name_instance(self.task_type_dict, self.method_type_dict, method_parent),\n        )\n\n        # fetch compatible data properties from KG schema\n        property_list = get_data_properties_plus_inherited_by_class_iri(self.input_kg, method_parent.iri)\n\n        # add data properties to the task with given values\n        for pair in property_list:\n            property_iri = pair[0]\n            property_name = property_iri.split(\"#\")[1]\n            range_iri = pair[1]\n            input_property = Literal(\n                lexical_or_value=properties_dict[property_name],\n                datatype=range_iri,\n            )\n            add_literal(self.output_kg, method_entity, property_iri, input_property)\n\n        self.last_created_task = next_task  # store created task\n\n        return next_task\n\n    def _add_inputs_to_task(\n        self,\n        namespace: Namespace,\n        task_entity: Task,\n        input_data_entity_dict: Dict[str, List[DataEntity]] = None,\n    ) -&gt; None:\n\"\"\"\n        Instantiates and adds given input data entities to the given task of self.output_kg\n        if input_data_entity_dict is None, user is asked to specify input data entities\n        Args:\n            task_entity: the task to add the input to\n            input_data_entity_dict: keys -&gt; input entity names corresponding to the given task as defined in the chosen bottom-level KG schema\n                                    values -&gt; list of corresponding data entities to be added as input to the task\n        \"\"\"\n\n        use_cli = input_data_entity_dict is None\n\n        # fetch compatible inputs from KG schema\n        results = list(\n            get_input_properties_and_inputs(\n                self.input_kg,\n                self.top_level_schema.namespace_prefix,\n                task_entity.parent_entity.iri,\n            )\n        )\n\n        # task_type_index was incremented when creating the task entity\n        # reset the index to match the currently created task's index\n        task_type_index = self.task_type_dict[task_entity.type] - 1\n        for _, input_entity_iri, data_structure_iri in results:\n            input_entity_name = input_entity_iri.split(\"#\")[1]\n            if not use_cli:\n                input_data_entity_list = input_data_entity_dict[input_entity_name]\n            else:\n                # use CLI\n                print(f\"Specify input corresponding to {input_entity_name}\")\n                input_data_entity_list = get_input_for_existing_data_entities(self.existing_data_entity_list)\n                input_data_entity_list += get_input_for_new_data_entities(\n                    self.data_semantics_list,\n                    self.data_structure_list,\n                    namespace,\n                    self.data_entity,\n                )\n\n            same_input_index = 1\n            for input_data_entity in input_data_entity_list:\n                # instantiate data entity corresponding to the found input_entity_name\n                data_entity_iri = input_entity_iri + str(task_type_index) + \"_\" + str(same_input_index)\n                # instantiate given data entity\n                add_data_entity_instance(\n                    self.output_kg,\n                    self.data,\n                    self.top_level_schema.kg,\n                    self.top_level_schema.namespace,\n                    input_data_entity,\n                )\n                # instantiate and attach data entity with reference to the given data entity\n                data_entity = DataEntity(\n                    data_entity_iri,\n                    DataEntity(input_entity_iri, self.data_entity),\n                    has_reference=input_data_entity.iri,\n                    has_data_structure_iri=data_structure_iri,\n                )\n                add_and_attach_data_entity(\n                    self.output_kg,\n                    self.data,\n                    self.top_level_schema.kg,\n                    self.top_level_schema.namespace,\n                    data_entity,\n                    self.top_level_schema.namespace.hasInput,\n                    task_entity,\n                )\n                task_entity.input_dict[input_entity_name] = data_entity\n                same_input_index += 1\n\n                if use_cli:\n                    check_kg_executability(self.output_kg)\n\n    def _add_outputs_to_task(self, task_entity: Task) -&gt; None:\n\"\"\"\n        Instantiates and adds output data entities to the given task of self.output_kg, based on the task's definition in the KG schema\n        Args:\n            task_entity: the task to add the output to\n        \"\"\"\n        # fetch compatible outputs from KG schema\n        results = list(\n            get_output_properties_and_outputs(\n                self.input_kg,\n                self.top_level_schema.namespace_prefix,\n                task_entity.parent_entity.iri,\n            )\n        )\n\n        # task_type_index was incremented when creating the task entity\n        # reset the index to match the currently created task's index\n        task_type_index = self.task_type_dict[task_entity.type] - 1\n        for output_property, output_parent_entity_iri, data_structure_iri in results:\n            # instantiate and add data entity\n            output_data_entity_iri = output_parent_entity_iri + str(task_type_index)\n            output_data_entity = DataEntity(\n                output_data_entity_iri,\n                DataEntity(output_parent_entity_iri, self.data_entity),\n                has_data_structure_iri=data_structure_iri,\n            )\n            add_and_attach_data_entity(\n                self.output_kg,\n                self.data,\n                self.top_level_schema.kg,\n                self.top_level_schema.namespace,\n                output_data_entity,\n                self.top_level_schema.namespace.hasOutput,\n                task_entity,\n            )\n            task_entity.output_dict[output_parent_entity_iri.split(\"#\")[1]] = output_data_entity\n            self.existing_data_entity_list.append(output_data_entity)\n\n    def _create_next_task_cli(self) -&gt; Union[None, Task]:\n\"\"\"\n        Instantiates and adds task (without method) based on user input to self.output_kg\n        Adds task's output data entities to self.existing_data_entity_list\n        Returns:\n            None: in case user wants to end the pipeline creation\n            Task: object of the created task\n        \"\"\"\n        print(\"Please choose the next task\")\n        for i, t in enumerate(self.atomic_task_list):\n            if not self.canvas_task_created and t.name == \"PlotTask\":\n                continue\n            if self.canvas_task_created and t.name == \"CanvasTask\":\n                continue\n            print(f\"\\t{str(i)}. {t.name}\")\n        print(f\"\\t{str(-1)}. End pipeline\")\n        next_task_id = int(input())\n        if next_task_id == -1:\n            return None\n\n        next_task_parent = self.atomic_task_list[next_task_id]\n        relation_iri = (\n            self.top_level_schema.namespace.hasNextTask\n            if self.last_created_task.type != \"Pipeline\"\n            else self.top_level_schema.namespace.hasStartTask\n        )  # use relation depending on the previous task\n\n        # instantiate task and link it with the previous one\n        task_entity = add_instance_from_parent_with_relation(\n            next_task_parent.namespace,\n            self.output_kg,\n            next_task_parent,\n            relation_iri,\n            self.last_created_task,\n            name_instance(self.task_type_dict, self.method_type_dict, next_task_parent),\n        )\n\n        task_entity = Task(task_entity.iri, task_entity.parent_entity)  # create Task object from Entity object's info\n\n        # instantiate and add input data entities to the task based on user input\n        self._add_inputs_to_task(next_task_parent.namespace, task_entity)\n        # instantiate and add output data entities to the task, as specified in the KG schema\n        self._add_outputs_to_task(task_entity)\n\n        self.last_created_task = task_entity\n        if task_entity.type == \"CanvasTask\":\n            self.canvas_task_created = True\n\n        return task_entity\n\n    def _create_method(self, task_to_attach_to: Entity) -&gt; None:\n\"\"\"\n        Instantiate and attach method to task of self.output_kg\n        Args:\n            task_to_attach_to: the task to attach the created method to\n        \"\"\"\n        print(f\"Please choose a method for {task_to_attach_to.type}:\")\n\n        # fetch compatible methods and their properties from KG schema\n        results = list(\n            get_method_properties_and_methods(\n                self.input_kg,\n                self.top_level_schema.namespace_prefix,\n                task_to_attach_to.parent_entity.iri,\n            )\n        )\n        for i, pair in enumerate(results):\n            tmp_method = pair[1].split(\"#\")[1]\n            print(f\"\\t{str(i)}. {tmp_method}\")\n\n        method_id = int(input())\n        selected_property_and_method = results[method_id]\n        method_parent = next(\n            filter(\n                lambda m: m.iri == selected_property_and_method[1],\n                self.atomic_method_list,\n            ),\n            None,\n        )\n        # instantiate method and link it with the task using the appropriate selected_property_and_method[0] relation\n        add_instance_from_parent_with_relation(\n            task_to_attach_to.namespace,\n            self.output_kg,\n            method_parent,\n            selected_property_and_method[0],\n            task_to_attach_to,\n            name_instance(self.task_type_dict, self.method_type_dict, method_parent),\n        )\n\n        # fetch compatible data properties from KG schema\n        property_list = get_data_properties_plus_inherited_by_class_iri(self.input_kg, method_parent.iri)\n\n        if property_list:\n            print(f\"Please enter requested properties for {method_parent.name}:\")\n            # add data properties to the task with given values\n            for pair in property_list:\n                property_instance = URIRef(pair[0])\n                range = pair[1].split(\"#\")[1]\n                range_iri = pair[1]\n                input_property = Literal(\n                    lexical_or_value=input(\"\\t{} in range({}): \".format(pair[0].split(\"#\")[1], range)),\n                    datatype=range_iri,\n                )\n                add_literal(self.output_kg, task_to_attach_to, property_instance, input_property)\n\n        check_kg_executability(self.output_kg)\n\n    def start_pipeline_creation(self, pipeline_name: str, input_data_path: str) -&gt; None:\n\"\"\"\n        Handles the pipeline creation through CLI\n        Args:\n            pipeline_name: name for the pipeline\n            input_data_path: path for the input data to be used by the pipeline's tasks\n        \"\"\"\n        pipeline = create_pipeline_task(\n            self.top_level_schema.namespace,\n            self.pipeline,\n            self.output_kg,\n            pipeline_name,\n            input_data_path,\n        )\n\n        self.last_created_task = pipeline\n\n        while True:\n            next_task = self._create_next_task_cli()\n            if next_task is None:\n                break\n\n            self._create_method(next_task)\n\n    def save_created_kg(self, file_path: str) -&gt; None:\n\"\"\"\n        Saves self.output_kg to a file\n        Args:\n            file_path: path of the output file\n        \"\"\"\n        check_kg_executability(self.output_kg)\n\n        dir_path = os.path.dirname(file_path)\n        os.makedirs(dir_path, exist_ok=True)\n\n        self.output_kg.serialize(destination=file_path)\n        print(f\"Executable KG saved in {file_path}\")\n\n    def _property_value_to_field_value(self, property_value: str) -&gt; Union[str, DataEntity]:\n\"\"\"\n        Converts property value to Python class field value\n        If property_value is not a data entity's IRI, it is returned as is\n        Else, its property values are converted recursively and stored in a DataEntity object\n        Args:\n            property_value: value of the property as found in KG\n\n        Returns:\n            str: property_value parameter as is\n            DataEntity: object containing parsed data entity properties\n        \"\"\"\n        if \"#\" in property_value:\n            data_entity = self._parse_data_entity_by_iri(property_value)\n            if data_entity is None:\n                return property_value\n            return data_entity\n\n        return property_value\n\n    def _parse_data_entity_by_iri(self, in_out_data_entity_iri: str) -&gt; Optional[DataEntity]:\n\"\"\"\n        Parses an input or output data entity of self.input_kg and stores the parsed info in a Python object\n        Args:\n            in_out_data_entity_iri: IRI of the KG entity to parse\n\n        Returns:\n            None: if given IRI does not belong to an instance of a sub-class of self.top_level_schema.namespace.DataEntity\n            DataEntity: object with data entity's parsed properties\n        \"\"\"\n        # fetch type of entity with given IRI\n        query_result = get_first_query_result_if_exists(\n            query_entity_parent_iri,\n            self.input_kg,\n            in_out_data_entity_iri,\n            self.top_level_schema.namespace.DataEntity,\n        )\n        if query_result is None:\n            return None\n\n        data_entity_parent_iri = str(query_result[0])\n\n        # fetch IRI of data entity that is referenced by the given entity\n        query_result = get_first_query_result_if_exists(\n            query_data_entity_reference_iri,\n            self.input_kg,\n            self.top_level_schema.namespace_prefix,\n            in_out_data_entity_iri,\n        )\n\n        if query_result is None:  # no referenced data entity found\n            data_entity_ref_iri = in_out_data_entity_iri\n        else:\n            data_entity_ref_iri = str(query_result[0])\n\n        # create DataEntity object to store all the parsed properties\n        data_entity = DataEntity(in_out_data_entity_iri, Entity(data_entity_parent_iri))\n        data_entity.has_reference = data_entity_ref_iri.split(\"#\")[1]\n\n        for s, p, o in self.input_kg.triples((URIRef(data_entity_ref_iri), None, None)):\n            # parse property name and value\n            field_name = property_name_to_field_name(str(p))\n            if not hasattr(data_entity, field_name) or field_name == \"type\":\n                continue\n            field_value = self._property_value_to_field_value(str(o))\n            setattr(data_entity, field_name, field_value)  # set field value dynamically\n\n        return data_entity\n\n    def _parse_task_by_iri(self, task_iri: str, canvas_method: visual_tasks.CanvasTaskCanvasMethod = None) -&gt; Task:\n\"\"\"\n        Parses a task of self.input_kg and stores the info in an object of a sub-class of Task\n        The sub-class name and the object's fields are mapped dynamically based on the found KG components\n        Args:\n            task_iri: IRI of the task to be parsed\n            canvas_method: optional object to pass as argument for task object initialization\n\n        Returns:\n            Task: object of a sub-class of Task, containing all the parsed info\n        \"\"\"\n        # fetch type of entity with given IRI\n        query_result = get_first_query_result_if_exists(\n            query_entity_parent_iri,\n            self.input_kg,\n            task_iri,\n            self.top_level_schema.namespace.AtomicTask,\n        )\n\n        if (\n            query_result is None\n        ):  # given IRI does not belong to an instance of a sub-class of self.top_level_schema.namespace.AtomicTask\n            print(f\"Cannot retrieve parent of task with iri {task_iri}. Exiting...\")\n            exit(1)\n\n        task_parent_iri = str(query_result[0])\n\n        task = Task(task_iri, Task(task_parent_iri))\n        method = get_method_by_task_iri(\n            self.input_kg,\n            self.top_level_schema.namespace_prefix,\n            self.top_level_schema.namespace,\n            task_iri,\n        )\n        if method is None:\n            print(f\"Cannot retrieve method for task with iri: {task_iri}\")\n\n        # perform automatic mapping of KG task class to Python sub-class\n        class_name = task.type + method.type\n        Class = getattr(visual_tasks, class_name, None)\n        if Class is None:\n            Class = getattr(statistic_tasks, class_name, None)\n        if Class is None:\n            Class = getattr(ml_tasks, class_name, None)\n\n        # create Task sub-class object\n        if canvas_method:\n            task = Class(task_iri, Task(task_parent_iri), canvas_method)\n        else:\n            task = Class(task_iri, Task(task_parent_iri))\n\n        task_related_triples = self.input_kg.triples((URIRef(task_iri), None, None))\n        method_related_triples = self.input_kg.triples((URIRef(method.iri), None, None))\n\n        for s, p, o in itertools.chain(task_related_triples, method_related_triples):\n            # parse property name and value\n            field_name = property_name_to_field_name(str(p))\n            if not hasattr(task, field_name) or field_name == \"type\":\n                continue\n            field_value = self._property_value_to_field_value(str(o))\n\n            # set field value dynamically\n            if field_name == \"has_input\" or field_name == \"has_output\":\n                getattr(task, field_name).append(field_value)\n            else:\n                setattr(task, field_name, field_value)\n\n        return task\n\n    def execute_pipeline(self):\n\"\"\"\n        Retrieves and executes pipeline by parsing self.input_kg\n        \"\"\"\n        pipeline_iri, input_data_path, next_task_iri = get_pipeline_and_first_task_iri(\n            self.input_kg, self.top_level_schema.namespace_prefix\n        )\n        input_data = pd.read_csv(input_data_path, delimiter=\",\", encoding=\"ISO-8859-1\")\n        canvas_method = None  # stores Task object that corresponds to a task of type CanvasTask\n        task_output_dict = {}  # gradually filled with outputs of executed tasks\n        while next_task_iri is not None:\n            next_task = self._parse_task_by_iri(next_task_iri, canvas_method)\n            output = next_task.run_method(task_output_dict, input_data)\n            if output:\n                task_output_dict.update(output)\n\n            if next_task.type == \"CanvasTask\":\n                canvas_method = next_task\n\n            next_task_iri = next_task.has_next_task\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG.__init__","title":"<code>__init__(input_exe_kg_path=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>input_exe_kg_path</code> <code>str</code> <p>path of KG to be executed                acts as switch for KG execution mode (if filled, mode is on)</p> <code>None</code> Source code in <code>exe_kg_lib/classes/exe_kg.py</code> <pre><code>def __init__(self, input_exe_kg_path: str = None):\n\"\"\"\n\n    Args:\n        input_exe_kg_path: path of KG to be executed\n                           acts as switch for KG execution mode (if filled, mode is on)\n    \"\"\"\n    self.top_level_schema = KGSchema.from_schema_info(KG_SCHEMAS[\"Data Science\"])  # top-level KG schema\n    self.bottom_level_schemata = {}\n\n    # top-level KG schema entities\n    self.atomic_task = Entity(self.top_level_schema.namespace.AtomicTask)\n    self.atomic_method = Entity(self.top_level_schema.namespace.AtomicMethod)\n    self.data_entity = Entity(self.top_level_schema.namespace.DataEntity)\n    self.pipeline = Entity(self.top_level_schema.namespace.Pipeline)\n    self.data = Entity(self.top_level_schema.namespace.Data)\n    self.data_semantics = Entity(self.top_level_schema.namespace.DataSemantics)\n    self.data_structure = Entity(self.top_level_schema.namespace.DataStructure)\n\n    # self.input_kg: KG eventually filled with 3 KG schemas and the input executable KG in case of KG execution\n    self.input_kg = Graph(bind_namespaces=\"rdflib\")\n    if input_exe_kg_path:  # KG execution mode\n        self.input_kg.parse(input_exe_kg_path, format=\"n3\")  # parse input executable KG\n        check_kg_executability(self.input_kg)\n        all_ns = [n for n in self.input_kg.namespace_manager.namespaces()]\n        bottom_level_schema_info_set = False  # flag indicating that a bottom-level schema was found\n        for schema_name, schema_info in KG_SCHEMAS.items():  # search for used bottom-level schema\n            if (\n                schema_name == \"Data Science\"  # or schema_name == \"Visualization\"\n            ):  # skip top-level KG schema and Visualization schema that is always used\n                continue\n\n            if (schema_info[\"namespace_prefix\"], URIRef(schema_info[\"namespace\"])) in all_ns:\n                # bottom-level schema found\n                self.bottom_level_schemata[schema_info[\"namespace_prefix\"]] = KGSchema.from_schema_info(schema_info)\n                bottom_level_schema_info_set = True\n\n        if not bottom_level_schema_info_set:  # no bottom-level schema found, input executable KG is invalid\n            print(\"Input executable KG did not have any bottom level KG schemas\")\n            exit(1)\n    else:  # KG construction mode\n        for schema_name, schema_info in KG_SCHEMAS.items():  # search for used bottom-level schema\n            if (\n                schema_name == \"Data Science\"  # or schema_name == \"Visualization\"\n            ):  # skip top-level KG schema and Visualization schema that is always used\n                continue\n\n            self.bottom_level_schemata[schema_info[\"namespace_prefix\"]] = KGSchema.from_schema_info(schema_info)\n\n    bottom_level_schemata_kgs = [kg_schema.kg for kg_schema in self.bottom_level_schemata.values()]\n\n    self.input_kg += self.top_level_schema.kg  # + self.visu_schema.kg  # combine all KG schemas in input KG\n\n    for bottom_level_schema_kg in bottom_level_schemata_kgs:\n        self.input_kg += bottom_level_schema_kg\n\n    self.output_kg = Graph(bind_namespaces=\"rdflib\")  # KG to be filled while constructing executable KG\n\n    self._bind_used_namespaces([self.input_kg, self.output_kg])\n\n    # below variables are filled in self._parse_kgs()\n    self.task_type_dict = {}  # dict for uniquely naming each new pipeline task\n    self.method_type_dict = {}  # dict for uniquely naming each new pipeline method\n    self.atomic_task_list = []  # list for storing the available sub-classes of ds:AtomicTask\n    self.atomic_method_list = []  # list for storing the available sub-classes of ds:AtomicMethod\n    self.data_type_list = []  # list for storing the available sub-classes of ds:DataEntity\n    self.data_semantics_list = []  # list for storing the available sub-classes of ds:DataSemantics\n    self.data_structure_list = []  # list for storing the available sub-classes of ds:DataStructure\n\n    self.existing_data_entity_list = (\n        []\n    )  # contains existing data entities that are output entities of previous tasks during KG construction\n    self.last_created_task = (\n        None  # last created pipeline task, for connecting consecutive pipeline tasks during KG construction\n    )\n    self.canvas_task_created = False  # indicates if canvas task was created during KG construction, and used for hiding the other Visualization tasks in CLI\n\n    self._parse_kgs()\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG.add_task","title":"<code>add_task(kg_schema_short, task, input_data_entity_dict, method, properties_dict)</code>","text":"<p>Instantiates and adds a new task entity to self.output_kg Components attached to the task during creation: input and output data entities, and a method with properties</p> <p>Parameters:</p> Name Type Description Default <code>kg_schema_short</code> <code>str</code> <p>abbreviated name of the KG schema in which the task and method belong</p> required <code>task</code> <code>str</code> <p>task name</p> required <code>input_data_entity_dict</code> <code>Dict[str, List[DataEntity]]</code> <p>keys -&gt; input names of the specified task                     values -&gt; lists of DataEntity objects to be added as input to the task</p> required <code>method</code> <code>str</code> <p>method name</p> required <code>properties_dict</code> <code>Dict[str, Union[str, int, float]]</code> <p>keys -&gt; property names of the specified method              values -&gt; values to be added as parameters to the method</p> required <p>Returns:</p> Name Type Description <code>Task</code> <code>Task</code> <p>object of the created task</p> Source code in <code>exe_kg_lib/classes/exe_kg.py</code> <pre><code>def add_task(\n    self,\n    kg_schema_short: str,\n    task: str,\n    input_data_entity_dict: Dict[str, List[DataEntity]],\n    method: str,\n    properties_dict: Dict[str, Union[str, int, float]],\n) -&gt; Task:\n\"\"\"\n    Instantiates and adds a new task entity to self.output_kg\n    Components attached to the task during creation: input and output data entities, and a method with properties\n    Args:\n        kg_schema_short: abbreviated name of the KG schema in which the task and method belong\n        task: task name\n        input_data_entity_dict: keys -&gt; input names of the specified task\n                                values -&gt; lists of DataEntity objects to be added as input to the task\n        method: method name\n        properties_dict: keys -&gt; property names of the specified method\n                         values -&gt; values to be added as parameters to the method\n\n    Returns:\n        Task: object of the created task\n    \"\"\"\n    kg_schema_to_use = self.bottom_level_schemata[kg_schema_short]\n\n    relation_iri = (\n        self.top_level_schema.namespace.hasNextTask\n        if self.last_created_task.type != \"Pipeline\"\n        else self.top_level_schema.namespace.hasStartTask\n    )  # use relation depending on the previous task\n\n    # instantiate task and link it with the previous one\n    parent_task = Task(kg_schema_to_use.namespace + task, self.atomic_task)\n    added_entity = add_instance_from_parent_with_relation(\n        kg_schema_to_use.namespace,\n        self.output_kg,\n        parent_task,\n        relation_iri,\n        self.last_created_task,\n        name_instance(self.task_type_dict, self.method_type_dict, parent_task),\n    )\n    next_task = Task.from_entity(added_entity)  # create Task object from Entity object\n\n    # instantiate and add given input data entities to the task\n    self._add_inputs_to_task(kg_schema_to_use.namespace, next_task, input_data_entity_dict)\n    # instantiate and add output data entities to the task, as specified in the KG schema\n    self._add_outputs_to_task(next_task)\n\n    method_parent = Entity(kg_schema_to_use.namespace + method, self.atomic_method)\n\n    # fetch compatible methods and their properties from KG schema\n    results = list(\n        get_method_properties_and_methods(\n            self.input_kg,\n            self.top_level_schema.namespace_prefix,\n            next_task.parent_entity.iri,\n        )\n    )\n\n    chosen_property_method = next(\n        filter(lambda pair: pair[1].split(\"#\")[1] == method, results), None\n    )  # match given method_type with query result\n    if chosen_property_method is None:\n        print(f\"Property connecting task of type {task} with method of type {method} not found\")\n        exit(1)\n\n    # instantiate method and link it with the task using the appropriate chosen_property_method[0] relation\n    method_entity = add_instance_from_parent_with_relation(\n        kg_schema_to_use.namespace,\n        self.output_kg,\n        method_parent,\n        chosen_property_method[0],\n        next_task,\n        name_instance(self.task_type_dict, self.method_type_dict, method_parent),\n    )\n\n    # fetch compatible data properties from KG schema\n    property_list = get_data_properties_plus_inherited_by_class_iri(self.input_kg, method_parent.iri)\n\n    # add data properties to the task with given values\n    for pair in property_list:\n        property_iri = pair[0]\n        property_name = property_iri.split(\"#\")[1]\n        range_iri = pair[1]\n        input_property = Literal(\n            lexical_or_value=properties_dict[property_name],\n            datatype=range_iri,\n        )\n        add_literal(self.output_kg, method_entity, property_iri, input_property)\n\n    self.last_created_task = next_task  # store created task\n\n    return next_task\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG.create_data_entity","title":"<code>create_data_entity(name, source_value, data_semantics_name, data_structure_name)</code>","text":"<p>Creates a DataEntity object</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>name of the data entity</p> required <code>source_value</code> <code>str</code> <p>name of the data source corresponding to a column of the data</p> required <code>data_semantics_name</code> <code>str</code> <p>name of the data semantics entity</p> required <code>data_structure_name</code> <code>str</code> <p>name of the data structure entity</p> required <p>Returns:</p> Name Type Description <code>DataEntity</code> <code>DataEntity</code> <p>object initialized with the given parameter values</p> Source code in <code>exe_kg_lib/classes/exe_kg.py</code> <pre><code>def create_data_entity(\n    self,\n    name: str,\n    source_value: str,\n    data_semantics_name: str,\n    data_structure_name: str,\n) -&gt; DataEntity:\n\"\"\"\n    Creates a DataEntity object\n    Args:\n        name: name of the data entity\n        source_value: name of the data source corresponding to a column of the data\n        data_semantics_name: name of the data semantics entity\n        data_structure_name: name of the data structure entity\n\n    Returns:\n        DataEntity: object initialized with the given parameter values\n    \"\"\"\n    return DataEntity(\n        self.top_level_schema.namespace + name,\n        self.data_entity,\n        source_value,\n        self.top_level_schema.namespace + data_semantics_name,\n        self.top_level_schema.namespace + data_structure_name,\n    )\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG.create_pipeline_task","title":"<code>create_pipeline_task(pipeline_name, input_data_path)</code>","text":"<p>Instantiates and adds a new pipeline task entity to self.output_kg</p> <p>Parameters:</p> Name Type Description Default <code>pipeline_name</code> <code>str</code> <p>name for the pipeline</p> required <code>input_data_path</code> <code>str</code> <p>path for the input data to be used by the pipeline's tasks</p> required <p>Returns:</p> Name Type Description <code>Task</code> <code>Task</code> <p>created pipeline</p> Source code in <code>exe_kg_lib/classes/exe_kg.py</code> <pre><code>def create_pipeline_task(self, pipeline_name: str, input_data_path: str) -&gt; Task:\n\"\"\"\n    Instantiates and adds a new pipeline task entity to self.output_kg\n    Args:\n        pipeline_name: name for the pipeline\n        input_data_path: path for the input data to be used by the pipeline's tasks\n\n    Returns:\n        Task: created pipeline\n    \"\"\"\n    pipeline = create_pipeline_task(\n        self.top_level_schema.namespace,\n        self.pipeline,\n        self.output_kg,\n        pipeline_name,\n        input_data_path,\n    )\n    self.last_created_task = pipeline\n    return pipeline\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG.execute_pipeline","title":"<code>execute_pipeline()</code>","text":"<p>Retrieves and executes pipeline by parsing self.input_kg</p> Source code in <code>exe_kg_lib/classes/exe_kg.py</code> <pre><code>def execute_pipeline(self):\n\"\"\"\n    Retrieves and executes pipeline by parsing self.input_kg\n    \"\"\"\n    pipeline_iri, input_data_path, next_task_iri = get_pipeline_and_first_task_iri(\n        self.input_kg, self.top_level_schema.namespace_prefix\n    )\n    input_data = pd.read_csv(input_data_path, delimiter=\",\", encoding=\"ISO-8859-1\")\n    canvas_method = None  # stores Task object that corresponds to a task of type CanvasTask\n    task_output_dict = {}  # gradually filled with outputs of executed tasks\n    while next_task_iri is not None:\n        next_task = self._parse_task_by_iri(next_task_iri, canvas_method)\n        output = next_task.run_method(task_output_dict, input_data)\n        if output:\n            task_output_dict.update(output)\n\n        if next_task.type == \"CanvasTask\":\n            canvas_method = next_task\n\n        next_task_iri = next_task.has_next_task\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG.save_created_kg","title":"<code>save_created_kg(file_path)</code>","text":"<p>Saves self.output_kg to a file</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>path of the output file</p> required Source code in <code>exe_kg_lib/classes/exe_kg.py</code> <pre><code>def save_created_kg(self, file_path: str) -&gt; None:\n\"\"\"\n    Saves self.output_kg to a file\n    Args:\n        file_path: path of the output file\n    \"\"\"\n    check_kg_executability(self.output_kg)\n\n    dir_path = os.path.dirname(file_path)\n    os.makedirs(dir_path, exist_ok=True)\n\n    self.output_kg.serialize(destination=file_path)\n    print(f\"Executable KG saved in {file_path}\")\n</code></pre>"},{"location":"reference/classes/exe_kg/#exe_kg_lib.classes.exe_kg.ExeKG.start_pipeline_creation","title":"<code>start_pipeline_creation(pipeline_name, input_data_path)</code>","text":"<p>Handles the pipeline creation through CLI</p> <p>Parameters:</p> Name Type Description Default <code>pipeline_name</code> <code>str</code> <p>name for the pipeline</p> required <code>input_data_path</code> <code>str</code> <p>path for the input data to be used by the pipeline's tasks</p> required Source code in <code>exe_kg_lib/classes/exe_kg.py</code> <pre><code>def start_pipeline_creation(self, pipeline_name: str, input_data_path: str) -&gt; None:\n\"\"\"\n    Handles the pipeline creation through CLI\n    Args:\n        pipeline_name: name for the pipeline\n        input_data_path: path for the input data to be used by the pipeline's tasks\n    \"\"\"\n    pipeline = create_pipeline_task(\n        self.top_level_schema.namespace,\n        self.pipeline,\n        self.output_kg,\n        pipeline_name,\n        input_data_path,\n    )\n\n    self.last_created_task = pipeline\n\n    while True:\n        next_task = self._create_next_task_cli()\n        if next_task is None:\n            break\n\n        self._create_method(next_task)\n</code></pre>"},{"location":"reference/classes/kg_schema/","title":"kg_schema","text":""},{"location":"reference/classes/kg_schema/#exe_kg_lib.classes.kg_schema.KGSchema","title":"<code>KGSchema</code>","text":"<p>Stores a Graph object and some metadata corresponding to a KG schema</p> Source code in <code>exe_kg_lib/classes/kg_schema.py</code> <pre><code>class KGSchema:\n\"\"\"\n    Stores a Graph object and some metadata corresponding to a KG schema\n    \"\"\"\n\n    def __init__(self, path: str, namespace: str, namespace_prefix: str):\n        self.path = path  # path of the KG schema definition, can be local or remote\n        self.namespace = Namespace(namespace)\n        self.namespace_prefix = namespace_prefix\n\n        self.kg = Graph(bind_namespaces=\"rdflib\")\n        self.kg.parse(self.path, format=\"n3\")\n\n    @classmethod\n    def from_schema_info(cls, schema_info: Dict[str, str]):\n        return cls(schema_info[\"path\"], schema_info[\"namespace\"], schema_info[\"namespace_prefix\"])\n</code></pre>"},{"location":"reference/classes/task/","title":"task","text":""},{"location":"reference/classes/task/#exe_kg_lib.classes.task.Task","title":"<code>Task</code>","text":"<p>         Bases: <code>Entity</code></p> <p>Abstraction of owl:class Task.</p> <p>\u2757 Important for contributors \u2757 The fields that contain \"_\" are by convention the snake-case conversions of the equivalent camel-case property names in the KG. e.g. has_next_task field corresponds to hasNextTask property in the KG. This is necessary for automatically mapping KG properties to Python object fields while parsing the KG.</p> Source code in <code>exe_kg_lib/classes/task.py</code> <pre><code>class Task(Entity):\n\"\"\"\n    Abstraction of owl:class Task.\n\n    \u2757 Important for contributors \u2757\n    The fields that contain \"_\" are by convention the snake-case conversions of the equivalent camel-case property names in the KG.\n    e.g. has_next_task field corresponds to hasNextTask property in the KG.\n    This is necessary for automatically mapping KG properties to Python object fields while parsing the KG.\n    \"\"\"\n\n    def __init__(\n        self,\n        iri: str,\n        parent_entity: Entity = None,\n    ):\n        super().__init__(iri, parent_entity)\n        self.has_next_task = None\n        self.has_method = None\n        self.has_input = []\n        self.has_output = []\n        self.input_dict = {}  # used for storing input DataEntity objects during KG creation\n        self.output_dict = {}  # used for storing output DataEntity objects during KG creation\n\n    @classmethod\n    def from_entity(cls, entity: Entity):\n        return cls(entity.iri, entity.parent_entity)\n\n    def create_output_dict(self, keyword_value_dict: dict) -&gt; dict:\n\"\"\"\n        For each key in keyword_value_dict, checks if the key exists in an output name of the Task.\n        If yes, adds the output name with its value to out_dict.\n        Args:\n            keyword_value_dict: key-value pairs where key is a keyword to find in an output name of the Task\n                                  and value is the value corresponding to that output name\n\n        Returns:\n            dict: pairs of Task's output names and corresponding output values\n        \"\"\"\n        if len(self.has_output) == 0:\n            # assume one output and use task name as key\n            return {self.name: list(keyword_value_dict.values())[0]}\n\n        output_names = [has_output_elem.name for has_output_elem in self.has_output]\n        out_dict = {}\n        for output_name in output_names:\n            for key, value in keyword_value_dict.items():\n                if key in output_name:\n                    out_dict[output_name] = value\n\n        return out_dict\n\n    def get_inputs(self, dict_to_search: dict, fallback_df: pd.DataFrame) -&gt; Dict[str, np.ndarray]:\n\"\"\"\n        Tries to match the Task's input names with the keys of dict_to_search\n        and fills input_dict list with their corresponding values.\n        If the matches fail, it retrieves columns of the provided fallback_df\n        Args:\n            dict_to_search: contains key-value pairs where key is a possible input name and value is its corresponding value\n            fallback_df: contains data to return as an alternative\n\n        Returns:\n            Dict[str, np.ndarray]: pairs of input entity types and corresponding input values\n        \"\"\"\n        input_dict = {}\n        for input in self.has_input:\n            try:\n                input_dict[input.type] = dict_to_search[input.has_reference]\n            except KeyError:\n                input_dict[input.type] = fallback_df[input.has_source]\n\n        return input_dict\n\n    @abstractmethod\n    def run_method(self, *args):\n\"\"\"\n        Abstract method to be implemented by Task sub-classes that are in the bottom of the hierarchy.\n        Executes the logic that is needed to fulfill the Task.\n        Args:\n            *args: defined by sub-classes\n        \"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"reference/classes/task/#exe_kg_lib.classes.task.Task.create_output_dict","title":"<code>create_output_dict(keyword_value_dict)</code>","text":"<p>For each key in keyword_value_dict, checks if the key exists in an output name of the Task. If yes, adds the output name with its value to out_dict.</p> <p>Parameters:</p> Name Type Description Default <code>keyword_value_dict</code> <code>dict</code> <p>key-value pairs where key is a keyword to find in an output name of the Task                   and value is the value corresponding to that output name</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>pairs of Task's output names and corresponding output values</p> Source code in <code>exe_kg_lib/classes/task.py</code> <pre><code>def create_output_dict(self, keyword_value_dict: dict) -&gt; dict:\n\"\"\"\n    For each key in keyword_value_dict, checks if the key exists in an output name of the Task.\n    If yes, adds the output name with its value to out_dict.\n    Args:\n        keyword_value_dict: key-value pairs where key is a keyword to find in an output name of the Task\n                              and value is the value corresponding to that output name\n\n    Returns:\n        dict: pairs of Task's output names and corresponding output values\n    \"\"\"\n    if len(self.has_output) == 0:\n        # assume one output and use task name as key\n        return {self.name: list(keyword_value_dict.values())[0]}\n\n    output_names = [has_output_elem.name for has_output_elem in self.has_output]\n    out_dict = {}\n    for output_name in output_names:\n        for key, value in keyword_value_dict.items():\n            if key in output_name:\n                out_dict[output_name] = value\n\n    return out_dict\n</code></pre>"},{"location":"reference/classes/task/#exe_kg_lib.classes.task.Task.get_inputs","title":"<code>get_inputs(dict_to_search, fallback_df)</code>","text":"<p>Tries to match the Task's input names with the keys of dict_to_search and fills input_dict list with their corresponding values. If the matches fail, it retrieves columns of the provided fallback_df</p> <p>Parameters:</p> Name Type Description Default <code>dict_to_search</code> <code>dict</code> <p>contains key-value pairs where key is a possible input name and value is its corresponding value</p> required <code>fallback_df</code> <code>pd.DataFrame</code> <p>contains data to return as an alternative</p> required <p>Returns:</p> Type Description <code>Dict[str, np.ndarray]</code> <p>Dict[str, np.ndarray]: pairs of input entity types and corresponding input values</p> Source code in <code>exe_kg_lib/classes/task.py</code> <pre><code>def get_inputs(self, dict_to_search: dict, fallback_df: pd.DataFrame) -&gt; Dict[str, np.ndarray]:\n\"\"\"\n    Tries to match the Task's input names with the keys of dict_to_search\n    and fills input_dict list with their corresponding values.\n    If the matches fail, it retrieves columns of the provided fallback_df\n    Args:\n        dict_to_search: contains key-value pairs where key is a possible input name and value is its corresponding value\n        fallback_df: contains data to return as an alternative\n\n    Returns:\n        Dict[str, np.ndarray]: pairs of input entity types and corresponding input values\n    \"\"\"\n    input_dict = {}\n    for input in self.has_input:\n        try:\n            input_dict[input.type] = dict_to_search[input.has_reference]\n        except KeyError:\n            input_dict[input.type] = fallback_df[input.has_source]\n\n    return input_dict\n</code></pre>"},{"location":"reference/classes/task/#exe_kg_lib.classes.task.Task.run_method","title":"<code>run_method(*args)</code>  <code>abstractmethod</code>","text":"<p>Abstract method to be implemented by Task sub-classes that are in the bottom of the hierarchy. Executes the logic that is needed to fulfill the Task.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>defined by sub-classes</p> <code>()</code> Source code in <code>exe_kg_lib/classes/task.py</code> <pre><code>@abstractmethod\ndef run_method(self, *args):\n\"\"\"\n    Abstract method to be implemented by Task sub-classes that are in the bottom of the hierarchy.\n    Executes the logic that is needed to fulfill the Task.\n    Args:\n        *args: defined by sub-classes\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/classes/tasks/ml_tasks/","title":"ml_tasks","text":""},{"location":"reference/classes/tasks/statistic_tasks/","title":"statistic_tasks","text":""},{"location":"reference/classes/tasks/visual_tasks/","title":"visual_tasks","text":""},{"location":"reference/cli/main/","title":"main","text":"<p>CLI entry point.</p>"},{"location":"reference/shacl/base_shape_graph_generator/","title":"base_shape_graph_generator","text":"<p>This script produces a SHACL shape graph based on the KG schemata and the generated KGs that represent the example pipelines.</p> <p>NOTE: The shape graph produced by this script is NOT identical to \"shacl_shape_graph.ttl\" because the latter has been adapted to the special cases of ExeKGLib.</p>"},{"location":"reference/utils/cli_utils/","title":"cli_utils","text":""},{"location":"reference/utils/cli_utils/#exe_kg_lib.utils.cli_utils.get_input_for_existing_data_entities","title":"<code>get_input_for_existing_data_entities(existing_data_entity_list)</code>","text":"<p>Asks user to choose data entities from an existing list</p> <p>Parameters:</p> Name Type Description Default <code>existing_data_entity_list</code> <code>List[DataEntity]</code> <p>contains DataEntity objects for the user to choose from</p> required <p>Returns:</p> Type Description <code>List[DataEntity]</code> <p>List[DataEntity]: contains the chosen DataEntity objects</p> Source code in <code>exe_kg_lib/utils/cli_utils.py</code> <pre><code>def get_input_for_existing_data_entities(\n    existing_data_entity_list: List[DataEntity],\n) -&gt; List[DataEntity]:\n\"\"\"\n    Asks user to choose data entities from an existing list\n    Args:\n        existing_data_entity_list: contains DataEntity objects for the user to choose from\n\n    Returns:\n        List[DataEntity]: contains the chosen DataEntity objects\n    \"\"\"\n    if not existing_data_entity_list:\n        return []\n\n    chosen_data_entity_list = []\n    print(\"Choose input for the task from existing data entities:\")\n    while True:\n        for i, data_entity in enumerate(existing_data_entity_list):\n            print(f\"\\t{str(i)}. {data_entity.name}\")\n        print(f\"\\t{str(-1)}. Continue\")\n        chosen_data_entity_i = int(input())\n        if chosen_data_entity_i == -1:\n            break\n\n        chosen_data_entity_list.append(existing_data_entity_list[chosen_data_entity_i])\n\n    return chosen_data_entity_list\n</code></pre>"},{"location":"reference/utils/cli_utils/#exe_kg_lib.utils.cli_utils.get_input_for_new_data_entities","title":"<code>get_input_for_new_data_entities(data_semantics_list, data_structure_list, namespace, data_entity)</code>","text":"<p>Asks user to specify info of new data entities and creates relevant objects</p> <p>Parameters:</p> Name Type Description Default <code>data_semantics_list</code> <code>List[Entity]</code> <p>contains data semantics for the user to choose from</p> required <code>data_structure_list</code> <code>List[Entity]</code> <p>contains data structures for the user to choose from</p> required <code>namespace</code> <code>Namespace</code> <p>KG schema namespace to use when initializing the new entities</p> required <code>data_entity</code> <code>Entity</code> <p>Entity object to assign as parent entity of the new entities</p> required <p>Returns:</p> Type Description <code>List[DataEntity]</code> <p>List[DataEntity]: contains the created DataEntity objects</p> Source code in <code>exe_kg_lib/utils/cli_utils.py</code> <pre><code>def get_input_for_new_data_entities(\n    data_semantics_list: List[Entity], data_structure_list: List[Entity], namespace: Namespace, data_entity: Entity\n) -&gt; List[DataEntity]:\n\"\"\"\n    Asks user to specify info of new data entities and creates relevant objects\n    Args:\n        data_semantics_list: contains data semantics for the user to choose from\n        data_structure_list: contains data structures for the user to choose from\n        namespace: KG schema namespace to use when initializing the new entities\n        data_entity: Entity object to assign as parent entity of the new entities\n\n    Returns:\n        List[DataEntity]: contains the created DataEntity objects\n    \"\"\"\n    data_entities = []\n\n    prompt = \"Enter input columns, then 'quit' when done: \"\n    source = input(prompt)\n    while source != \"quit\":\n        new_data_entity = DataEntity(namespace + source, data_entity, source)\n\n        print(f\"Choose data semantics for {source}:\")\n        for i, t in enumerate(data_semantics_list):\n            print(f\"\\t{str(i)}. {t.name}\")\n        chosen_data_semantics_id = int(input())\n        new_data_entity.has_data_semantics = data_semantics_list[chosen_data_semantics_id].iri\n\n        print(f\"Choose data structure for {source}:\")\n        for i, t in enumerate(data_structure_list):\n            print(f\"\\t{str(i)}. {t.name}\")\n        chosen_data_structure_id = int(input())\n        new_data_entity.has_data_structure = data_structure_list[chosen_data_structure_id].iri\n\n        data_entities.append(new_data_entity)\n\n        source = input(prompt)\n\n    return data_entities\n</code></pre>"},{"location":"reference/utils/cli_utils/#exe_kg_lib.utils.cli_utils.input_pipeline_info","title":"<code>input_pipeline_info()</code>","text":"<p>Asks user to provide a name for the pipeline and a path for the input data</p> <p>Returns:</p> Type Description <code>Tuple[str, str]</code> <p>Tuple[str, str]: contains the provided strings</p> Source code in <code>exe_kg_lib/utils/cli_utils.py</code> <pre><code>def input_pipeline_info() -&gt; Tuple[str, str]:\n\"\"\"\n    Asks user to provide a name for the pipeline and a path for the input data\n    Returns:\n        Tuple[str, str]: contains the provided strings\n    \"\"\"\n    pipeline_name = input(\"Enter a name for the pipeline: \")\n    input_data_path = input(\"Enter a path for the input data: \")\n\n    return pipeline_name, input_data_path\n</code></pre>"},{"location":"reference/utils/kg_creation_utils/","title":"kg_creation_utils","text":""},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.add_and_attach_data_entity","title":"<code>add_and_attach_data_entity(kg, data, top_level_kg, top_level_schema_namespace, data_entity, relation, task_entity)</code>","text":"<p>Adds data entity instance to kg with the necessary relations, and attaches it to the given task</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>Graph object to add to</p> required <code>data</code> <code>Entity</code> <p>object representing top-level DataEntity class in KG</p> required <code>top_level_kg</code> <code>Graph</code> <p>KG corresponding to the top-level KG schema</p> required <code>top_level_schema_namespace</code> <code>Namespace</code> <p>namespace of the top-level KG schema</p> required <code>data_entity</code> <code>DataEntity</code> <p>data entity to add</p> required <code>relation</code> <code>URIRef</code> <p>IRI of relation to add</p> required <code>task_entity</code> <code>Task</code> <p>task to attach the data entity to</p> required Source code in <code>exe_kg_lib/utils/kg_creation_utils.py</code> <pre><code>def add_and_attach_data_entity(\n    kg: Graph,\n    data: Entity,\n    top_level_kg: Graph,\n    top_level_schema_namespace: Namespace,\n    data_entity: DataEntity,\n    relation: URIRef,\n    task_entity: Task,\n) -&gt; None:\n\"\"\"\n    Adds data entity instance to kg with the necessary relations, and attaches it to the given task\n    Args:\n        kg: Graph object to add to\n        data: object representing top-level DataEntity class in KG\n        top_level_kg: KG corresponding to the top-level KG schema\n        top_level_schema_namespace: namespace of the top-level KG schema\n        data_entity: data entity to add\n        relation: IRI of relation to add\n        task_entity: task to attach the data entity to\n    \"\"\"\n    add_data_entity_instance(kg, data, top_level_kg, top_level_schema_namespace, data_entity)\n    add_relation(kg, task_entity, relation, data_entity)\n</code></pre>"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.add_data_entity_instance","title":"<code>add_data_entity_instance(kg, data, top_level_kg, top_level_schema_namespace, data_entity)</code>","text":"<p>Adds data entity instance to kg with the necessary relations</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>Graph object to add to</p> required <code>data</code> <code>Entity</code> <p>object representing top-level DataEntity class in KG</p> required <code>top_level_kg</code> <code>Graph</code> <p>KG corresponding to the top-level KG schema</p> required <code>top_level_schema_namespace</code> <code>Namespace</code> <p>namespace of the top-level KG schema</p> required <code>data_entity</code> <code>DataEntity</code> <p>data entity to add</p> required Source code in <code>exe_kg_lib/utils/kg_creation_utils.py</code> <pre><code>def add_data_entity_instance(\n    kg: Graph,\n    data: Entity,\n    top_level_kg: Graph,\n    top_level_schema_namespace: Namespace,\n    data_entity: DataEntity,\n) -&gt; None:\n\"\"\"\n    Adds data entity instance to kg with the necessary relations\n    Args:\n        kg: Graph object to add to\n        data: object representing top-level DataEntity class in KG\n        top_level_kg: KG corresponding to the top-level KG schema\n        top_level_schema_namespace: namespace of the top-level KG schema\n        data_entity: data entity to add\n    \"\"\"\n    add_instance(kg, data_entity)\n\n    if data_entity.has_source:\n        has_source_iri, range_iri = get_first_query_result_if_exists(\n            get_data_properties_by_entity_iri, data.iri, top_level_kg\n        )\n\n        source_literal = Literal(\n            lexical_or_value=data_entity.has_source,\n            datatype=range_iri,\n        )\n\n        add_literal(kg, data_entity, has_source_iri, source_literal)\n\n    if data_entity.has_data_structure:\n        add_relation(\n            kg,\n            data_entity,\n            top_level_schema_namespace.hasDataStructure,\n            Entity(data_entity.has_data_structure),\n        )\n\n    if data_entity.has_data_semantics:\n        add_relation(\n            kg,\n            data_entity,\n            top_level_schema_namespace.hasDataSemantics,\n            Entity(data_entity.has_data_semantics),\n        )\n\n    if data_entity.has_reference:\n        add_relation(\n            kg,\n            data_entity,\n            top_level_schema_namespace.hasReference,\n            Entity(data_entity.has_reference),\n        )\n</code></pre>"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.add_instance","title":"<code>add_instance(kg, entity_instance)</code>","text":"<p>Adds entity instance to KG only if its parent entity exists and there is no instance with the same IRI</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>Graph object to add to</p> required <code>entity_instance</code> <code>Entity</code> <p>the entity instance to create</p> required Source code in <code>exe_kg_lib/utils/kg_creation_utils.py</code> <pre><code>def add_instance(kg: Graph, entity_instance: Entity) -&gt; None:\n\"\"\"\n    Adds entity instance to KG only if its parent entity exists and there is no instance with the same IRI\n    Args:\n        kg: Graph object to add to\n        entity_instance: the entity instance to create\n    \"\"\"\n    if entity_instance.parent_entity and (entity_instance.iri, None, None) not in kg:\n        kg.add((entity_instance.iri, RDF.type, entity_instance.parent_entity.iri))\n</code></pre>"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.add_instance_from_parent_with_relation","title":"<code>add_instance_from_parent_with_relation(namespace, kg, parent_entity, relation_iri, related_entity, instance_name)</code>","text":"<p>Creates an entity object based on the arguments and calls add_instance() and add_relation() to create a new entity instance and relation</p> <p>Parameters:</p> Name Type Description Default <code>namespace</code> <code>Namespace</code> <p>namespace for the new instance</p> required <code>kg</code> <code>Graph</code> <p>Graph object to add to</p> required <code>parent_entity</code> <code>Entity</code> <p>parent entity for the new instance</p> required <code>relation_iri</code> <code>str</code> <p>IRI that connects the given related_entity with the new instance</p> required <code>related_entity</code> <code>Entity</code> <p>relation source</p> required <code>instance_name</code> <code>str</code> <p>name for the new instance</p> required <p>Returns:</p> Name Type Description <code>Entity</code> <code>Entity</code> <p>object containing the new entity instance's basic info</p> Source code in <code>exe_kg_lib/utils/kg_creation_utils.py</code> <pre><code>def add_instance_from_parent_with_relation(\n    namespace: Namespace,\n    kg: Graph,\n    parent_entity: Entity,\n    relation_iri: str,\n    related_entity: Entity,\n    instance_name: str,\n) -&gt; Entity:\n\"\"\"\n    Creates an entity object based on the arguments and calls add_instance() and add_relation() to create a new entity instance and relation\n    Args:\n        namespace: namespace for the new instance\n        kg: Graph object to add to\n        parent_entity: parent entity for the new instance\n        relation_iri: IRI that connects the given related_entity with the new instance\n        related_entity: relation source\n        instance_name: name for the new instance\n\n    Returns:\n        Entity: object containing the new entity instance's basic info\n    \"\"\"\n    entity_iri = namespace + instance_name\n    instance = Entity(entity_iri, parent_entity)\n\n    add_instance(kg, instance)\n    add_relation(kg, related_entity, relation_iri, instance)\n\n    return instance\n</code></pre>"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.add_literal","title":"<code>add_literal(kg, from_entity, relation_iri, literal)</code>","text":"<p>Adds relation between a given entity and a given literal to KG</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>Graph object to add to</p> required <code>from_entity</code> <code>Entity</code> <p>relation source</p> required <code>relation_iri</code> <code>str</code> <p>IRI that connects the given entity with the given literal</p> required <code>literal</code> <code>Literal</code> <p>literal to add to Graph object</p> required Source code in <code>exe_kg_lib/utils/kg_creation_utils.py</code> <pre><code>def add_literal(kg: Graph, from_entity: Entity, relation_iri: str, literal: Literal) -&gt; None:\n\"\"\"\n    Adds relation between a given entity and a given literal to KG\n    Args:\n        kg: Graph object to add to\n        from_entity: relation source\n        relation_iri: IRI that connects the given entity with the given literal\n        literal: literal to add to Graph object\n    \"\"\"\n    kg.add((from_entity.iri, URIRef(relation_iri), literal))\n</code></pre>"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.add_relation","title":"<code>add_relation(kg, from_entity, relation_iri, to_entity)</code>","text":"<p>Adds relation between 2 given entities to KG</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>Graph object to add to</p> required <code>from_entity</code> <code>Entity</code> <p>relation source</p> required <code>relation_iri</code> <code>str</code> <p>IRI that connects the 2 given entities</p> required <code>to_entity</code> <code>Entity</code> <p>relation destination</p> required Source code in <code>exe_kg_lib/utils/kg_creation_utils.py</code> <pre><code>def add_relation(kg: Graph, from_entity: Entity, relation_iri: str, to_entity: Entity) -&gt; None:\n\"\"\"\n    Adds relation between 2 given entities to KG\n    Args:\n        kg: Graph object to add to\n        from_entity: relation source\n        relation_iri: IRI that connects the 2 given entities\n        to_entity: relation destination\n    \"\"\"\n    kg.add(\n        (\n            from_entity.iri,\n            URIRef(relation_iri),\n            to_entity.iri,\n        )\n    )\n</code></pre>"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.create_pipeline_task","title":"<code>create_pipeline_task(top_level_schema_namespace, parent_entity, kg, pipeline_name, input_data_path)</code>","text":"<p>Adds instance of pipeline task to kg</p> <p>Parameters:</p> Name Type Description Default <code>top_level_schema_namespace</code> <code>Namespace</code> <p>namespace of the top-level KG schema</p> required <code>parent_entity</code> <code>Entity</code> <p>parent entity of pipeline instance</p> required <code>kg</code> <code>Graph</code> <p>Graph object to add to</p> required <code>pipeline_name</code> <code>str</code> <p>name for the pipeline</p> required <code>input_data_path</code> <code>str</code> <p>path for the input data to be used by the pipeline's tasks</p> required <p>Returns:</p> Name Type Description <code>Task</code> <code>Task</code> <p>created pipeline task</p> Source code in <code>exe_kg_lib/utils/kg_creation_utils.py</code> <pre><code>def create_pipeline_task(\n    top_level_schema_namespace: Namespace,\n    parent_entity: Entity,\n    kg: Graph,\n    pipeline_name: str,\n    input_data_path: str,\n) -&gt; Task:\n\"\"\"\n    Adds instance of pipeline task to kg\n    Args:\n        top_level_schema_namespace: namespace of the top-level KG schema\n        parent_entity: parent entity of pipeline instance\n        kg: Graph object to add to\n        pipeline_name: name for the pipeline\n        input_data_path: path for the input data to be used by the pipeline's tasks\n\n    Returns:\n        Task: created pipeline task\n    \"\"\"\n    pipeline = Task(top_level_schema_namespace + pipeline_name, parent_entity)\n    add_instance(kg, pipeline)\n\n    input_data_path_literal = Literal(lexical_or_value=input_data_path, datatype=XSD.string)\n    add_literal(kg, pipeline, top_level_schema_namespace.hasInputDataPath, input_data_path_literal)\n\n    return pipeline\n</code></pre>"},{"location":"reference/utils/kg_creation_utils/#exe_kg_lib.utils.kg_creation_utils.name_instance","title":"<code>name_instance(task_type_dict, method_type_dict, parent_entity)</code>","text":"<p>Creates a unique name for a new instance by concatenating the parent entity's name (which is the instance type) with a number Also increments the relevant number of the corresponding dict</p> <p>Parameters:</p> Name Type Description Default <code>task_type_dict</code> <code>Dict[str, int]</code> <p>contains pairs of task types and numbers</p> required <code>method_type_dict</code> <code>Dict[str, int]</code> <p>contains pairs of method types and numbers</p> required <code>parent_entity</code> <code>Entity</code> <p>instance's parent entity</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>Union[None, str]</code> <p>name to be given to the new instance</p> <code>None</code> <code>Union[None, str]</code> <p>if the type of the given parent entity is not equal with \"AtomicTask\" or \"AtomicMethod\"</p> Source code in <code>exe_kg_lib/utils/kg_creation_utils.py</code> <pre><code>def name_instance(\n    task_type_dict: Dict[str, int],\n    method_type_dict: Dict[str, int],\n    parent_entity: Entity,\n) -&gt; Union[None, str]:\n\"\"\"\n    Creates a unique name for a new instance by concatenating the parent entity's name (which is the instance type) with a number\n    Also increments the relevant number of the corresponding dict\n    Args:\n        task_type_dict: contains pairs of task types and numbers\n        method_type_dict: contains pairs of method types and numbers\n        parent_entity: instance's parent entity\n\n    Returns:\n        str: name to be given to the new instance\n        None: if the type of the given parent entity is not equal with \"AtomicTask\" or \"AtomicMethod\"\n    \"\"\"\n    if parent_entity.type == \"AtomicTask\":\n        entity_type_dict = task_type_dict\n    elif parent_entity.type == \"AtomicMethod\":\n        entity_type_dict = method_type_dict\n    else:\n        print(\"Error: Invalid parent entity type\")\n        return None\n\n    instance_name = parent_entity.name + str(entity_type_dict[parent_entity.name])\n    entity_type_dict[parent_entity.name] += 1\n    return instance_name\n</code></pre>"},{"location":"reference/utils/kg_validation_utils/","title":"kg_validation_utils","text":""},{"location":"reference/utils/kg_validation_utils/#exe_kg_lib.utils.kg_validation_utils.check_kg_executability","title":"<code>check_kg_executability(kg)</code>","text":"<p>Checks if the given KG is executable as an ML pipeline, based on a pre-defined SHACL shape graph</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>rdflib.Graph or str</code> <p>object or path of graph to check</p> required Source code in <code>exe_kg_lib/utils/kg_validation_utils.py</code> <pre><code>def check_kg_executability(kg: Union[rdflib.Graph, str]) -&gt; None:\n\"\"\"Checks if the given KG is executable as an ML pipeline, based on a pre-defined SHACL shape graph\n\n    Args:\n        kg (rdflib.Graph or str): object or path of graph to check\n    \"\"\"\n    r = validate(data_graph=kg, shacl_graph=SHACL_SHAPE_GRAPH_PATH)\n    conforms, _, results_text = r\n    if not conforms:\n        print(results_text)\n        print(\n            \"Validation of KG failed. To ensure executability of the KG as an ML pipeline, please fix the above error(s) and try again.\"\n        )\n        exit(1)\n    return\n</code></pre>"},{"location":"reference/utils/query_utils/","title":"query_utils","text":""},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.get_data_properties_plus_inherited_by_class_iri","title":"<code>get_data_properties_plus_inherited_by_class_iri(kg, entity_iri)</code>","text":"<p>Retrieves data properties plus the inherited ones, given an entity IRI</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>Graph object to use when querying</p> required <code>entity_iri</code> <code>str</code> <p>IRI of entity to query</p> required <p>Returns:</p> Name Type Description <code>List</code> <code>List</code> <p>contains rows of data property IRIs and their range</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def get_data_properties_plus_inherited_by_class_iri(kg: Graph, entity_iri: str) -&gt; List:\n\"\"\"\n    Retrieves data properties plus the inherited ones, given an entity IRI\n    Args:\n        kg: Graph object to use when querying\n        entity_iri: IRI of entity to query\n\n    Returns:\n        List: contains rows of data property IRIs and their range\n    \"\"\"\n    property_list = list(get_data_properties_by_entity_iri(entity_iri, kg))\n    method_parent_classes = list(query_method_parent_classes(kg, entity_iri))\n    for method_class_result_row in method_parent_classes:\n        property_list += list(get_data_properties_by_entity_iri(method_class_result_row[0], kg))\n\n    return property_list\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.get_method_by_task_iri","title":"<code>get_method_by_task_iri(kg, namespace_prefix, namespace, task_iri)</code>","text":"<p>Retrieves a task's method, given a task IRI</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>Graph object to use when querying</p> required <code>namespace_prefix</code> <code>str</code> <p>namespace prefix to use when querying</p> required <code>namespace</code> <code>Namespace</code> <p>namespace to use when querying</p> required <code>task_iri</code> <code>str</code> <p>IRI of task to query</p> required <p>Returns:</p> Type Description <code>Optional[Entity]</code> <p>Optional[Entity]: object containing found method's basic info               is equal to None if method IRI wasn't found in KG</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def get_method_by_task_iri(\n    kg: Graph,\n    namespace_prefix: str,\n    namespace: Namespace,\n    task_iri: str,\n) -&gt; Optional[Entity]:\n\"\"\"\n    Retrieves a task's method, given a task IRI\n    Args:\n        kg: Graph object to use when querying\n        namespace_prefix: namespace prefix to use when querying\n        namespace: namespace to use when querying\n        task_iri: IRI of task to query\n\n    Returns:\n        Optional[Entity]: object containing found method's basic info\n                          is equal to None if method IRI wasn't found in KG\n    \"\"\"\n    query_result = get_first_query_result_if_exists(\n        query_method_iri_by_task_iri,\n        kg,\n        namespace_prefix,\n        task_iri,\n    )\n    if query_result is None:\n        return None\n\n    method_iri = str(query_result[0])\n\n    query_result = get_first_query_result_if_exists(\n        query_entity_parent_iri,\n        kg,\n        method_iri,\n        namespace.AtomicMethod,\n    )\n    if query_result is None:\n        return None\n\n    method_parent_iri = str(query_result[0])\n\n    return Entity(method_iri, Entity(method_parent_iri))\n</code></pre>"},{"location":"reference/utils/query_utils/#exe_kg_lib.utils.query_utils.get_pipeline_and_first_task_iri","title":"<code>get_pipeline_and_first_task_iri(kg, namespace_prefix)</code>","text":"<p>Retrieves the necessary information needed to start parsing a pipeline</p> <p>Parameters:</p> Name Type Description Default <code>kg</code> <code>Graph</code> <p>Graph object to use when querying</p> required <code>namespace_prefix</code> <code>str</code> <p>namespace prefix to use when querying</p> required <p>Returns:</p> Type Description <code>Tuple[str, str, str]</code> <p>Tuple[str, str, str]: contains the pipeline IRI, the input data path and the first task's IRI</p> Source code in <code>exe_kg_lib/utils/query_utils.py</code> <pre><code>def get_pipeline_and_first_task_iri(kg: Graph, namespace_prefix: str) -&gt; Tuple[str, str, str]:\n\"\"\"\n    Retrieves the necessary information needed to start parsing a pipeline\n    Args:\n        kg: Graph object to use when querying\n        namespace_prefix: namespace prefix to use when querying\n\n    Returns:\n        Tuple[str, str, str]: contains the pipeline IRI, the input data path and the first task's IRI\n    \"\"\"\n    # assume one pipeline per file\n    query_result = get_first_query_result_if_exists(\n        query_pipeline_info,\n        kg,\n        namespace_prefix,\n    )\n    if query_result is None:\n        print(\"Error: Pipeline info not found\")\n        exit(1)\n\n    pipeline_iri, input_data_path, task_iri = query_result\n\n    return str(pipeline_iri), str(input_data_path), str(task_iri)\n</code></pre>"},{"location":"reference/utils/string_utils/","title":"string_utils","text":""},{"location":"reference/utils/string_utils/#exe_kg_lib.utils.string_utils.camel_to_snake","title":"<code>camel_to_snake(text)</code>","text":"<p>Converts camel-case string to snake-case</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>string to convert</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>converted string</p> Source code in <code>exe_kg_lib/utils/string_utils.py</code> <pre><code>def camel_to_snake(text: str) -&gt; str:\n\"\"\"\n    Converts camel-case string to snake-case\n    Args:\n        text: string to convert\n\n    Returns:\n        str: converted string\n    \"\"\"\n    text = re.sub(\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", text)\n    return re.sub(\"([a-z0-9])([A-Z])\", r\"\\1_\\2\", text).lower()\n</code></pre>"},{"location":"reference/utils/string_utils/#exe_kg_lib.utils.string_utils.property_name_to_field_name","title":"<code>property_name_to_field_name(property_name)</code>","text":"<p>Extracts property name from IRI and converts it to snake-case</p> <p>Parameters:</p> Name Type Description Default <code>property_name</code> <code>str</code> <p>IRI to parse</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>converted string</p> Source code in <code>exe_kg_lib/utils/string_utils.py</code> <pre><code>def property_name_to_field_name(property_name: str) -&gt; str:\n\"\"\"\n    Extracts property name from IRI and converts it to snake-case\n    Args:\n        property_name: IRI to parse\n\n    Returns:\n        str: converted string\n    \"\"\"\n    return camel_to_snake(property_name.split(\"#\")[1])\n</code></pre>"},{"location":"reference/utils/task_utils/ml_utils/","title":"ml_utils","text":""},{"location":"reference/utils/task_utils/ml_utils/#exe_kg_lib.utils.task_utils.ml_utils.data_splitting","title":"<code>data_splitting(input_x, input_y, split_ratio)</code>","text":"<p>split data into training and testing set</p> Source code in <code>exe_kg_lib/utils/task_utils/ml_utils.py</code> <pre><code>def data_splitting(\n    input_x: pd.DataFrame, input_y: np.ndarray, split_ratio: str\n) -&gt; Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame, pd.DataFrame]:\n\"\"\"split data into training and testing set\"\"\"\n\n    splitting_point = int(float(split_ratio) * float(input_x.shape[0]))\n\n    train_x = input_x.iloc[:splitting_point]\n    test_x = input_x.iloc[splitting_point:]\n    train_y = input_y.iloc[:splitting_point]\n    test_y = input_y.iloc[splitting_point:]\n\n    return train_x, test_x, train_y, test_y\n</code></pre>"},{"location":"reference/utils/task_utils/statistic_utils/","title":"statistic_utils","text":""},{"location":"reference/utils/task_utils/statistic_utils/#exe_kg_lib.utils.task_utils.statistic_utils.iqr_calculation","title":"<code>iqr_calculation(input_data, percent=50)</code>","text":"<p>return quarter of the input_data</p> Source code in <code>exe_kg_lib/utils/task_utils/statistic_utils.py</code> <pre><code>def iqr_calculation(input_data: np.ndarray, percent: int = 50) -&gt; np.ndarray:\n\"\"\"return quarter of the input_data\"\"\"\n    return np.percentile(input_data, percent)\n</code></pre>"},{"location":"reference/utils/task_utils/statistic_utils/#exe_kg_lib.utils.task_utils.statistic_utils.outlier_calculation","title":"<code>outlier_calculation(input, iq1=None, iq3=None)</code>","text":"<p>return the outliers in the data</p> Source code in <code>exe_kg_lib/utils/task_utils/statistic_utils.py</code> <pre><code>def outlier_calculation(input: np.ndarray, iq1: float = None, iq3: float = None) -&gt; np.ndarray:\n\"\"\"return the outliers in the data\"\"\"\n    iq1 = iqr_calculation(input, 25) if (not iq1) else iq1\n    iq3 = iqr_calculation(input, 75) if (not iq3) else iq3\n    median = np.median(input)\n    iqr = iq3 - iq1\n    high_outliers = input &lt; median - 1.5 * iqr\n    low_outliers = input &gt; median + 1.5 * iqr\n    outlier_rows = [low_outliers.iloc[i] or high_outliers.iloc[i] for i in range(len(input))]\n    return outlier_rows\n</code></pre>"},{"location":"reference/utils/task_utils/statistic_utils/#exe_kg_lib.utils.task_utils.statistic_utils.trend_calculation","title":"<code>trend_calculation(input_data, half_window_size=2, padding='same')</code>","text":"<p>calculate the trend of the data, which is the sliding-window average</p> Source code in <code>exe_kg_lib/utils/task_utils/statistic_utils.py</code> <pre><code>def trend_calculation(\n    input_data: np.ndarray,\n    half_window_size: int = 2,\n    padding: str = \"same\",\n) -&gt; np.ndarray:\n\"\"\"calculate the trend of the data, which is the sliding-window average\"\"\"\n\n    def padding_input(input: np.ndarray, half_window_size: int, padding: str = \"same\") -&gt; np.ndarray:\n\"\"\"padding the beginning and end of the input data by the beginning or end value\"\"\"\n        if padding == \"same\":\n            begin_padding = pd.Series([input.iloc[0]] * half_window_size)\n            end_padding = pd.Series([input.iloc[len(input) - 1]] * half_window_size)\n            output = pd.concat([begin_padding, input, end_padding]).reset_index().drop(\"index\", axis=1)\n            return output\n\n        else:\n            return 0\n\n    input = padding_input(input_data, half_window_size)\n\n    output = 0\n    input_len = len(input) - 2 * half_window_size\n    for i in range(2 * half_window_size + 1):\n        output += np.array(input.iloc[i : i + input_len])\n\n    output = output / (2 * half_window_size + 1)\n\n    return output\n</code></pre>"},{"location":"reference/utils/task_utils/visual_utils/","title":"visual_utils","text":""},{"location":"reference/utils/task_utils/visual_utils/#exe_kg_lib.utils.task_utils.visual_utils.canvas_creation","title":"<code>canvas_creation(layout)</code>","text":"<p>the canvas task taking as input the starting task POs and output the fig and grid</p> Source code in <code>exe_kg_lib/utils/task_utils/visual_utils.py</code> <pre><code>def canvas_creation(layout: str) -&gt; Tuple[Figure, Optional[plt.GridSpec]]:\n\"\"\"the canvas task taking as input the starting task POs and output the fig and grid\"\"\"\n\n    font = FontProperties()\n    font.set_size(10)\n    font.set_name(\"Verdana\")\n\n    try:\n        n_rows, n_cols = (int(i) for i in layout[0].split(\" \"))\n    except:\n        n_rows, n_cols = (1, 1)\n\n    fig = plt.figure(figsize=(7, 5))\n\n    grid = None if (n_rows == n_cols and n_rows == 1) else plt.GridSpec(n_rows, n_cols, hspace=0.3, wspace=0.3)\n\n    return fig, grid\n</code></pre>"}]}