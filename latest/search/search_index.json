{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"executable-ml-kgs \u00b6 Library for excutable ML pipelines KGs. Disclaimer: This project is at an early stage of development and subject to change. Created with by the bloody-python template.","title":"Overview"},{"location":"#executable-ml-kgs","text":"Library for excutable ML pipelines KGs. Disclaimer: This project is at an early stage of development and subject to change. Created with by the bloody-python template.","title":"executable-ml-kgs"},{"location":"contributing/","text":"Contributing \u00b6 TL;DR: 10 Steps To Your First Pull Request \u00b6 Ok, this is a long document so let's TL;DR this. The following recipe quickly outlines ten steps to your first successful contribution in the form of a pull request. First, create an issue in our issue tracker and describe the contribution you intend to make. We use feature branches. So before you start coding, create a fork and a local feature branch, on which you will make your changes. We use the following template for naming feature branches: \"feature/\"<Short description> Here is an example for a valid feature branch name: feature/enhance-documentation ( More about our branching conventions ) Make the changes in your local git repository and commit. ( More about our commit message conventions ) When you'd like to share your code and/or start a pull request to get feedback, push your commits to the repository. Open the Branches view in GitHub. Your newly pushed branch should show up there. Usually, all repositories have an associated build job which will pick up your new branch and build it once you open a PR. If the build fails and you know how to fix it, please do. If you don't, go ahead and contact us via the pull request to allow us to help you make the build green. Enter a meaningful title, prefixed with the issue number and possibly a slightly longer version of your branch name. Here is an example: #1 - Add missing documentation Briefly describe the changes you are submitting in the Description field. The goal here is to make the life of the reviewers as easy as possible by explaining what you did and why. The description can be formatted as markdown, so feel free to format, add code examples, link to specific lines of code or even add sketches or diagrams. You can also @-mention anyone on GitHub to inform them of the PR (usually we do that by prefixing the @-mention with /CC or /FYI ). ( More on our conventions for communicating within pull requests ) Every pull request will be reviewed and approved by at least one maintainer (see README.md ) before it is merged. Add at least one of the maintainers as reviewer. This is, in a nutshell, how you make contributions to this community. It may sound complicated at first, but you'll quickly internalize the steps and will be able to create a pull request in mere minutes or less. Please find a detailed description in the How to Contribute section. Whom to Contact in Case of Questions? \u00b6 Communication is usually done via Issues and PRs. If, for some reason, you prefer kicking off the collaboration in a personal conversation, please contact the maintainers of this repository, which are listed in this repository's README.md . How to Submit a Bug Report? \u00b6 Found a bug? Great! A core task in improving our product is to identify any flaws that may be present. The best place to report a bug is to create an issue in our issue tracker . How to Submit a Feature Request? \u00b6 If you have suggestions for us on how to improve our code or our documentation or have a new feature in mind, please by all means do let us know. The same rules apply as for bug reports: add a new issue outlining your suggestion in our issue tracker . How to Contribute? \u00b6 If you have fixed a bug or have developed that new feature you would like to make available to your fellow users, or even if you have fixed whitespace or formatting issues, we'd like to encourage you to contribute that to our codebase. In this repository, we use pull requests to facilitate all contributions. Every pull request will be peer-reviewed by at least one community member, which is a great way to get in touch with each other. Clean Code \u00b6 More important than writing code that adheres to our styleguide is writing Clean Code . We consider code to be clean , if it works, is easy to understand, is easy to modify and is easy to test. Any code contribution will be reviewed by us with respect to these criteria. We are more than happy and indeed consider it a core part of being BIOS to invest time mentoring junior developers to help them create cleaner code and to improve future contributions. In addition to these principles of clean code, we also try to design our architectures for participation . That, to us, means to avoid unnecessary complexity, tight coupling or complex dependency relationships. Testing Conventions \u00b6 We are convinced that writing testable code and writing tests is a precondition for any software to be maintainable. Even though we do not prescribe fixed coverage thresholds for our tests, we encourage (and often will require) you to write tests for code that needs to be maintainable where the effort is not excessive. This means, that we aim to write code with testability in mind (following the test first principle) write tests for everything we can test expose a submitted bug with a test first, before we implement a fix. We also aim to write our tests such that they can be read as a specification (because we usually don't spend time writing those). In practice, this means that we use long, verbose and expressive names for tests which convey the condition being tested. In our experience, writing tests can actually be a lot of fun. As a programmer, you have more leeway to experiment and try new programming approaches when writing tests. That is why we often try out new language features in our test code, first. And if you're following the test first principle, it's always quite rewarding to see those red test cases continue to turn green, once the implementation is complete. Finally, only adequate tests will empower you to continuously improve your codebase with refactoring, as this provides the reassurance that you didn't break anything accidentally. Branching Conventions \u00b6 The following convention applies for naming feature branches: feature/<description> Here is an example for a valid feature branch name: feature/add-missing-docstrings Commit Message Conventions \u00b6 We follow the conventional commits specification to add human and machine readable meaning to commit messages. In general, commit messages should briefly describe the change introduced with the commit and ideally contain the issue id(s) the changes refer to. Here are some examples of good commit messages: \"feat(docs): added installation instructions for getting started (#1)\" \"fix(module-a): Added missing arguments in docstrings (#2)\" Following this convention automatically associates the commit, and thus the branch and pull request that it belongs to with the given issue and vice versa. Writing Documentation \u00b6 We follow these principles when documenting code: We aim at keeping documentation as close the the asset being documented as possible. That is, where sensible, we use inline code documentation. We use Mermaid for specifying diagrams in the code in order to be tool agnostic and allow everybody to adapt and improve it. We favor Markdown or other text based means of generating documentation and try not to use proprietary tools, such as Word or PowerPoint for that. We aim at providing our users with easy to understand instructions on how to use our code in each repositories README.md . We favor code examples over analytical descriptions of our codebase. Pull Requests \u00b6 Pull requests are our main vehicle for submitting, reviewing and merging new code into our codebase. A pull request is more than just an easy interface to git: it is a powerful collaboration and communication tool. They are especially well suited to share knowledge and onboard new contributors. So if you are new to te community, submitting pull requests is an excellent way for you to engage with us and for us to help you get started. Discussions and the Q&A that often accompanies pull requests are archived and linkable and we thus use them to disseminate knowledge about our codebase. Conventions for Communicating in Pull Requests \u00b6 These articles ( 1 , 2 ) summarize how (and how not) to communicate in pull requests. Apart from the social aspects of interactions, we follow a couple of conventions for signaling, i.e. using the various technical means of communicating in pull requests that are afforded to us by GitHub. Below are common signals and how you use our platform to set them. Signal Description Add s.o. as reviewer \"I'd like you to review my PR and I will not merge w/o your approval!\" Approve a PR \"I'm ok with merging this PR. If there are open tasks, I expect these to be finished before merging and I trust you to do this w/o another review!\" PR Needs Work \"I am not ok with merging this PR and I require changes to be made. I will re-review this PR after changes are made!\" @-mention s.o. in PR description with /CC prefix \"I'd like you to have a look at this PR but I'm not asking for your formal approval!\" @-mention s.o. in PR description with /FYI prefix \"Just so you know, we're working on this!\" @-mention s.o. in comment as part of question \"Can you please reply to my question with a comment?\" Reviewer adds task to PR \"This needs to be fixed before I merge this PR!\" Author of PR adds task in response to comment of reviewer \"I will finish this** task before merging!\" Mark task as completed \"This task is finished and I have pushed the changes!\" Add like \"I agree with the statemens made in the liked comment!\" Add link to issue \"I wil not make the change in this PR but will take care of it later!\" Generally speaking, when signalling, try to be respectful, be concise, be specific, clearly state your expectation and use links where possible (to files, lines in files, commits, pull requests, people, issues, other comments, \u2026) Definition of Done \u00b6 We use the following checklist to determine if a PR is ready to merge: The last build is green If new code was added or if a bug was fixed, corresponding tests have been added All tasks added by reviewers are resolved At least one maintainer has approved the PR and none has signaled Needs Work General Tips \u00b6 Keep your PRs as small as possible. The smaller the PR the higher the velocity of review and acceptance. Avoid conflating multiple issues in one PR. Aside from that usually leading to huge PRs and it making the job of a reviewer unnecessarily harder, it will also confuse the automated T&R issue state transition feature we use. Write a good description to allow the reviewer to quickly get an overview of your changes. Don't add more than two reviewers if you expect all of them to review. This will most likely block you. Other Contributions \u00b6 You don't have to be a coder to make a valuable contribution to this community! There are many contributions that you can make as a non-coder that will be very valuable to the community, such as giving feedback of any kind, reporting bugs, requesting features, adding new or improvements existing documentation, helping other users to use our software, asking and/or answering questions in our forums, promoting BIOS, Social Coding, our community and our software within Bosch or designing artwork for both our software, our wiki or our Bosch connect presence. May the source be with you!","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#tldr-10-steps-to-your-first-pull-request","text":"Ok, this is a long document so let's TL;DR this. The following recipe quickly outlines ten steps to your first successful contribution in the form of a pull request. First, create an issue in our issue tracker and describe the contribution you intend to make. We use feature branches. So before you start coding, create a fork and a local feature branch, on which you will make your changes. We use the following template for naming feature branches: \"feature/\"<Short description> Here is an example for a valid feature branch name: feature/enhance-documentation ( More about our branching conventions ) Make the changes in your local git repository and commit. ( More about our commit message conventions ) When you'd like to share your code and/or start a pull request to get feedback, push your commits to the repository. Open the Branches view in GitHub. Your newly pushed branch should show up there. Usually, all repositories have an associated build job which will pick up your new branch and build it once you open a PR. If the build fails and you know how to fix it, please do. If you don't, go ahead and contact us via the pull request to allow us to help you make the build green. Enter a meaningful title, prefixed with the issue number and possibly a slightly longer version of your branch name. Here is an example: #1 - Add missing documentation Briefly describe the changes you are submitting in the Description field. The goal here is to make the life of the reviewers as easy as possible by explaining what you did and why. The description can be formatted as markdown, so feel free to format, add code examples, link to specific lines of code or even add sketches or diagrams. You can also @-mention anyone on GitHub to inform them of the PR (usually we do that by prefixing the @-mention with /CC or /FYI ). ( More on our conventions for communicating within pull requests ) Every pull request will be reviewed and approved by at least one maintainer (see README.md ) before it is merged. Add at least one of the maintainers as reviewer. This is, in a nutshell, how you make contributions to this community. It may sound complicated at first, but you'll quickly internalize the steps and will be able to create a pull request in mere minutes or less. Please find a detailed description in the How to Contribute section.","title":"TL;DR: 10 Steps To Your First Pull Request"},{"location":"contributing/#whom-to-contact-in-case-of-questions","text":"Communication is usually done via Issues and PRs. If, for some reason, you prefer kicking off the collaboration in a personal conversation, please contact the maintainers of this repository, which are listed in this repository's README.md .","title":"Whom to Contact in Case of Questions?"},{"location":"contributing/#how-to-submit-a-bug-report","text":"Found a bug? Great! A core task in improving our product is to identify any flaws that may be present. The best place to report a bug is to create an issue in our issue tracker .","title":"How to Submit a Bug Report?"},{"location":"contributing/#how-to-submit-a-feature-request","text":"If you have suggestions for us on how to improve our code or our documentation or have a new feature in mind, please by all means do let us know. The same rules apply as for bug reports: add a new issue outlining your suggestion in our issue tracker .","title":"How to Submit a Feature Request?"},{"location":"contributing/#how-to-contribute","text":"If you have fixed a bug or have developed that new feature you would like to make available to your fellow users, or even if you have fixed whitespace or formatting issues, we'd like to encourage you to contribute that to our codebase. In this repository, we use pull requests to facilitate all contributions. Every pull request will be peer-reviewed by at least one community member, which is a great way to get in touch with each other.","title":"How to Contribute?"},{"location":"contributing/#clean-code","text":"More important than writing code that adheres to our styleguide is writing Clean Code . We consider code to be clean , if it works, is easy to understand, is easy to modify and is easy to test. Any code contribution will be reviewed by us with respect to these criteria. We are more than happy and indeed consider it a core part of being BIOS to invest time mentoring junior developers to help them create cleaner code and to improve future contributions. In addition to these principles of clean code, we also try to design our architectures for participation . That, to us, means to avoid unnecessary complexity, tight coupling or complex dependency relationships.","title":"Clean Code"},{"location":"contributing/#testing-conventions","text":"We are convinced that writing testable code and writing tests is a precondition for any software to be maintainable. Even though we do not prescribe fixed coverage thresholds for our tests, we encourage (and often will require) you to write tests for code that needs to be maintainable where the effort is not excessive. This means, that we aim to write code with testability in mind (following the test first principle) write tests for everything we can test expose a submitted bug with a test first, before we implement a fix. We also aim to write our tests such that they can be read as a specification (because we usually don't spend time writing those). In practice, this means that we use long, verbose and expressive names for tests which convey the condition being tested. In our experience, writing tests can actually be a lot of fun. As a programmer, you have more leeway to experiment and try new programming approaches when writing tests. That is why we often try out new language features in our test code, first. And if you're following the test first principle, it's always quite rewarding to see those red test cases continue to turn green, once the implementation is complete. Finally, only adequate tests will empower you to continuously improve your codebase with refactoring, as this provides the reassurance that you didn't break anything accidentally.","title":"Testing Conventions"},{"location":"contributing/#branching-conventions","text":"The following convention applies for naming feature branches: feature/<description> Here is an example for a valid feature branch name: feature/add-missing-docstrings","title":"Branching Conventions"},{"location":"contributing/#commit-message-conventions","text":"We follow the conventional commits specification to add human and machine readable meaning to commit messages. In general, commit messages should briefly describe the change introduced with the commit and ideally contain the issue id(s) the changes refer to. Here are some examples of good commit messages: \"feat(docs): added installation instructions for getting started (#1)\" \"fix(module-a): Added missing arguments in docstrings (#2)\" Following this convention automatically associates the commit, and thus the branch and pull request that it belongs to with the given issue and vice versa.","title":"Commit Message Conventions"},{"location":"contributing/#writing-documentation","text":"We follow these principles when documenting code: We aim at keeping documentation as close the the asset being documented as possible. That is, where sensible, we use inline code documentation. We use Mermaid for specifying diagrams in the code in order to be tool agnostic and allow everybody to adapt and improve it. We favor Markdown or other text based means of generating documentation and try not to use proprietary tools, such as Word or PowerPoint for that. We aim at providing our users with easy to understand instructions on how to use our code in each repositories README.md . We favor code examples over analytical descriptions of our codebase.","title":"Writing Documentation"},{"location":"contributing/#pull-requests","text":"Pull requests are our main vehicle for submitting, reviewing and merging new code into our codebase. A pull request is more than just an easy interface to git: it is a powerful collaboration and communication tool. They are especially well suited to share knowledge and onboard new contributors. So if you are new to te community, submitting pull requests is an excellent way for you to engage with us and for us to help you get started. Discussions and the Q&A that often accompanies pull requests are archived and linkable and we thus use them to disseminate knowledge about our codebase.","title":"Pull Requests"},{"location":"contributing/#conventions-for-communicating-in-pull-requests","text":"These articles ( 1 , 2 ) summarize how (and how not) to communicate in pull requests. Apart from the social aspects of interactions, we follow a couple of conventions for signaling, i.e. using the various technical means of communicating in pull requests that are afforded to us by GitHub. Below are common signals and how you use our platform to set them. Signal Description Add s.o. as reviewer \"I'd like you to review my PR and I will not merge w/o your approval!\" Approve a PR \"I'm ok with merging this PR. If there are open tasks, I expect these to be finished before merging and I trust you to do this w/o another review!\" PR Needs Work \"I am not ok with merging this PR and I require changes to be made. I will re-review this PR after changes are made!\" @-mention s.o. in PR description with /CC prefix \"I'd like you to have a look at this PR but I'm not asking for your formal approval!\" @-mention s.o. in PR description with /FYI prefix \"Just so you know, we're working on this!\" @-mention s.o. in comment as part of question \"Can you please reply to my question with a comment?\" Reviewer adds task to PR \"This needs to be fixed before I merge this PR!\" Author of PR adds task in response to comment of reviewer \"I will finish this** task before merging!\" Mark task as completed \"This task is finished and I have pushed the changes!\" Add like \"I agree with the statemens made in the liked comment!\" Add link to issue \"I wil not make the change in this PR but will take care of it later!\" Generally speaking, when signalling, try to be respectful, be concise, be specific, clearly state your expectation and use links where possible (to files, lines in files, commits, pull requests, people, issues, other comments, \u2026)","title":"Conventions for Communicating in Pull Requests"},{"location":"contributing/#definition-of-done","text":"We use the following checklist to determine if a PR is ready to merge: The last build is green If new code was added or if a bug was fixed, corresponding tests have been added All tasks added by reviewers are resolved At least one maintainer has approved the PR and none has signaled Needs Work","title":"Definition of Done"},{"location":"contributing/#general-tips","text":"Keep your PRs as small as possible. The smaller the PR the higher the velocity of review and acceptance. Avoid conflating multiple issues in one PR. Aside from that usually leading to huge PRs and it making the job of a reviewer unnecessarily harder, it will also confuse the automated T&R issue state transition feature we use. Write a good description to allow the reviewer to quickly get an overview of your changes. Don't add more than two reviewers if you expect all of them to review. This will most likely block you.","title":"General Tips"},{"location":"contributing/#other-contributions","text":"You don't have to be a coder to make a valuable contribution to this community! There are many contributions that you can make as a non-coder that will be very valuable to the community, such as giving feedback of any kind, reporting bugs, requesting features, adding new or improvements existing documentation, helping other users to use our software, asking and/or answering questions in our forums, promoting BIOS, Social Coding, our community and our software within Bosch or designing artwork for both our software, our wiki or our Bosch connect presence. May the source be with you!","title":"Other Contributions"},{"location":"getting-started/","text":"Overview \u00b6 This project contains Python modules (project directory) and corresponding tests of these modules in the tests directory. The pyproject.toml file contains all relevant project configuration. Please see the poetry docs for an overview of the pyproject.toml sections & fields. The docs directory and mkdocs.yaml file contain all information to build the project documentation. The poetry.toml and poetry.lock files contain poetry -specific information. It's important to know that poetry.lock exactly defines the dependency versions and thus enables deterministic builds. Project File / Directory Structure File / Directory Purpose .github CI / CD /release workflow definitions and a PR template executable_ml_kgs Project import modules docs Documentation directory (better write docs there instead of README.md ) tests Python module unit- & integration tests .pre-commit-config.yaml git hook definitions comsumed by pre-commit LICENSE The license in its long form mkdocs.yml Documentation config consumed by mkdocs pyproject.toml Project information, (dev-) dependencies and task runner configuration README.md General project overview, displayed when visiting GitHub repository Dependency Management & Packaging \u00b6 To keep the dependencies of different projects from interfering with each other, it is highly recommended to create an own python environment for every project. We use poetry to address this issue. By running poetry install , a separate virtual environment is created automatically into which all your dependencies are installed. This is similar to running pip install -r requirements.txt in an isolated virtual environment. Afterwards you can run any command within the virtual environment by simply calling poetry run <command> such as poetry run pylint . Deploying Packages to Artifactory \u00b6 If you want to release your software to make it available to others, you need to create a new git tag using semantic versioning . If you push this tag to the GitHub remote, it will trigger a [GitHub workflow] to build the Python package and upload it to the Artifactory repository. Artifactory access In order to be able to push to an Artifactory, you need access to it. Check this guide on how to manage access. To enable automatic package deployment to Artifactory, different Artifactory credentials need to be available depending on the organization your project was created in: E.g. for bios-bcai the secrets ARTIFACTORY_RESOURCE_USER and ARTIFACTORY_RESOURCE_TOKEN must be provided to GitHub Action workflows, while for bcai-internal the secrets BDC_ARTIFACTORY_USER and BDC_ARTIFACTORY_TOKEN are used. You can check in the repository settings tab if the secrets are available or add them otherwise. Finally, enable the deployment step in your CD GitHub Actions workflow located at .github/workflows/cd.yaml . Task Runner \u00b6 We define common tasks (e.g. executed in commit hooks and CI ) with poe , a task runner that allows defining tasks in the pyproject.toml file. Available tasks You can get a list of available tasks by running poetry run poe --help : Poe the Poet - A task runner that works well with poetry. version 0 .16.5 USAGE poe [ -h ] [ -v | -q ] [ --root PATH ] [ --ansi | --no-ansi ] task [ task arguments ] GLOBAL OPTIONS -h, --help Show this help page and exit --version Print the version and exit -v, --verbose Increase command output ( repeatable ) -q, --quiet Decrease command output ( repeatable ) -d, --dry-run Print the task contents but don 't actually run it --root PATH Specify where to find the pyproject.toml --ansi Force enable ANSI output --no-ansi Force disable ANSI output CONFIGURED TASKS bump-version-tag Bump version. This creates a new git tag based on the desired version part. Note that the task does not actually push the tag. You can do this manually e.g. by running ' poe push-latest-version-tag ' . part Part of version being bumped. Allowed values: patch, minor, major. --release Wether this is a release. Then, the tag will be annotated. clean Clean up all temporary files. deploy-docs Deploy docs ( to GitHub pages if using the --push flag ) ( needs completed docs task ) . --alias Version alias. --push Wether to push the docs. --version-postfix Optional information appended to version. deploy-package Deploy package to an artifactory repository. --password Repository password / access token. --repository Repository to use ( needs to be configured in poetry.toml ) . --username Repository user name. docs Build docs ( needs completed test task ) . format Format Python files with black & isort. --check Only check files List of files ( optional ) lint Lint Python files with bandit, pydocstyle, pyflakes, mypy & pylint. files List of files or directories ( optional ) push-latest-version-tag Push the latest version tag. release Make a new ( stable ) release. This will create and push a new tag based on the version, test, build & deploy the docs. part Release type. Allowed values: patch, minor, major. --password The repository password / access token. --username Repository user name. test Run pytest & compute test coverage. In the following, we explain the most frequently used tasks in more detail. Formatting \u00b6 Calling poetry run poe format formats Python code in-place using black and isort . Linting \u00b6 Running poetry run poe lint checks the Python code base using pylint & mypy mypy . This task will fail if there are errors or if the code quality score is below the tool.pylint.master.fail-under threshold defined in the pyproject.toml file. Testing \u00b6 Running poetry run poe test will run pytest , compute the test coverage and fail if below the minimum coverage defined by the tool.coverage.report.fail_under threshold in the pyproject.toml file. Documentation \u00b6 The code documentation is based on mkdocs which converts markdown files into a nicely-rendered web-page. In particular, we use the awesome mkdocs-material package which offers more than just theming. To generate documentation for different versions, mike is used as a plugin within mkdocs . To generate the docs, run poetry run poe docs The documentation features: Getting Started page set as home page Changelog API reference Contributing guideline Test summary & coverage report Project license & list of third-party dependencies with their licenses To deploy the docs to the gh-pages remote branch run poetry run poe deploy-docs --push --alias <alias> where <alias> may be e.g. latest , stable or my-awesome-temporary-branch . Git Hooks \u00b6 We use pre-commit to run git hooks helping you to develop high-quality code. The hooks are configured in the .pre-commit-config.yaml file and executed before commit. Installation After you cloned this project and plan to develop in it, don't forget to install these hooks via poetry run pre-commit install Available pre-commit hooks As you can see below, poe tasks are mostly reused to get consistent results across manual execution, git hooks & CI . # Copyright (c) 2022 Robert Bosch GmbH and its subsidiaries. All rights reserved. minimum_pre_commit_version : \"2.20.0\" repos : - repo : https://github.com/pre-commit/pre-commit-hooks rev : v4.3.0 hooks : - id : check-added-large-files - id : check-ast - id : check-case-conflict - id : check-merge-conflict - id : check-shebang-scripts-are-executable - id : check-symlinks - id : check-toml - id : check-yaml args : [ \"--unsafe\" ] - id : end-of-file-fixer - id : no-commit-to-branch # default: main, master - id : trailing-whitespace - repo : https://github.com/python-jsonschema/check-jsonschema rev : 0.19.2 hooks : - id : check-dependabot - id : check-github-actions - id : check-github-workflows - repo : local hooks : - id : format entry : poetry run poe format language : system name : Format files types : [ python ] - id : lint entry : poetry run poe lint language : system name : Lint code types : [ python ] GitHub Actions \u00b6 There are basic CI , CD and Release pipelines, executed as GitHub Actions workflow when pushing changes or opening PR 's. Available workflows .github/workflows/ci.yaml .github/workflows/cd.yaml .github/workflows/release.yaml # Copyright (c) 2022 Robert Bosch GmbH and its subsidiaries. All rights reserved. name : Continuous Integration on : [ pull_request , push , workflow_dispatch ] defaults : run : shell : bash concurrency : group : ${{ github.workflow }}-${{ github.ref }} cancel-in-progress : true jobs : ci : name : CI runs-on : [ self-hosted , Linux ] container : ubuntu:latest steps : - name : Install prerequisites env : DEBIAN_FRONTEND : noninteractive run : | apt-get update apt-get install --yes \\ curl \\ gcc \\ git \\ python3-dev \\ python3-venv - name : Set up poetry run : | curl -sSL https://install.python-poetry.org | python3 - --force echo \"$HOME/.local/bin\" >> $GITHUB_PATH - name : Checkout uses : actions/checkout@v3 with : fetch-depth : 0 - name : Install dependencies run : poetry install - name : Configure git run : | git config --add --global safe.directory \"$GITHUB_WORKSPACE\" git config user.name \"${GITHUB_ACTOR}\" git config user.email \"${GITHUB_ACTOR}@bosch.com\" - name : Install & run pre-commit hooks env : SKIP : no-commit-to-branch run : | poetry run pre-commit install poetry run pre-commit run --all-files --show-diff-on-failure - name : Run tests run : poetry run poe test - name : Code Coverage Summary uses : irongut/CodeCoverageSummary@v1.3.0 with : filename : coverage.xml format : markdown output : both - name : Build docs run : poetry run poe docs - name : Deploy temporary docs if : github.event_name == 'pull_request' run : | poetry run poe deploy-docs \\ --push \\ --alias pr-${{ github.event.number }} \\ --version-postfix pr-${{ github.event.number }} - name : Write PR note if : github.event_name == 'pull_request' run : | COVERAGE=$(cat code-coverage-results.md) cat <<EOT>> pr-note.md ## :rotating_light: Test Coverage $COVERAGE EOT - name : Add PR note if : github.event_name == 'pull_request' uses : marocchino/sticky-pull-request-comment@v2.3.1 with : path : pr-note.md # Copyright (c) 2022 Robert Bosch GmbH and its subsidiaries. All rights reserved. name : Continuous Deployment on : push : branches : [ main ] workflow_dispatch : defaults : run : shell : bash concurrency : group : ${{ github.workflow }}-${{ github.ref }} cancel-in-progress : true jobs : cd : name : CD if : github.repository == 'bcai-internal/executable-ml-kgs' runs-on : [ self-hosted , Linux ] container : ubuntu:latest steps : - name : Install prerequisites env : DEBIAN_FRONTEND : noninteractive run : | apt-get update apt-get install --yes \\ curl \\ gcc \\ git \\ python3-dev \\ python3-venv - name : Set up poetry run : | curl -sSL https://install.python-poetry.org | python3 - --force echo \"$HOME/.local/bin\" >> $GITHUB_PATH - name : Checkout uses : actions/checkout@v3 with : fetch-depth : 0 - name : Install dependencies run : poetry install - name : Configure git run : | git config --add --global safe.directory \"$GITHUB_WORKSPACE\" git config user.name \"${GITHUB_ACTOR}\" git config user.email \"${GITHUB_ACTOR}@bosch.com\" - name : Bump patch version run : poetry run poe bump-version-tag patch - name : Deploy docs run : | poetry run poe test poetry run poe docs poetry run poe deploy-docs --push --alias latest - name : Deploy package run : | poetry run poe deploy-package \\ --repository production \\ --username ${{ secrets.ARTIFACTORY_RESOURCE_USER }} \\ --password ${{ secrets.ARTIFACTORY_RESOURCE_TOKEN }} - name : Push version tag run : poetry run poe push-latest-version-tag update_release_draft : name : Update release notes runs-on : [ self-hosted , Linux ] container : ubuntu:latest steps : - name : Set GHE_HOST run : echo \"GHE_HOST=${GITHUB_SERVER_URL##https:\\/\\/}\" >> $GITHUB_ENV - uses : release-drafter/release-drafter@v5.21.0 env : GITHUB_TOKEN : ${{ secrets.GITHUB_TOKEN }} # Copyright (c) 2022 Robert Bosch GmbH and its subsidiaries. All rights reserved. name : Release on : workflow_dispatch : inputs : bumped-version-part : description : \"The version part to bump.\" type : choice options : - major - minor - patch default : \"minor\" required : true defaults : run : shell : bash concurrency : group : ${{ github.workflow }}-${{ github.ref }} cancel-in-progress : true jobs : release : name : Release if : github.repository == 'bcai-internal/executable-ml-kgs' runs-on : [ self-hosted , Linux ] container : ubuntu:latest steps : - name : Install prerequisites env : DEBIAN_FRONTEND : noninteractive run : | apt-get update apt-get install --yes \\ curl \\ gcc \\ git \\ python3-dev \\ python3-venv - name : Set up poetry run : | curl -sSL https://install.python-poetry.org | python3 - --force echo \"$HOME/.local/bin\" >> $GITHUB_PATH - name : Checkout uses : actions/checkout@v3 with : fetch-depth : 0 - name : Install dependencies run : poetry install - name : Configure git run : | git config --add --global safe.directory \"$GITHUB_WORKSPACE\" git config user.name \"${GITHUB_ACTOR}\" git config user.email \"${GITHUB_ACTOR}@bosch.com\" - name : Release run : | poetry run poe release ${{ github.event.inputs.bumped-version-part }} \\ --username ${{ secrets.ARTIFACTORY_RESOURCE_USER }} \\ --password ${{ secrets.ARTIFACTORY_RESOURCE_TOKEN }} Custom GitHub Actions Runners Depending on the namespace the project lives in, you may not be able to use any public GitHub Actions runners. However, additional GitHub Action runners for your project can be added following the steps outlined in https://github.boschdevcloud.com/bcai-internal/executable-ml-kgs/settings/actions/runners/new To deal with the Bosch proxy settings add a .env file into the runner directory: .env LANG=en_us.UTF-8 http_proxy=http://rb-proxy-de.bosch.com:8080 https_proxy=http://rb-proxy-de.bosch.com:8080","title":"Getting Started"},{"location":"getting-started/#overview","text":"This project contains Python modules (project directory) and corresponding tests of these modules in the tests directory. The pyproject.toml file contains all relevant project configuration. Please see the poetry docs for an overview of the pyproject.toml sections & fields. The docs directory and mkdocs.yaml file contain all information to build the project documentation. The poetry.toml and poetry.lock files contain poetry -specific information. It's important to know that poetry.lock exactly defines the dependency versions and thus enables deterministic builds. Project File / Directory Structure File / Directory Purpose .github CI / CD /release workflow definitions and a PR template executable_ml_kgs Project import modules docs Documentation directory (better write docs there instead of README.md ) tests Python module unit- & integration tests .pre-commit-config.yaml git hook definitions comsumed by pre-commit LICENSE The license in its long form mkdocs.yml Documentation config consumed by mkdocs pyproject.toml Project information, (dev-) dependencies and task runner configuration README.md General project overview, displayed when visiting GitHub repository","title":"Overview"},{"location":"getting-started/#dependency-management-packaging","text":"To keep the dependencies of different projects from interfering with each other, it is highly recommended to create an own python environment for every project. We use poetry to address this issue. By running poetry install , a separate virtual environment is created automatically into which all your dependencies are installed. This is similar to running pip install -r requirements.txt in an isolated virtual environment. Afterwards you can run any command within the virtual environment by simply calling poetry run <command> such as poetry run pylint .","title":"Dependency Management &amp; Packaging"},{"location":"getting-started/#deploying-packages-to-artifactory","text":"If you want to release your software to make it available to others, you need to create a new git tag using semantic versioning . If you push this tag to the GitHub remote, it will trigger a [GitHub workflow] to build the Python package and upload it to the Artifactory repository. Artifactory access In order to be able to push to an Artifactory, you need access to it. Check this guide on how to manage access. To enable automatic package deployment to Artifactory, different Artifactory credentials need to be available depending on the organization your project was created in: E.g. for bios-bcai the secrets ARTIFACTORY_RESOURCE_USER and ARTIFACTORY_RESOURCE_TOKEN must be provided to GitHub Action workflows, while for bcai-internal the secrets BDC_ARTIFACTORY_USER and BDC_ARTIFACTORY_TOKEN are used. You can check in the repository settings tab if the secrets are available or add them otherwise. Finally, enable the deployment step in your CD GitHub Actions workflow located at .github/workflows/cd.yaml .","title":"Deploying Packages to Artifactory"},{"location":"getting-started/#task-runner","text":"We define common tasks (e.g. executed in commit hooks and CI ) with poe , a task runner that allows defining tasks in the pyproject.toml file. Available tasks You can get a list of available tasks by running poetry run poe --help : Poe the Poet - A task runner that works well with poetry. version 0 .16.5 USAGE poe [ -h ] [ -v | -q ] [ --root PATH ] [ --ansi | --no-ansi ] task [ task arguments ] GLOBAL OPTIONS -h, --help Show this help page and exit --version Print the version and exit -v, --verbose Increase command output ( repeatable ) -q, --quiet Decrease command output ( repeatable ) -d, --dry-run Print the task contents but don 't actually run it --root PATH Specify where to find the pyproject.toml --ansi Force enable ANSI output --no-ansi Force disable ANSI output CONFIGURED TASKS bump-version-tag Bump version. This creates a new git tag based on the desired version part. Note that the task does not actually push the tag. You can do this manually e.g. by running ' poe push-latest-version-tag ' . part Part of version being bumped. Allowed values: patch, minor, major. --release Wether this is a release. Then, the tag will be annotated. clean Clean up all temporary files. deploy-docs Deploy docs ( to GitHub pages if using the --push flag ) ( needs completed docs task ) . --alias Version alias. --push Wether to push the docs. --version-postfix Optional information appended to version. deploy-package Deploy package to an artifactory repository. --password Repository password / access token. --repository Repository to use ( needs to be configured in poetry.toml ) . --username Repository user name. docs Build docs ( needs completed test task ) . format Format Python files with black & isort. --check Only check files List of files ( optional ) lint Lint Python files with bandit, pydocstyle, pyflakes, mypy & pylint. files List of files or directories ( optional ) push-latest-version-tag Push the latest version tag. release Make a new ( stable ) release. This will create and push a new tag based on the version, test, build & deploy the docs. part Release type. Allowed values: patch, minor, major. --password The repository password / access token. --username Repository user name. test Run pytest & compute test coverage. In the following, we explain the most frequently used tasks in more detail.","title":"Task Runner"},{"location":"getting-started/#formatting","text":"Calling poetry run poe format formats Python code in-place using black and isort .","title":"Formatting"},{"location":"getting-started/#linting","text":"Running poetry run poe lint checks the Python code base using pylint & mypy mypy . This task will fail if there are errors or if the code quality score is below the tool.pylint.master.fail-under threshold defined in the pyproject.toml file.","title":"Linting"},{"location":"getting-started/#testing","text":"Running poetry run poe test will run pytest , compute the test coverage and fail if below the minimum coverage defined by the tool.coverage.report.fail_under threshold in the pyproject.toml file.","title":"Testing"},{"location":"getting-started/#documentation","text":"The code documentation is based on mkdocs which converts markdown files into a nicely-rendered web-page. In particular, we use the awesome mkdocs-material package which offers more than just theming. To generate documentation for different versions, mike is used as a plugin within mkdocs . To generate the docs, run poetry run poe docs The documentation features: Getting Started page set as home page Changelog API reference Contributing guideline Test summary & coverage report Project license & list of third-party dependencies with their licenses To deploy the docs to the gh-pages remote branch run poetry run poe deploy-docs --push --alias <alias> where <alias> may be e.g. latest , stable or my-awesome-temporary-branch .","title":"Documentation"},{"location":"getting-started/#git-hooks","text":"We use pre-commit to run git hooks helping you to develop high-quality code. The hooks are configured in the .pre-commit-config.yaml file and executed before commit. Installation After you cloned this project and plan to develop in it, don't forget to install these hooks via poetry run pre-commit install Available pre-commit hooks As you can see below, poe tasks are mostly reused to get consistent results across manual execution, git hooks & CI . # Copyright (c) 2022 Robert Bosch GmbH and its subsidiaries. All rights reserved. minimum_pre_commit_version : \"2.20.0\" repos : - repo : https://github.com/pre-commit/pre-commit-hooks rev : v4.3.0 hooks : - id : check-added-large-files - id : check-ast - id : check-case-conflict - id : check-merge-conflict - id : check-shebang-scripts-are-executable - id : check-symlinks - id : check-toml - id : check-yaml args : [ \"--unsafe\" ] - id : end-of-file-fixer - id : no-commit-to-branch # default: main, master - id : trailing-whitespace - repo : https://github.com/python-jsonschema/check-jsonschema rev : 0.19.2 hooks : - id : check-dependabot - id : check-github-actions - id : check-github-workflows - repo : local hooks : - id : format entry : poetry run poe format language : system name : Format files types : [ python ] - id : lint entry : poetry run poe lint language : system name : Lint code types : [ python ]","title":"Git Hooks"},{"location":"getting-started/#github-actions","text":"There are basic CI , CD and Release pipelines, executed as GitHub Actions workflow when pushing changes or opening PR 's. Available workflows .github/workflows/ci.yaml .github/workflows/cd.yaml .github/workflows/release.yaml # Copyright (c) 2022 Robert Bosch GmbH and its subsidiaries. All rights reserved. name : Continuous Integration on : [ pull_request , push , workflow_dispatch ] defaults : run : shell : bash concurrency : group : ${{ github.workflow }}-${{ github.ref }} cancel-in-progress : true jobs : ci : name : CI runs-on : [ self-hosted , Linux ] container : ubuntu:latest steps : - name : Install prerequisites env : DEBIAN_FRONTEND : noninteractive run : | apt-get update apt-get install --yes \\ curl \\ gcc \\ git \\ python3-dev \\ python3-venv - name : Set up poetry run : | curl -sSL https://install.python-poetry.org | python3 - --force echo \"$HOME/.local/bin\" >> $GITHUB_PATH - name : Checkout uses : actions/checkout@v3 with : fetch-depth : 0 - name : Install dependencies run : poetry install - name : Configure git run : | git config --add --global safe.directory \"$GITHUB_WORKSPACE\" git config user.name \"${GITHUB_ACTOR}\" git config user.email \"${GITHUB_ACTOR}@bosch.com\" - name : Install & run pre-commit hooks env : SKIP : no-commit-to-branch run : | poetry run pre-commit install poetry run pre-commit run --all-files --show-diff-on-failure - name : Run tests run : poetry run poe test - name : Code Coverage Summary uses : irongut/CodeCoverageSummary@v1.3.0 with : filename : coverage.xml format : markdown output : both - name : Build docs run : poetry run poe docs - name : Deploy temporary docs if : github.event_name == 'pull_request' run : | poetry run poe deploy-docs \\ --push \\ --alias pr-${{ github.event.number }} \\ --version-postfix pr-${{ github.event.number }} - name : Write PR note if : github.event_name == 'pull_request' run : | COVERAGE=$(cat code-coverage-results.md) cat <<EOT>> pr-note.md ## :rotating_light: Test Coverage $COVERAGE EOT - name : Add PR note if : github.event_name == 'pull_request' uses : marocchino/sticky-pull-request-comment@v2.3.1 with : path : pr-note.md # Copyright (c) 2022 Robert Bosch GmbH and its subsidiaries. All rights reserved. name : Continuous Deployment on : push : branches : [ main ] workflow_dispatch : defaults : run : shell : bash concurrency : group : ${{ github.workflow }}-${{ github.ref }} cancel-in-progress : true jobs : cd : name : CD if : github.repository == 'bcai-internal/executable-ml-kgs' runs-on : [ self-hosted , Linux ] container : ubuntu:latest steps : - name : Install prerequisites env : DEBIAN_FRONTEND : noninteractive run : | apt-get update apt-get install --yes \\ curl \\ gcc \\ git \\ python3-dev \\ python3-venv - name : Set up poetry run : | curl -sSL https://install.python-poetry.org | python3 - --force echo \"$HOME/.local/bin\" >> $GITHUB_PATH - name : Checkout uses : actions/checkout@v3 with : fetch-depth : 0 - name : Install dependencies run : poetry install - name : Configure git run : | git config --add --global safe.directory \"$GITHUB_WORKSPACE\" git config user.name \"${GITHUB_ACTOR}\" git config user.email \"${GITHUB_ACTOR}@bosch.com\" - name : Bump patch version run : poetry run poe bump-version-tag patch - name : Deploy docs run : | poetry run poe test poetry run poe docs poetry run poe deploy-docs --push --alias latest - name : Deploy package run : | poetry run poe deploy-package \\ --repository production \\ --username ${{ secrets.ARTIFACTORY_RESOURCE_USER }} \\ --password ${{ secrets.ARTIFACTORY_RESOURCE_TOKEN }} - name : Push version tag run : poetry run poe push-latest-version-tag update_release_draft : name : Update release notes runs-on : [ self-hosted , Linux ] container : ubuntu:latest steps : - name : Set GHE_HOST run : echo \"GHE_HOST=${GITHUB_SERVER_URL##https:\\/\\/}\" >> $GITHUB_ENV - uses : release-drafter/release-drafter@v5.21.0 env : GITHUB_TOKEN : ${{ secrets.GITHUB_TOKEN }} # Copyright (c) 2022 Robert Bosch GmbH and its subsidiaries. All rights reserved. name : Release on : workflow_dispatch : inputs : bumped-version-part : description : \"The version part to bump.\" type : choice options : - major - minor - patch default : \"minor\" required : true defaults : run : shell : bash concurrency : group : ${{ github.workflow }}-${{ github.ref }} cancel-in-progress : true jobs : release : name : Release if : github.repository == 'bcai-internal/executable-ml-kgs' runs-on : [ self-hosted , Linux ] container : ubuntu:latest steps : - name : Install prerequisites env : DEBIAN_FRONTEND : noninteractive run : | apt-get update apt-get install --yes \\ curl \\ gcc \\ git \\ python3-dev \\ python3-venv - name : Set up poetry run : | curl -sSL https://install.python-poetry.org | python3 - --force echo \"$HOME/.local/bin\" >> $GITHUB_PATH - name : Checkout uses : actions/checkout@v3 with : fetch-depth : 0 - name : Install dependencies run : poetry install - name : Configure git run : | git config --add --global safe.directory \"$GITHUB_WORKSPACE\" git config user.name \"${GITHUB_ACTOR}\" git config user.email \"${GITHUB_ACTOR}@bosch.com\" - name : Release run : | poetry run poe release ${{ github.event.inputs.bumped-version-part }} \\ --username ${{ secrets.ARTIFACTORY_RESOURCE_USER }} \\ --password ${{ secrets.ARTIFACTORY_RESOURCE_TOKEN }} Custom GitHub Actions Runners Depending on the namespace the project lives in, you may not be able to use any public GitHub Actions runners. However, additional GitHub Action runners for your project can be added following the steps outlined in https://github.boschdevcloud.com/bcai-internal/executable-ml-kgs/settings/actions/runners/new To deal with the Bosch proxy settings add a .env file into the runner directory: .env LANG=en_us.UTF-8 http_proxy=http://rb-proxy-de.bosch.com:8080 https_proxy=http://rb-proxy-de.bosch.com:8080","title":"GitHub Actions"},{"location":"installation/","text":"Installation \u00b6 Step 0: poetry \u00b6 This project is managed by poetry , a Python packaging and dependency management tool. This means, however, that poetry needs to be installed before you can install this project. To be honest, the official poetry installation docs are great and provide different ways to install poetry on different platforms and under different conditions. However, as some people are lazy, below you can find a few ways to install poetry . As mentioned above: If your required / desired way of installation is not listed, go to the official installation docs before ranting! Linux conda (not recommended) Run curl -sSL https://install.python-poetry.org | python3 - and follow the instructions. Finally, consider adding poetry 's installation path to your environment PATH (or similar), e.g. via export PATH = $PATH : $HOME /.local/bin for poetry 's default installation path. If you really need to go through conda (I know in some cases that's the only option), try this: conda activate some-environment conda install pip pip install pipx pipx install poetry conda deactivate Step 1: Actual Installation \u00b6 The final project installation should be piece of in most cases by running poetry install from within the project directory. No project development intended? If you don't need any development setup, you can pass the --no-dev flag to skip the development dependencies. Computer says no\u2026 In some cases, this does not work right away. Please find a collection of failure cases below (thanks for the feedback! ) What? Hint \"I get a ConnectionError \" Maybe you have proxy issues. \"I destroyed my poetry environment\" Delete the .venv folder and create a new env.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#step-0-poetry","text":"This project is managed by poetry , a Python packaging and dependency management tool. This means, however, that poetry needs to be installed before you can install this project. To be honest, the official poetry installation docs are great and provide different ways to install poetry on different platforms and under different conditions. However, as some people are lazy, below you can find a few ways to install poetry . As mentioned above: If your required / desired way of installation is not listed, go to the official installation docs before ranting! Linux conda (not recommended) Run curl -sSL https://install.python-poetry.org | python3 - and follow the instructions. Finally, consider adding poetry 's installation path to your environment PATH (or similar), e.g. via export PATH = $PATH : $HOME /.local/bin for poetry 's default installation path. If you really need to go through conda (I know in some cases that's the only option), try this: conda activate some-environment conda install pip pip install pipx pipx install poetry conda deactivate","title":"Step 0: poetry"},{"location":"installation/#step-1-actual-installation","text":"The final project installation should be piece of in most cases by running poetry install from within the project directory. No project development intended? If you don't need any development setup, you can pass the --no-dev flag to skip the development dependencies. Computer says no\u2026 In some cases, this does not work right away. Please find a collection of failure cases below (thanks for the feedback! ) What? Hint \"I get a ConnectionError \" Maybe you have proxy issues. \"I destroyed my poetry environment\" Delete the .venv folder and create a new env.","title":"Step 1: Actual Installation"},{"location":"license/","text":"Copyright \u00a9 2022 Robert Bosch GmbH and its subsidiaries. All rights reserved.","title":"executable_ml_kgs"},{"location":"exported/changelog/","text":"v0.1.0 (2022-11-30) \u00b6","title":"Changelog"},{"location":"exported/changelog/#v010-2022-11-30","text":"","title":"v0.1.0 (2022-11-30)"},{"location":"exported/third-party-licenses/","text":"Name Version License Author URL Description Babel 2.11.0 BSD License Armin Ronacher https://babel.pocoo.org/ Internationalization utilities GitPython 3.1.29 BSD License Sebastian Thiel, Michael Trier https://github.com/gitpython-developers/GitPython GitPython is a python library used to interact with Git repositories Jinja2 3.1.2 BSD License Armin Ronacher https://palletsprojects.com/p/jinja/ A very fast and expressive template engine. Markdown 3.3.7 BSD License Manfred Stienstra, Yuri takhteyev and Waylan limberg https://Python-Markdown.github.io/ Python implementation of Markdown. MarkupSafe 2.1.1 BSD License Armin Ronacher https://palletsprojects.com/p/markupsafe/ Safely add untrusted strings to HTML/XML markup. Pillow 9.3.0 Historical Permission Notice and Disclaimer (HPND) Alex Clark (PIL Fork Author) https://python-pillow.org Python Imaging Library (Fork) PyYAML 6.0 MIT License Kirill Simonov https://pyyaml.org/ YAML parser and emitter for Python Pygments 2.13.0 BSD License Georg Brandl https://pygments.org/ Pygments is a syntax highlighting package written in Python. astroid 2.12.13 GNU Lesser General Public License v2 (LGPLv2) UNKNOWN UNKNOWN An abstract syntax tree for Python with inference support. attrs 22.1.0 MIT License Hynek Schlawack https://www.attrs.org/ Classes Without Boilerplate bandit 1.7.4 Apache Software License PyCQA https://bandit.readthedocs.io/ Security oriented static analyser for python code. black 22.10.0 MIT License UNKNOWN UNKNOWN The uncompromising code formatter. certifi 2022.9.24 Mozilla Public License 2.0 (MPL 2.0) Kenneth Reitz https://github.com/certifi/python-certifi Python package for providing Mozilla's CA Bundle. cfgv 3.3.1 MIT License Anthony Sottile https://github.com/asottile/cfgv Validate configuration and produce human readable error messages. charset-normalizer 2.1.1 MIT License Ahmed TAHRI @Ousret https://github.com/ousret/charset_normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. click 8.1.3 BSD License Armin Ronacher https://palletsprojects.com/p/click/ Composable command line interface toolkit colorama 0.4.6 BSD License UNKNOWN UNKNOWN Cross-platform colored terminal text. coverage 6.5.0 Apache Software License Ned Batchelder and 161 others https://github.com/nedbat/coveragepy Code coverage measurement for Python csscompressor 0.9.5 BSD License Yury Selivanov http://github.com/sprymix/csscompressor A python port of YUI CSS Compressor defusedxml 0.7.1 Python Software Foundation License Christian Heimes https://github.com/tiran/defusedxml XML bomb protection for Python stdlib modules dill 0.3.6 BSD License Mike McKerns https://github.com/uqfoundation/dill serialize all of python distlib 0.3.6 Python Software Foundation License Vinay Sajip https://github.com/pypa/distlib Distribution utilities dunamai 1.14.1 MIT License Matthew T. Kennerly https://github.com/mtkennerly/dunamai Dynamic version generation exceptiongroup 1.0.4 MIT License UNKNOWN UNKNOWN Backport of PEP 654 (exception groups) execnet 1.9.0 MIT License holger krekel and others https://execnet.readthedocs.io/en/latest/ execnet: rapid multi-Python deployment filelock 3.8.0 Public Domain Benedikt Schmitt https://github.com/tox-dev/py-filelock A platform independent file lock. genbadge 1.1.0 BSD License Sylvain MARIE sylvain.marie@se.com https://github.com/smarie/python-genbadge Generate badges for tools that do not provide one. ghp-import 2.1.0 Apache Software License Paul Joseph Davis https://github.com/c-w/ghp-import Copy your docs directly to the gh-pages branch. git-changelog 0.6.0 ISC UNKNOWN UNKNOWN Automatic Changelog generator using Jinja2 templates. gitdb 4.0.10 BSD License Sebastian Thiel https://github.com/gitpython-developers/gitdb Git Object Database griffe 0.24.1 ISC UNKNOWN UNKNOWN Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. htmlmin 0.1.12 BSD License Dave Mankoff https://htmlmin.readthedocs.io/en/latest/ An HTML Minifier identify 2.5.9 MIT License Chris Kuehl https://github.com/pre-commit/identify File identification library for Python idna 3.4 BSD License UNKNOWN UNKNOWN Internationalized Domain Names in Applications (IDNA) importlib-metadata 5.1.0 Apache Software License Jason R. Coombs https://github.com/python/importlib_metadata Read metadata from Python packages iniconfig 1.1.1 MIT License Ronny Pfannschmidt, Holger Krekel http://github.com/RonnyPfannschmidt/iniconfig iniconfig: brain-dead simple config-ini parsing isort 5.10.1 MIT License Timothy Crosley https://pycqa.github.io/isort/ A Python utility / library to sort Python imports. jsmin 3.0.1 MIT License Dave St.Germain https://github.com/tikitu/jsmin/ JavaScript minifier. lazy-object-proxy 1.8.0 BSD License Ionel Cristian M\u0103rie\u0219 https://github.com/ionelmc/python-lazy-object-proxy A fast and thorough lazy object proxy. mccabe 0.7.0 MIT License Tarek Ziade https://github.com/pycqa/mccabe McCabe checker, plugin for flake8 mergedeep 1.3.4 MIT License Travis Clarke https://github.com/clarketm/mergedeep A deep merge function for \ud83d\udc0d. mike 1.1.2 BSD License Jim Porter https://github.com/jimporter/mike Manage multiple versions of your MkDocs-powered documentation mkdocs 1.4.2 BSD License UNKNOWN UNKNOWN Project documentation with Markdown. mkdocs-autorefs 0.4.1 ISC License (ISCL) UNKNOWN UNKNOWN Automatically link across pages in MkDocs. mkdocs-gen-files 0.4.0 MIT License Oleh Prypin https://github.com/oprypin/mkdocs-gen-files MkDocs plugin to programmatically generate documentation pages during the build mkdocs-git-revision-date-localized-plugin 1.1.0 MIT License Tim Vink https://github.com/timvink/mkdocs-git-revision-date-localized-plugin Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. mkdocs-literate-nav 0.5.0 MIT License Oleh Prypin https://github.com/oprypin/mkdocs-literate-nav MkDocs plugin to specify the navigation in Markdown instead of YAML mkdocs-material 8.5.10 MIT License UNKNOWN UNKNOWN Documentation that simply works mkdocs-material-extensions 1.1.1 MIT License UNKNOWN UNKNOWN Extension pack for Python Markdown and MkDocs Material. mkdocs-minify-plugin 0.6.2 MIT License Byrne Reese, Lars Wilhelmer https://github.com/byrnereese/mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk mkdocstrings 0.19.0 ISC License (ISCL) UNKNOWN UNKNOWN Automatic documentation from sources, for MkDocs. mkdocstrings-python 0.8.2 ISC UNKNOWN UNKNOWN A Python handler for mkdocstrings. mypy 0.991 MIT License Jukka Lehtosalo http://www.mypy-lang.org/ Optional static typing for Python mypy-extensions 0.4.3 MIT License The mypy developers https://github.com/python/mypy_extensions Experimental type system extensions for programs checked with the mypy typechecker. nodeenv 1.7.0 BSD License Eugene Kalinin https://github.com/ekalinin/nodeenv Node.js virtual environment builder packaging 21.3 Apache Software License; BSD License Donald Stufft and individual contributors https://github.com/pypa/packaging Core utilities for Python packages pastel 0.2.1 MIT License S\u00e9bastien Eustace https://github.com/sdispater/pastel Bring colors to your terminal. pathspec 0.10.2 Mozilla Public License 2.0 (MPL 2.0) Caleb P. Burns https://github.com/cpburnz/python-pathspec Utility library for gitignore style pattern matching of file paths. pbr 5.11.0 Apache Software License OpenStack https://docs.openstack.org/pbr/latest/ Python Build Reasonableness platformdirs 2.5.4 MIT License UNKNOWN UNKNOWN A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". pluggy 1.0.0 MIT License Holger Krekel https://github.com/pytest-dev/pluggy plugin and hook calling mechanisms for python poethepoet 0.16.5 MIT License Nat Noordanus https://github.com/nat-n/poethepoet A task runner that works well with poetry. pre-commit 2.20.0 MIT License Anthony Sottile https://github.com/pre-commit/pre-commit A framework for managing and maintaining multi-language pre-commit hooks. py 1.11.0 MIT License holger krekel, Ronny Pfannschmidt, Benjamin Peterson and others https://py.readthedocs.io/ library with cross-python path, ini-parsing, io, code, log facilities pydocstyle 6.1.1 MIT License Amir Rachum https://github.com/PyCQA/pydocstyle/ Python docstring style checker pyflakes 3.0.1 MIT License A lot of people https://github.com/PyCQA/pyflakes passive checker of Python programs pylint 2.15.7 GNU General Public License v2 (GPLv2) UNKNOWN UNKNOWN python code static checker pymdown-extensions 9.9 MIT License UNKNOWN UNKNOWN Extension pack for Python Markdown. pyparsing 3.0.9 MIT License UNKNOWN UNKNOWN pyparsing module - Classes and methods to define and execute parsing grammars pytest 7.2.0 MIT License Holger Krekel, Bruno Oliveira, Ronny Pfannschmidt, Floris Bruynooghe, Brianna Laugher, Florian Bruhin and others https://docs.pytest.org/en/latest/ pytest: simple powerful testing with Python pytest-cov 4.0.0 MIT License Marc Schlaich https://github.com/pytest-dev/pytest-cov Pytest plugin for measuring coverage. pytest-html 3.2.0 Mozilla Public License 2.0 (MPL 2.0) Dave Hunt https://github.com/pytest-dev/pytest-html pytest plugin for generating HTML reports pytest-metadata 2.0.4 MPL-2.0 Dave Hunt https://github.com/pytest-dev/pytest-metadata pytest plugin for test session metadata pytest-xdist 3.0.2 MIT License holger krekel and contributors https://github.com/pytest-dev/pytest-xdist pytest xdist plugin for distributed testing and loop-on-failing modes python-dateutil 2.8.2 Apache Software License; BSD License Gustavo Niemeyer https://github.com/dateutil/dateutil Extensions to the standard Python datetime module pytz 2022.6 MIT License Stuart Bishop http://pythonhosted.org/pytz World timezone definitions, modern and historical pyupgrade 3.2.3 MIT License Anthony Sottile https://github.com/asottile/pyupgrade A tool to automatically upgrade syntax for newer versions. pyyaml_env_tag 0.1 MIT License Waylan Limberg https://github.com/waylan/pyyaml-env-tag A custom YAML tag for referencing environment variables in YAML files. requests 2.28.1 Apache Software License Kenneth Reitz https://requests.readthedocs.io Python HTTP for Humans. semver 2.13.0 BSD License Kostiantyn Rybnikov https://github.com/python-semver/python-semver Python helper for Semantic Versioning (http://semver.org/) six 1.16.0 MIT License Benjamin Peterson https://github.com/benjaminp/six Python 2 and 3 compatibility utilities smmap 5.0.0 BSD License Sebastian Thiel https://github.com/gitpython-developers/smmap A pure Python implementation of a sliding window memory map manager snowballstemmer 2.2.0 BSD License Snowball Developers https://github.com/snowballstem/snowball This package provides 29 stemmers for 28 languages generated from Snowball algorithms. stevedore 4.1.1 Apache Software License OpenStack https://docs.openstack.org/stevedore/latest/ Manage dynamic plugins for Python applications tokenize-rt 5.0.0 MIT License Anthony Sottile https://github.com/asottile/tokenize-rt A wrapper around the stdlib tokenize which roundtrips. toml 0.10.2 MIT License William Pearson https://github.com/uiri/toml Python Library for Tom's Obvious, Minimal Language tomli 2.0.1 MIT License UNKNOWN UNKNOWN A lil' TOML parser tomlkit 0.11.6 MIT License S\u00e9bastien Eustace https://github.com/sdispater/tomlkit Style preserving TOML library typer 0.7.0 MIT License Sebasti\u00e1n Ram\u00edrez https://github.com/tiangolo/typer Typer, build great CLIs. Easy to code. Based on Python type hints. typing_extensions 4.4.0 Python Software Foundation License UNKNOWN UNKNOWN Backported and Experimental Type Hints for Python 3.7+ urllib3 1.26.13 MIT License Andrey Petrov https://urllib3.readthedocs.io/ HTTP library with thread-safe connection pooling, file post, and more. verspec 0.1.0 Apache Software License; BSD License Jim Porter https://github.com/jimporter/verspec Flexible version handling virtualenv 20.17.0 MIT License Bernat Gabor https://virtualenv.pypa.io/ Virtual Python Environment builder watchdog 2.1.9 Apache Software License Yesudeep Mangalapilly https://github.com/gorakhargosh/watchdog Filesystem events monitoring wrapt 1.14.1 BSD License Graham Dumpleton https://github.com/GrahamDumpleton/wrapt Module for decorators, wrappers and monkey patching. zipp 3.11.0 MIT License Jason R. Coombs https://github.com/jaraco/zipp Backport of pathlib-compatible object wrapper for zip files","title":"Third-Party Libraries"},{"location":"reference/","text":"Code Reference \u00b6 The structure of this reference (see navigation tree on the left) mimics the structure of the project's code base.","title":"executable_ml_kgs"},{"location":"reference/#code-reference","text":"The structure of this reference (see navigation tree on the left) mimics the structure of the project's code base.","title":"Code Reference"},{"location":"reference/code-nav/","text":"executable_ml_kgs cli main say","title":"Code nav"},{"location":"reference/cli/main/","text":"CLI entry point.","title":"main"},{"location":"reference/cli/say/","text":"'say' commands. goodbye ( name = DEFAULT_NAME ) \u00b6 Says 'Goodbye' to someone. Source code in executable_ml_kgs/cli/say.py 19 20 21 22 23 @app . command () def goodbye ( name : str = DEFAULT_NAME ) -> None : \"\"\"Says 'Goodbye' to someone.\"\"\" typer . secho ( f \"Goodbye, { name } !\" , fg = \"blue\" ) hello ( name = DEFAULT_NAME ) \u00b6 Says 'Hello' to someone. Source code in executable_ml_kgs/cli/say.py 12 13 14 15 16 @app . command () def hello ( name : str = DEFAULT_NAME ) -> None : \"\"\"Says 'Hello' to someone.\"\"\" typer . secho ( f \"Hello, { name } !\" , fg = \"green\" )","title":"say"},{"location":"reference/cli/say/#executable_ml_kgs.cli.say.goodbye","text":"Says 'Goodbye' to someone. Source code in executable_ml_kgs/cli/say.py 19 20 21 22 23 @app . command () def goodbye ( name : str = DEFAULT_NAME ) -> None : \"\"\"Says 'Goodbye' to someone.\"\"\" typer . secho ( f \"Goodbye, { name } !\" , fg = \"blue\" )","title":"goodbye()"},{"location":"reference/cli/say/#executable_ml_kgs.cli.say.hello","text":"Says 'Hello' to someone. Source code in executable_ml_kgs/cli/say.py 12 13 14 15 16 @app . command () def hello ( name : str = DEFAULT_NAME ) -> None : \"\"\"Says 'Hello' to someone.\"\"\" typer . secho ( f \"Hello, { name } !\" , fg = \"green\" )","title":"hello()"}]}